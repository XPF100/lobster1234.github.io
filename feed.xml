<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.4.3">Jekyll</generator>
  
  
  <link href="https://lobster1234.github.io/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://lobster1234.github.io/" rel="alternate" type="text/html" />
  <updated>2017-10-07T16:42:03-07:00</updated>
  <id>https://lobster1234.github.io//</id>

  
    <title type="html">Manish Pandit’s Blog</title>
  

  
    <subtitle>A tech blog with gists, code, presentations, tutorials, and many goodies around programming, devops, cloud architectures, aws, google cloud platform, and infrastructure.
</subtitle>
  

  
    <author>
        <name>Manish Pandit</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">SVCC 2017 - AWS Lambda with Serverless Framework and Java</title>
      
      <link href="https://lobster1234.github.io/2017/10/07/aws-lambda-with-serverless-framework-and-java/" rel="alternate" type="text/html" title="SVCC 2017 - AWS Lambda with Serverless Framework and Java" />
      <published>2017-10-07T13:44:37-07:00</published>
      <updated>2017-10-07T13:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/10/07/aws-lambda-with-serverless-framework-and-java</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/10/07/aws-lambda-with-serverless-framework-and-java/">&lt;p&gt;Slides from my talk at &lt;a href=&quot;https://www.siliconvalley-codecamp.com/&quot; target=&quot;_blank_&quot;&gt;Silicon Valley Code Camp 2017&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Serverless is a node.js based framework that makes creating, deploying, and managing serverless functions a breeze. We will use AWS Lambda as our FaaS (Function-as-a-Service) provider, although Serverless supports IBM OpenWhisk and Microsoft Azure as well.&lt;/p&gt;

&lt;p&gt;In this session, we will talk about Serverless Applications, and Create and deploy a java-maven based AWS Lambda API. We will also explore the command line interface to manage lambda, which is provided out of the box by serverless framework.
&lt;!--more--&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;6287d345962748ad9937d7c55b399425&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="presentations" />
      
        <category term="serverless" />
      

      
        <category term="aws," />
      
        <category term="lambda," />
      
        <category term="presentations," />
      
        <category term="svcc17," />
      
        <category term="serverless" />
      

      
        <summary type="html">Slides from my talk at Silicon Valley Code Camp 2017. Serverless is a node.js based framework that makes creating, deploying, and managing serverless functions a breeze. We will use AWS Lambda as our FaaS (Function-as-a-Service) provider, although Serverless supports IBM OpenWhisk and Microsoft Azure as well. In this session, we will talk about Serverless Applications, and Create and deploy a java-maven based AWS Lambda API. We will also explore the command line interface to manage lambda, which is provided out of the box by serverless framework.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">AWS KMS and Envelope Encryption</title>
      
      <link href="https://lobster1234.github.io/2017/09/29/aws-kms-envelope-encryption/" rel="alternate" type="text/html" title="AWS KMS and Envelope Encryption" />
      <published>2017-09-29T23:44:37-07:00</published>
      <updated>2017-09-29T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/09/29/aws-kms-envelope-encryption</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/09/29/aws-kms-envelope-encryption/">&lt;p&gt;Every service needs encryption at one point or another - passwords to the database, credentials to an external service, or even entire filesystem or files. Sticking the secrets, or keys in configuration files seems a quick and easy option. However, it carries security risks, even if these configurations are managed outside of the source code. On top of it, the keys used to encrypt/decrypt the data bring additional security implications and requirements in terms of storage, audit, and lifecycle management.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/kms/&quot;&gt;AWS KMS&lt;/a&gt;, or AWS Key Management Service is a fully managed service to store and manage keys. Any AWS service which supports encryption - S3 buckets, EBS Volumes, SQS, etc. uses KMS under the hood. KMS is more than just a key manager, it can also be used to encrypt large volumes of data, using a technique called Envelope Encryption.&lt;/p&gt;

&lt;p&gt;In this post I will cover KMS, and the &lt;em&gt;why&lt;/em&gt;, &lt;em&gt;what&lt;/em&gt;, and &lt;em&gt;how&lt;/em&gt; of Envelope Encryption.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;An ideal key management system should be highly available, control access to the master key(s), audit the key(s) usage, and manage key(s) lifecycle. This becomes all the more important with microservices, as the number of such secrets can grow to a large number, if the services being composed to offer a functionality all need their own secrets.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Access to &lt;a href=&quot;https://console.aws.amazon.com/console/home&quot;&gt;AWS Console&lt;/a&gt; (optional, but preferred)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/cli/&quot;&gt;AWS CLI&lt;/a&gt; which is configured with credentials that allow for &lt;code class=&quot;highlighter-rouge&quot;&gt;AWSKeyManagementServicePowerUser&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/awslabs/aws-shell&quot;&gt;AWS Shell&lt;/a&gt;, which I prefer over using the CLI&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;base64&lt;/code&gt; commands (I am using a Mac OSX Sierra)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;aws-kms&quot;&gt;AWS KMS&lt;/h2&gt;

&lt;p&gt;KMS keys are referred to as CMKs (Customer Master Keys). The CMKs are used to encrypt and decrypt data, &lt;em&gt;or other keys&lt;/em&gt; - as we will see below. Customers can also choose to upload their own keys to KMS. As mentioned earlier, AWS uses KMS to manage keys for it’s own services. These keys are called &lt;em&gt;AWS-Managed CMKs&lt;/em&gt;, as opposed to the ones created by the customer, called &lt;em&gt;Customer-Managed CMKs&lt;/em&gt;. Customer-Managed CMKs can be used for AWS services if customers want greater control over key-rotations, etc. KMS provides &lt;a href=&quot;https://en.wikipedia.org/wiki/Symmetric-key_algorithm&quot;&gt;symmetric encryption&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have, in the past, used any AWS service with encryption, AWS has created CMKs for it on your behalf. These will be the AWS-Managed CMKs - one per service per region. To check it out, log in to the AWS Console, and click &lt;code class=&quot;highlighter-rouge&quot;&gt;Encryption keys&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;IAM&lt;/code&gt; to see the AWS Managed Keys. The AWS-Managed CMKs show up with the orange AWS icon.&lt;/p&gt;

&lt;p&gt;Here is what my keys look like -&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/kms-aws-managed.png&quot; alt=&quot;kms-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The keys are region specific, so you may want to pick different regions to see the CMKs in those regions.&lt;/p&gt;

&lt;p&gt;The CMKs can never be retrieved or seen in plaintext - AWS uses its underlying infrastructure to keep the CMKs secure, highly available, and durable.&lt;/p&gt;

&lt;p&gt;Data should be only decrypted &lt;em&gt;where&lt;/em&gt; it is needed, not at some server and then transmitted over unencrypted. IAM policies control who can encrypt and/or decrypt using the CMKs, and these policies can a be part of IAM roles associated with AWS resources. IAM policies also control who can administer the CMKs.&lt;/p&gt;

&lt;p&gt;KMS can be used to decrypt/encrypt up to 4KB of data. This begs the question - how does AWS manage to encrypt EBS volumes and large S3 files with KMS? The answer is - &lt;a href=&quot;http://docs.aws.amazon.com/kms/latest/developerguide/workflow.html&quot;&gt;Envelope Encryption&lt;/a&gt;. The CMKs can be used to generate a different type of keys called data keys, which can then be used to encrypt/decrypt data. However, the data keys, when generated, are returned in plain-text, and AWS does not store or manage them. It is up to the customer to store and use the data keys on their own.&lt;/p&gt;

&lt;h2 id=&quot;envelope-encryption&quot;&gt;Envelope Encryption&lt;/h2&gt;

&lt;p&gt;Here are the steps to implement Envelope Encryption  -&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new CMK, or re-use an existing CMK. This can be done the AWS Console, or with CLI using &lt;a href=&quot;http://docs.aws.amazon.com/cli/latest/reference/kms/create-key.html&quot;&gt;create-key&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;http://docs.aws.amazon.com/cli/latest/reference/kms/generate-data-key.html&quot;&gt;generate-data-key&lt;/a&gt; to get a data key.&lt;/li&gt;
  &lt;li&gt;This returns the plain text data key, and also an encrypted (with the specified CMK) version of the data key. The encrypted version is referred to as a &lt;em&gt;CipherTextBlob&lt;/em&gt;. Store the returned CipherTextBlob (we will need it later). The CipherTextBlob has metadata which tells KMS which CMK was used to generate it. Store this CipherTextBlob.&lt;/li&gt;
  &lt;li&gt;Use the plain-text data key to encrypt any amount of data.&lt;/li&gt;
  &lt;li&gt;Throw away the plain-text data key, but be sure to store the CipherTextBlob along side the encrypted data.&lt;/li&gt;
  &lt;li&gt;To decrypt, use the &lt;a href=&quot;http://docs.aws.amazon.com/kms/latest/APIReference/API_Decrypt.html&quot;&gt;Decrypt API&lt;/a&gt;, sending it the CipherTextBlob from step (3).&lt;/li&gt;
  &lt;li&gt;The above step will return the plain text data key (the same one we threw away). Use this key to decrypt the data.&lt;/li&gt;
  &lt;li&gt;Throw away the plain-text data key.&lt;/li&gt;
  &lt;li&gt;To encrypt more data, repeat steps 6, 7, 8 except use the plain text key to &lt;strong&gt;encrypt&lt;/strong&gt; instead of &lt;strong&gt;decrypt&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This ensures that the encrypted data will not be compromised as long as the plain-text data key is destroyed after each encryption/decryption process. At best, someone can get to the CipherTextBlob, but unless they can call KMS to decrypt it, the encrypted data cannot be decrypted with just the CipherTextBlob.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is very important to note that KMS has no record of the data key. It is us who are managing the data key. If you were to throw away the CipherTextBlob after deleting the plain text key, the encrypted data can NEVER be decrypted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/envelope_encryption.png&quot; alt=&quot;kms-1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;envelope-encryption-with-cli&quot;&gt;Envelope Encryption with CLI&lt;/h2&gt;

&lt;p&gt;I am using AWS Shell here, but you may use AWS CLI just as easily. You’d need to prefix all commands with &lt;code class=&quot;highlighter-rouge&quot;&gt;aws&lt;/code&gt; if so.&lt;/p&gt;

&lt;p&gt;In the steps below, AWS Shell has the prompt &lt;code class=&quot;highlighter-rouge&quot;&gt;aws&amp;gt;&lt;/code&gt;, while terminal shell has the prompt &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, in real life situations, CMKs should not be created willy-nilly, and should have IAM policies associated with them to restrict who can manage, and use them.&lt;/p&gt;

&lt;h4 id=&quot;1-create-a-new-cmk-proceed-to-step-3-if-you-already-have-a-cmk-that-youd-want-to-use&quot;&gt;1. Create a new CMK (proceed to step 3 if you already have a CMK that you’d want to use)&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; kms create-key --description &quot;This is our master key&quot;
{
    &quot;KeyMetadata&quot;: {
        &quot;Origin&quot;: &quot;AWS_KMS&quot;,
        &quot;KeyId&quot;: &quot;30f0d765-d120-41ab-b078-************&quot;,
        &quot;Description&quot;: &quot;This is our master key&quot;,
        &quot;KeyManager&quot;: &quot;CUSTOMER&quot;,
        &quot;Enabled&quot;: true,
        &quot;KeyUsage&quot;: &quot;ENCRYPT_DECRYPT&quot;,
        &quot;KeyState&quot;: &quot;Enabled&quot;,
        &quot;CreationDate&quot;: 1506814355.941,
        &quot;Arn&quot;: &quot;arn:aws:kms:us-east-1:************:key/30f0d765-d120-41ab-b078-************&quot;,
        &quot;AWSAccountId&quot;: &quot;************&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-create-an-alias-for-this-key-optional---i-prefer-using-aliases-over-key-ids&quot;&gt;2. Create an alias for this key (optional) - I prefer using aliases over key IDs.&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; kms create-alias --target-key-id 30f0d765-d120-41ab-b078-************ --alias-name &quot;alias/our-master-key&quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;3-get-data-key&quot;&gt;3. Get Data Key&lt;/h4&gt;

&lt;p&gt;Now that we have the CMK, let’s create a data key using this CMK. We will use AES_256, which will use AES to generate a 256-bit data key. You can see how aliasing the CMK is relatively handy than using the key-id.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; kms generate-data-key --key-id alias/our-master-key --key-spec AES_256
{
    &quot;Plaintext&quot;: &quot;************2abcgdF4rWGaG54esFdaNnfTWBXezcU=&quot;,
    &quot;KeyId&quot;: &quot;arn:aws:kms:us-east-1:************:key/30f0d765-d120-41ab-b078-************&quot;,
    &quot;CipherTextBlob&quot;: &quot;******************************rP1R8rH5AgbwKqWvkXdAHHltn9RJtKSH/XCI5vPSjdOgGx2TYb7p2jjsTCgcOV65rODtZ7TDqpOL+bw==&quot;
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The key-id returned here is &lt;strong&gt;not&lt;/strong&gt; of the data key, but of the CMK. Remember, KMS has no record of any data keys it generates.&lt;/p&gt;

&lt;h4 id=&quot;4-encrypt-data&quot;&gt;4. Encrypt Data&lt;/h4&gt;

&lt;p&gt;We store the &lt;code class=&quot;highlighter-rouge&quot;&gt;CipherTextBlob&lt;/code&gt;, and use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Plaintext&lt;/code&gt; to encrypt some data. You can use any programming language of your choice to do so. This is where it gets interesting. The blob as well as the key and CipherTextBlob is all &lt;code class=&quot;highlighter-rouge&quot;&gt;base64&lt;/code&gt; encoded. They need to be decoded before they can be put to any use. I will use &lt;code class=&quot;highlighter-rouge&quot;&gt;base64&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is not how real production usage will be. While I am using a simple string to demo encryption/decryption using data keys, in the real world this would be happening on entire databases and giant filesystems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, we base64 &lt;em&gt;decode&lt;/em&gt; our plaintext key and store it in a file. In this example I am using a &lt;code class=&quot;highlighter-rouge&quot;&gt;tmp&lt;/code&gt; folder in my home directory.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo '************2abcgdF4rWGaG54esFdaNnfTWBXezcU=' | base64 --decode &amp;gt; ~/tmp/plaintext_key_decoded.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We have now decoded the base64 plain text key as &lt;code class=&quot;highlighter-rouge&quot;&gt;~/tmp/plaintext_key_decoded.txt&lt;/code&gt; file. Next, we encrypt a simple string, &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;Hello World!&quot;  | openssl enc -e -aes256 -k fileb://Users/mpandit/tmp/plaintext_key_decoded.txt &amp;gt; ~/tmp/encrypted.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here, we are encrypting &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World!&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt; command line, using the decoded key that we had saved in a file. We are saving the result of this encryption in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/tmp/encrypted.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we delete the plain text key, while making sure we have the base64 decoded CipherTextBlob stored.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rm ~/tmp/plaintext_key_decoded.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;5-decrypt-data&quot;&gt;5. Decrypt Data&lt;/h4&gt;

&lt;p&gt;Just like the plain text key, the CipherTextBlob is also base64 encoded. Let us decode that and store that as well. We will need this later on to decrypt the data we have encrypted.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo '*****************************rP1R8rH5AgbwKqWvkXdAHHltn9RJtKSH/X3Q9VNjCgcOV65rODtZ7TDqMUmgPcZzwaiPSDXrv/ZBr4+safgompOL+bw==' | base64 --decode &amp;gt; ~/tmp/ciphertext_blob_decoded.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we are ready to decrypt the encrypted data. Since we have deleted the plain text data key just like we should, we will ask KMS to give us the plain text data key by decrypting the CipherTextBlob.&lt;/p&gt;

&lt;p&gt;Since the CipherTextBlob contains metadata, we do not need to tell KMS any information about the CMK that was used to encrypt the data key.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; kms decrypt --ciphertext-blob fileb:///Users/mpandit/tmp/ciphertext_blob_decoded.txt
{
    &quot;Plaintext&quot;: &quot;************2abcgdF4rWGaG54esFdaNnfTWBXezcU=&quot;,
    &quot;KeyId&quot;: &quot;arn:aws:kms:us-east-1:************:key/30f0d765-d120-41ab-b078-************&quot;,
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;KMS has given our plain text key back. Let us use openssl to decrypt our encrypted data. We go through the same exercise of base64 decoding the plain text key before we can use it with &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt;. We use the same filename to keep things simple. Also I am too lazy, so copy-paste helps.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo '************2abcgdF4rWGaG54esFdaNnfTWBXezcU=' | base64 --decode &amp;gt; ~/tmp/plaintext_key_decoded.txt

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, we pass this to &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt;, this time to &lt;em&gt;decrypt&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat ~/tmp/encrypted.txt  | openssl enc -d -aes256 -k fileb://Users/mpandit/tmp/plaintext_key_decoded.txt
Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we get our encrypted data decrypted. In the real world, this same process happens at a much larger scale. Like encrypting EBS Volumes, S3 files, or even local storage outside of AWS. Also, these steps can be integrated in code using the crypto libraries available for the programming language being used.&lt;/p&gt;

&lt;h4 id=&quot;6-audit-trail&quot;&gt;6. Audit Trail&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/cloudtrail/&quot;&gt;AWS CloudTrail&lt;/a&gt; will show the usage log of the CMKs. &lt;strong&gt;This will not show up on the event log on the console, but in the raw json files that CloudTrail is configured to write to.&lt;/strong&gt; This is used to audit the CMK usage.&lt;/p&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2017/09/29/aws-kms-envelope-encryption/&quot;;  
this.page.identifier = &quot;/2017/09/29/aws-kms-envelope-encryption&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      

      

      
        <summary type="html">Every service needs encryption at one point or another - passwords to the database, credentials to an external service, or even entire filesystem or files. Sticking the secrets, or keys in configuration files seems a quick and easy option. However, it carries security risks, even if these configurations are managed outside of the source code. On top of it, the keys used to encrypt/decrypt the data bring additional security implications and requirements in terms of storage, audit, and lifecycle management. AWS KMS, or AWS Key Management Service is a fully managed service to store and manage keys. Any AWS service which supports encryption - S3 buckets, EBS Volumes, SQS, etc. uses KMS under the hood. KMS is more than just a key manager, it can also be used to encrypt large volumes of data, using a technique called Envelope Encryption. In this post I will cover KMS, and the why, what, and how of Envelope Encryption.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Using Amazon EC2 Container Service</title>
      
      <link href="https://lobster1234.github.io/2017/08/22/aws-ecs-notes/" rel="alternate" type="text/html" title="Using Amazon EC2 Container Service" />
      <published>2017-08-22T23:44:37-07:00</published>
      <updated>2017-08-22T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/08/22/aws-ecs-notes</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/08/22/aws-ecs-notes/">&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/ecs/&quot; target=&quot;_blank_&quot;&gt;Amazon ECS&lt;/a&gt;, or EC2 Container Service is a Container Management Service for Docker containers. Similar to &lt;a href=&quot;https://kubernetes.io/&quot; target=&quot;_blank_&quot;&gt;Kubernetes&lt;/a&gt; in intent, the service allows users to provision Docker containers in a fully managed cluster of EC2s. This post is a quick summary of how to get up and running with your own ECS cluster.&lt;/p&gt;

&lt;p&gt;The motivation behind containers is to optimize the usage of underlying resources like CPU and Memory. Containerized infrastructure provides a dense compute environment, allowing us to pack more usage without having to spend $$ for idle/underutilized resources.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;
&lt;p&gt;Make sure you have an AWS Account, and the Default VPC. The purpose of this post is a quick start with ECS, and not to suggest a production deployment. Things like VPCs, Security Groups, AMIs, IAM roles, etc. will be completely different in the real world. We will use the default VPC (which has all public subnets), and wide open default Security Groups for Load Balancers and Instances. I am using &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1&lt;/code&gt; as reflected by many URLs in this post.&lt;/p&gt;

&lt;p&gt;Good familiarity with Docker will be helpful as well.&lt;/p&gt;

&lt;h3 id=&quot;terminology&quot;&gt;Terminology&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank_&quot;&gt;Docker&lt;/a&gt; is a container platform, which &lt;em&gt;contains&lt;/em&gt; a process in a Docker Image. They’re lightweight in terms of provisioning, are ephemeral, and an ideal platform for microservices. Imagine 10 microservices modeled as 10 container images, each hosted under Tomcat. Each container does 1 job, and 1 job only.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;These containers form the building blocks for &lt;em&gt;tasks&lt;/em&gt;. So, 5 running tasks for the same Docker Image would translate to 5 JVMs running the same service on 5 EC2s in the non-docker world. Typical &lt;code class=&quot;highlighter-rouge&quot;&gt;ASG=EC2+ELB&lt;/code&gt; scenario for a highly available deployment. Often times &lt;em&gt;tasks&lt;/em&gt; and &lt;em&gt;containers&lt;/em&gt; are used interchangeably.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;em&gt;cluster&lt;/em&gt; is a collection of EC2 instances. These instances run ECS optimized AMIs, and I like to call them &lt;em&gt;hosts&lt;/em&gt; to avoid confusion. An instance is a very overloaded term - it could mean an EC2 in a cluster, or a task in the EC2, or an EC2 by itself. The number and type of instances is defined during creation of the cluster. A cluster has the exact same EC2 Instance Type. In other words, we cannot have a ECS cluster with an &lt;code class=&quot;highlighter-rouge&quot;&gt;m3.medium&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;r4.xlarge&lt;/code&gt;. A cluster can spread across multiple AZs, and for high availability, it should. However, it cannot span across VPCs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;em&gt;task&lt;/em&gt; can be wrapped in a &lt;em&gt;service&lt;/em&gt;. A &lt;em&gt;service&lt;/em&gt; is a configuration over the task - how many tasks, how to distribute the various tasks within the &lt;em&gt;cluster&lt;/em&gt;, autoscaling, and an ALB association. So, a microservice can be &lt;em&gt;instantiated&lt;/em&gt; N times in a cluster, creating N containers, where some of those containers can run on the host in &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1a&lt;/code&gt;, some on the one in &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1b&lt;/code&gt;. A service looks like an ASG configuration.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An &lt;a href=&quot;https://aws.amazon.com/elasticloadbalancing/applicationloadbalancer/&quot; target=&quot;_blank_&quot;&gt;&lt;em&gt;ALB&lt;/em&gt;&lt;/a&gt; is needed for the service, as the &lt;em&gt;task&lt;/em&gt; can shift within the hosts in a cluster. Also, based on autoscaling settings on the service, new containers for this service can be spun up. A classic ELB will not work as it has hardwired mapping to the back-end EC2 instances. Imagine 5 completely different &lt;em&gt;tasks&lt;/em&gt; running on the same &lt;em&gt;host&lt;/em&gt;, each listening to port 8080. In a classic ELB it’d be impossible to port-map dynamically. However, an &lt;em&gt;ALB&lt;/em&gt; is associated with a &lt;em&gt;target group&lt;/em&gt;, and ECS automatically manages the ALB registry/de-registry of containers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An &lt;em&gt;ECR&lt;/em&gt; is &lt;a href=&quot;https://aws.amazon.com/ecr/&quot; target=&quot;_blank_&quot;&gt;EC2 Container Registry&lt;/a&gt;, think of it as a private &lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank_&quot;&gt;Dockerhub&lt;/a&gt;. It works exactly the same way. You build a docker image with &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt;, tag it, and push it to a repo in ECR. The repository URI is used to refer the &lt;em&gt;container&lt;/em&gt; in the &lt;em&gt;task&lt;/em&gt; configuration.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;steps&quot;&gt;Steps&lt;/h3&gt;

&lt;h4 id=&quot;push-docker-image&quot;&gt;Push Docker Image&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;First off, we create a Docker image. I have one ready, which runs Tomcat. In the real world, it’d be a &lt;code class=&quot;highlighter-rouge&quot;&gt;war&lt;/code&gt; deployed in Tomcat, or a python or node server.&lt;/p&gt;

    &lt;p&gt;We can just use the one here -&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker pull lobster1234/tomcat:8.5.20
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a repository in ECR by going to &lt;a href=&quot;https://console.aws.amazon.com/ecs/home?region=us-east-1#/repositories&quot; target=&quot;_blank_&quot;&gt;https://console.aws.amazon.com/ecs/home?region=us-east-1#/repositories&lt;/a&gt; and clicking &lt;strong&gt;Create Repository&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push this image onto ECR by creating a new repository, and following the steps on the AWS ECR Console.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once this image is pushed (could take a while to upload 200+ MB), you’ll notice the image show up on ECR. Note the Repository URI as we’ll need it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cluster-creation&quot;&gt;Cluster Creation&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Go to &lt;a href=&quot;https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters&quot; target=&quot;_blank_&quot;&gt;https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters&lt;/a&gt; and click &lt;strong&gt;Clusters&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Create Cluster&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cluster name = &lt;code class=&quot;highlighter-rouge&quot;&gt;my-first-cluster&lt;/code&gt;, Model = &lt;code class=&quot;highlighter-rouge&quot;&gt;On-Demand Instance&lt;/code&gt;, Instance Type = &lt;code class=&quot;highlighter-rouge&quot;&gt;m3.medium&lt;/code&gt;, Number of instances = &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;, VPC = &lt;code class=&quot;highlighter-rouge&quot;&gt;Default VPC&lt;/code&gt;, Subnets = &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1a, us-east-1b&lt;/code&gt;, Security Group = &lt;code class=&quot;highlighter-rouge&quot;&gt;Default&lt;/code&gt;. Leave other settings as-is. Click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;View the cluster here - &lt;a href=&quot;https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/my-first-cluster/services&quot; target=&quot;_blank_&quot;&gt;https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/my-first-cluster/services&lt;/a&gt;. Check out the &lt;strong&gt;ECS Instances&lt;/strong&gt; tab and you’ll notice the 2 EC2 instances running in there in different AZs. They’re m3.mediums - do not get shocked seeing 1024 CPU. They are running AWS ECS agent as well as the Docker agent, as you can tell from the &lt;strong&gt;Agent Version&lt;/strong&gt; and &lt;strong&gt;Docker Version&lt;/strong&gt; columns.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;task-definition&quot;&gt;Task Definition&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Next, we will create a &lt;em&gt;task definition&lt;/em&gt; - this is where the &lt;em&gt;container image&lt;/em&gt; we pushed comes in. From the left menu, click &lt;strong&gt;Task Definitions&lt;/strong&gt;, and then click &lt;strong&gt;Create new Task Definition&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Task Definition Name = &lt;code class=&quot;highlighter-rouge&quot;&gt;my-first-task-definition&lt;/code&gt;, leave the rest, and click &lt;strong&gt;Add Container&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Container Name = &lt;code class=&quot;highlighter-rouge&quot;&gt;my-first-tomcat-container&lt;/code&gt;, Image = enter the &lt;code class=&quot;highlighter-rouge&quot;&gt;ECR Repository URI&lt;/code&gt; (NOT ARN), Hard Limit = &lt;code class=&quot;highlighter-rouge&quot;&gt;128&lt;/code&gt;, Port Mappings = host &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; container &lt;code class=&quot;highlighter-rouge&quot;&gt;8080&lt;/code&gt;, Protocol = &lt;code class=&quot;highlighter-rouge&quot;&gt;tcp&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;strong&gt;Advanced Container Configuration&lt;/strong&gt; - CPU Units = &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, Essential = &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, and leave the rest of the settings as-is. Click &lt;strong&gt;Add&lt;/strong&gt;. On the Task Definition page, click &lt;strong&gt;Create&lt;/strong&gt; after verifying the newly added container shows up. Notice there can be multiple, different containers per task.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now you should see &lt;a href=&quot;https://console.aws.amazon.com/ecs/home?region=us-east-1#/taskDefinitions/my-first-task-definition/1&quot; target=&quot;_blank_&quot;&gt;https://console.aws.amazon.com/ecs/home?region=us-east-1#/taskDefinitions/my-first-task-definition/1&lt;/a&gt; where there is an option to create a new revision, and an &lt;strong&gt;Actions&lt;/strong&gt; drop down.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;service-and-alb-creation&quot;&gt;Service and ALB Creation&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Next we will create a &lt;em&gt;service&lt;/em&gt; using this &lt;em&gt;task definition&lt;/em&gt;. Imagine the container image was indeed hosting a real service instead of a just a tomcat installation. We would want this service available across multiple AZs, and also multiple instances of this service within each of the &lt;em&gt;host&lt;/em&gt;. So we will do just that. Let us create a service by clicking &lt;strong&gt;Create Service&lt;/strong&gt; from the &lt;strong&gt;Actions&lt;/strong&gt; dropdown.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Service Name = &lt;code class=&quot;highlighter-rouge&quot;&gt;my-first-service&lt;/code&gt;, Number of Tasks = &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;. Leave everything else as-is. In the Task Placement section, pick &lt;code class=&quot;highlighter-rouge&quot;&gt;AZ Balanced Spread&lt;/code&gt; (this would mean the &lt;em&gt;tasks&lt;/em&gt;, or &lt;em&gt;containers&lt;/em&gt; for this service will get spread out across the AZs the &lt;em&gt;hosts&lt;/em&gt; are running in).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we will associate this service with a Load Balancer. Like I mentioned earlier, &lt;em&gt;Classic Load Balancer&lt;/em&gt; will not work, so we have to create an &lt;em&gt;Application Load Balancer&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Leave the service tab we’re in. Open up a new tab, and point to the EC2 Console &lt;a href=&quot;https://console.aws.amazon.com/ec2/v2/home?region=us-east-1#LoadBalancers&quot; target=&quot;_blank_&quot;&gt;https://console.aws.amazon.com/ec2/v2/home?region=us-east-1#LoadBalancers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;strong&gt;Create Load Balancer&lt;/strong&gt; and pick &lt;strong&gt;Application Load Balancer&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name = &lt;code class=&quot;highlighter-rouge&quot;&gt;my-first-ecs-lb&lt;/code&gt;, Scheme = &lt;code class=&quot;highlighter-rouge&quot;&gt;Internet Facing&lt;/code&gt;, IP Address Type = &lt;code class=&quot;highlighter-rouge&quot;&gt;ipv4&lt;/code&gt;, Listeners = &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;, Port &lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt;, Availability Zones = &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1a&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1b&lt;/code&gt;, and click &lt;strong&gt;Configure Security Settings&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;strong&gt;Next: Configure Security Groups&lt;/strong&gt;. Select the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; security group. Click &lt;strong&gt;Next: Configure Routing&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Target Group = &lt;code class=&quot;highlighter-rouge&quot;&gt;New target group&lt;/code&gt;, Name = &lt;code class=&quot;highlighter-rouge&quot;&gt;my-first-ecs-tg&lt;/code&gt;, leave everything else as-is. Click &lt;strong&gt;Register Targets&lt;/strong&gt;. This is where we will pick the EC2s running our containers. Select the 2 EC2 instances which are the part of our cluster, and click &lt;strong&gt;Add to Registered&lt;/strong&gt;. Leave the port as &lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt;. Once the selected Instances show up under &lt;strong&gt;Registered Targets&lt;/strong&gt;, click &lt;strong&gt;Next: Review&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the review page, click &lt;strong&gt;Create&lt;/strong&gt;. Click &lt;strong&gt;Close&lt;/strong&gt; on the next screen, and give it a minute to provision the ALB.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At this point we go back to the &lt;strong&gt;Create Service&lt;/strong&gt; tab, and click &lt;strong&gt;Configure ELB&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;code class=&quot;highlighter-rouge&quot;&gt;ecsServiceRole&lt;/code&gt; for &lt;strong&gt;IAM Role for Service&lt;/strong&gt;. The ALB we just created should show up under the ELB Name. If it does not, click the little button to refresh the drop down. Once the ALB shows up, select it. Then, In the &lt;strong&gt;Select a Container&lt;/strong&gt;, pick the container &lt;code class=&quot;highlighter-rouge&quot;&gt;my-first-tomcat-container:0:8080&lt;/code&gt; and click &lt;strong&gt;Add to ELB&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This opens up a new section. In the &lt;strong&gt;Target Group Name&lt;/strong&gt; section, select &lt;code class=&quot;highlighter-rouge&quot;&gt;my-first-ecs-tg&lt;/code&gt;. Click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Review settings, and click &lt;strong&gt;Create Service&lt;/strong&gt;. You’ll see a page showing the Launch Status. Click &lt;strong&gt;View Service&lt;/strong&gt; when it is enabled.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the View Service page, it should show 5 running tasks. Refresh the page if you do not see all 5, as it does take a few seconds for containers to launch.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;verification&quot;&gt;Verification&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To view the cluster, go to this URL - &lt;a href=&quot;https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/my-first-cluster/services&quot; target=&quot;_blank_&quot;&gt;https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/my-first-cluster/services&lt;/a&gt;. You’ll be able to click the ECS Instances Tab to check how the containers are distributed across the cluster (2 and 3).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To verify, go to the ALB &lt;a href=&quot;https://us-east-1.console.aws.amazon.com/ec2/v2/home?region=us-east-1#LoadBalancers&quot; target=&quot;_blank_&quot;&gt;https://us-east-1.console.aws.amazon.com/ec2/v2/home?region=us-east-1#LoadBalancers&lt;/a&gt; and click on &lt;code class=&quot;highlighter-rouge&quot;&gt;my-first-ecs-lb&lt;/code&gt;. From the description tab, copy the &lt;strong&gt;DNS Name&lt;/strong&gt;, and paste it in the browser. You should see the Tomcat welcome page.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Feel free to play around with this setup, including setting up autoscaling for the service. The service console can be found here &lt;a href=&quot;https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/my-first-cluster/services/my-first-service/tasks&quot; target=&quot;_blank_&quot;&gt;https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/my-first-cluster/services/my-first-service/tasks&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we have a fully functional ECS Cluster with a service running across all nodes of the cluster, available via an ALB.&lt;/p&gt;

&lt;h4 id=&quot;teardown&quot;&gt;Teardown&lt;/h4&gt;

&lt;p&gt;The fast and easy way is to click &lt;strong&gt;Delete Cluster&lt;/strong&gt; from the Cluster Details page. However, I’ll walk you through the steps that will need some tinkering around and help better understand what goes under the hood.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To stop all containers and remove this service, click &lt;strong&gt;Update&lt;/strong&gt;, and change the number of tasks from &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;. Click &lt;strong&gt;Update Service&lt;/strong&gt;. You’ll immediately notice that the Tomcat Welcome Page no longer works. In fact, this update process deregisters the containers from the ALB and then begins to drain connections. So although the tasks will show up as running, the ALB DNS URL will return a 503. All of this action can be seen Under &lt;strong&gt;Events&lt;/strong&gt; tab in the &lt;strong&gt;Service Detail&lt;/strong&gt; page. The default draining time is &lt;code class=&quot;highlighter-rouge&quot;&gt;300 seconds&lt;/code&gt;, so expect to wait that long.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, we delete the ALB. From the LB page, &lt;a href=&quot;https://us-east-1.console.aws.amazon.com/ec2/v2/home?region=us-east-1#LoadBalancers&quot; target=&quot;_blank_&quot;&gt;https://us-east-1.console.aws.amazon.com/ec2/v2/home?region=us-east-1#LoadBalancers&lt;/a&gt;, select the LB and select &lt;strong&gt;Delete&lt;/strong&gt; from the &lt;strong&gt;Actions&lt;/strong&gt; drop down.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we delete the target group we had created. On the target groups page at &lt;a href=&quot;https://us-east-1.console.aws.amazon.com/ec2/v2/home?region=us-east-1#TargetGroups&quot; target=&quot;_blank_&quot;&gt;https://us-east-1.console.aws.amazon.com/ec2/v2/home?region=us-east-1#TargetGroups&lt;/a&gt;, select &lt;code class=&quot;highlighter-rouge&quot;&gt;my-first-ecs-tg&lt;/code&gt; and pick &lt;strong&gt;Delete&lt;/strong&gt; from the &lt;strong&gt;Actions&lt;/strong&gt; dropdown.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, we delete the service. Come back to the service page at &lt;a href=&quot;https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/my-first-cluster/services/my-first-service/tasks&quot; target=&quot;_blank_&quot;&gt;https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/my-first-cluster/services/my-first-service/tasks&lt;/a&gt; and click &lt;strong&gt;Delete&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, we delete the cluster. Go to cluster page at &lt;a href=&quot;https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/my-first-cluster/services&quot; target=&quot;_blank_&quot;&gt;https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/my-first-cluster/services&lt;/a&gt; and click &lt;strong&gt;Delete Cluster&lt;/strong&gt;. Verify by going to EC2 Console that the EC2 hosts are terminated.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this post, we learnt how to -&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create an ECR Repository, and push a Tomcat Docker image to it&lt;/li&gt;
  &lt;li&gt;Create an muti-AZ ECS Cluster&lt;/li&gt;
  &lt;li&gt;Create a Task Definition using this image&lt;/li&gt;
  &lt;li&gt;Create a Service using this Task Definition&lt;/li&gt;
  &lt;li&gt;Create a Target Group and ALB for this service&lt;/li&gt;
  &lt;li&gt;Launch this service in the ECS Cluster using the Balanced Placement Policy&lt;/li&gt;
  &lt;li&gt;Tear down the ECS Cluster&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thoughts, feedback, ideas? Please let me know in the comments below.&lt;/p&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2017/08/22/aws-ecs-notes/&quot;;  
this.page.identifier = &quot;/2017/08/22/aws-ecs-notes&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="docker" />
      
        <category term="ecs" />
      

      

      
        <summary type="html">Amazon ECS, or EC2 Container Service is a Container Management Service for Docker containers. Similar to Kubernetes in intent, the service allows users to provision Docker containers in a fully managed cluster of EC2s. This post is a quick summary of how to get up and running with your own ECS cluster. The motivation behind containers is to optimize the usage of underlying resources like CPU and Memory. Containerized infrastructure provides a dense compute environment, allowing us to pack more usage without having to spend $$ for idle/underutilized resources.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Apache Nutch - Step by Step</title>
      
      <link href="https://lobster1234.github.io/2017/08/14/search-with-nutch-mongodb-solr/" rel="alternate" type="text/html" title="Apache Nutch - Step by Step" />
      <published>2017-08-14T23:44:37-07:00</published>
      <updated>2017-08-14T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/08/14/search-with-nutch-mongodb-solr</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/08/14/search-with-nutch-mongodb-solr/">&lt;p&gt;Search is one of the most fantastic areas of the technology industry, and has been addressed many, many times with different algorithms, producing varying degrees of success. We get so used to it, that often times I wish I had a Cmd-F while reading a real book.&lt;/p&gt;

&lt;p&gt;Recently we had our Quarterly Hack Week at &lt;a href=&quot;https://www.marqeta.com&quot; target=&quot;_blank_&quot;&gt;Marqeta&lt;/a&gt;, and one of the ideas was to build search around our public pages. These pages would include the public website assets, as well as the the API developer guides and documentation. This post is a quick summary of the infrastructure, setup, and gotchas of using Nutch 2.3.1 to build a site search - essentially notes from this hack week project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/search.png&quot; alt=&quot;Search&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;If you are not familiar with Apache Nutch Crawler, please visit &lt;a href=&quot;http://nutch.apache.org/&quot; target=&quot;_blank_&quot;&gt;here&lt;/a&gt;. Nutch 2.x and Nutch 1.x are fairly different in terms of set up, execution, and architecture. Nutch 2.x uses &lt;a href=&quot;http://gora.apache.org/&quot; target=&quot;_blank_&quot;&gt;Apache Gora&lt;/a&gt; to manage NoSQL persistence over many db stores. However, Nutch 1.x has been around much longer, has more features, and has many bug fixes compared to Nutch 2.x. If your search needs are far more advanced, consider Nutch 1.x. If flexibility of db stores is important, then pick Nutch 2.x.&lt;/p&gt;

&lt;h1 id=&quot;versions&quot;&gt;Versions&lt;/h1&gt;
&lt;p&gt;We will use &lt;a href=&quot;http://nutch.apache.org/downloads.html&quot; target=&quot;_blank_&quot;&gt;Apache Nutch 2.3.1&lt;/a&gt;, &lt;a href=&quot;https://www.mongodb.com/download-center#community&quot; target=&quot;_blank_&quot;&gt;MongoDB 3.4.7&lt;/a&gt;, and &lt;a href=&quot;http://lucene.apache.org/solr/&quot; target=&quot;_blank_&quot;&gt;Solr 6.5.1&lt;/a&gt;. I tried using ElasticSearch, but as a simple Google Search will reveal, Nutch ElasticSearch Indexing plugins depend on fairly old versions. Even Solr 6.6.0 did not work due to a field deprecation, so we will stick to the next latest version, 6.5.1. And yes, there are a few hacks we’d need to do to get Solr 6.5.1 working as well.&lt;/p&gt;

&lt;h1 id=&quot;operating-system&quot;&gt;Operating System&lt;/h1&gt;
&lt;p&gt;I’ve used Ubuntu 16.04 LTS on Amazon Web Services, and also Debian 8 on Vagrant with minor differences. Your flavor of Linux may vary, as long as you have the correct versions of the main components like MongoDB, Nutch, and Solr, you should be good. I did not try setting this up on the Mac though. We will stick to Ubuntu 16.04 LTS for the rest of this tutorial.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ubuntu@ip-1*2-3*-**-**:~$ uname -a
 Linux ip-1*2-3*-**-** 4.4.0-1022-aws #31-Ubuntu SMP Tue Jun 27 11:27:55 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;java&quot;&gt;Java&lt;/h1&gt;
&lt;p&gt;We will use OpenJDK8, but you can also use Oracle JDK 8.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install openjdk-8-jdk
$ java -version
openjdk version &quot;1.8.0_131&quot;
OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-2ubuntu1.16.04.3-b11)
OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.4.7.tgz
$ mkdir data
$ mkdir logs
$ tar xvfz mongodb-linux-x86_64-ubuntu1604-3.4.7.tgz
$ cd mongodb-linux-x86_64-ubuntu1604-3.4.7/bin
$ ./mongod --dbpath ~/data/  --logpath ~/logs/mongodb.log --fork
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h1 id=&quot;nutch&quot;&gt;Nutch&lt;/h1&gt;

&lt;p&gt;Nutch 2.x is only available as a source bundle, so it will need to be built using &lt;code class=&quot;highlighter-rouge&quot;&gt;ant&lt;/code&gt; after configuring.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget http://www-eu.apache.org/dist/nutch/2.3.1/apache-nutch-2.3.1-src.tar.gz
$ tar xvfz apache-nutch-2.3.1-src.tar.gz
$ cd apache-nutch-2.3.1/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, we configure Nutch by editing &lt;code class=&quot;highlighter-rouge&quot;&gt;$NUTCH_HOME/conf/nutch-site.xml&lt;/code&gt;. This is where we define the crawldb database driver, enable plugins, and the crawl behavior, to restrict it to only the domain defined.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/lobster1234/ef8e9f6fbea6154da720d2534d490706.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We then instruct Nutch to use MongoDB via the &lt;code class=&quot;highlighter-rouge&quot;&gt;$NUTCH_HOME/conf/gora.properties&lt;/code&gt; file. Nutch 2.x uses Apache Gora to manage persistence.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/lobster1234/60a4422b398c029dca0e3ee452c5dd2a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We also change &lt;code class=&quot;highlighter-rouge&quot;&gt;$NUTCH_HOME/conf/ivy/ivy.xml&lt;/code&gt; to enable MongoDB driver which will be used by Apache Gora. This is done by uncommenting the MongoDB line in the file.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Uncomment this to use MongoDB as Gora backend. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;org=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.gora&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gora-mongodb&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rev=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;conf=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*-&amp;gt;default&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is the gist for &lt;a href=&quot;https://gist.github.com/lobster1234/7edffdff1410102013b3d271f6e22c35&quot; target=&quot;_blank_&quot;&gt;ivy.xml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we build Nutch. Install &lt;code class=&quot;highlighter-rouge&quot;&gt;ant&lt;/code&gt; if it is not installed already.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ sudo apt-get install ant
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And we build Nutch from &lt;code class=&quot;highlighter-rouge&quot;&gt;$NUTCH_HOME&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pwd
/home/ubuntu/apache-nutch-2.3.1
$ ant runtime
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This will take a while (about 4-5 mins).&lt;/p&gt;

&lt;h1 id=&quot;solr&quot;&gt;Solr&lt;/h1&gt;

&lt;p&gt;Let us get Solr 6.5.1 set up.&lt;/p&gt;

&lt;p&gt;We will download and install Solr, and create a &lt;em&gt;core&lt;/em&gt; named &lt;code class=&quot;highlighter-rouge&quot;&gt;nutch&lt;/code&gt; to index the crawled pages. Then, we will copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.xml&lt;/code&gt; from Nutch configuration to this newly created core.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget http://archive.apache.org/dist/lucene/solr/6.5.1/solr-6.5.1.tgz
$ tar xvfz solr-6.5.1.tgz
$ cd solr-6.5.1/bin
$ ./solr start
$ ./solr create_core -c nutch -d basic_configs
$ ./solr stop
$ cd ../server/solr/nutch/conf
$ cp ~/apache-nutch-2.3.1/conf/schema.xml .

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here comes the skullduggery. We will need to “fix” &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.xml&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;solrconfig.xml&lt;/code&gt; in this folder. We will also remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;managed-schema&lt;/code&gt; file, as we’re providing the schema configuration externally.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rm managed-schema
$ vi schema.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It is important to remove all instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;enablePositionIncrements=&quot;true&quot;&lt;/code&gt; from every &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;filter class=&quot;solr.StopFilterFactory&quot;&lt;/code&gt; declaration. If not removed, the core will fail to initialize.&lt;/p&gt;

&lt;p&gt;Here is the gist for &lt;a href=&quot;https://gist.github.com/lobster1234/35078e4fc1df30e249b986e19fd67202&quot; target=&quot;_blank_&quot;&gt;schema.xml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we have to fix the &lt;code class=&quot;highlighter-rouge&quot;&gt;solrconfig.xml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vi solrconfig.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Locate the section for &lt;code class=&quot;highlighter-rouge&quot;&gt;AddSchemaFieldsUpdateProcessorFactory&lt;/code&gt; and comment out the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;lst&amp;gt;&lt;/code&gt; elements, like so-&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;processor&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;solr.AddSchemaFieldsUpdateProcessorFactory&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;str&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;defaultFieldType&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;strings&lt;span class=&quot;nt&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--
  &amp;lt;lst name=&quot;typeMapping&quot;&amp;gt;
    &amp;lt;str name=&quot;valueClass&quot;&amp;gt;java.lang.Boolean&amp;lt;/str&amp;gt;
    &amp;lt;str name=&quot;fieldType&quot;&amp;gt;booleans&amp;lt;/str&amp;gt;
  &amp;lt;/lst&amp;gt;
  &amp;lt;lst name=&quot;typeMapping&quot;&amp;gt;
    &amp;lt;str name=&quot;valueClass&quot;&amp;gt;java.util.Date&amp;lt;/str&amp;gt;
    &amp;lt;str name=&quot;fieldType&quot;&amp;gt;tdates&amp;lt;/str&amp;gt;
  &amp;lt;/lst&amp;gt;
  &amp;lt;lst name=&quot;typeMapping&quot;&amp;gt;
    &amp;lt;str name=&quot;valueClass&quot;&amp;gt;java.lang.Long&amp;lt;/str&amp;gt;
    &amp;lt;str name=&quot;valueClass&quot;&amp;gt;java.lang.Integer&amp;lt;/str&amp;gt;
    &amp;lt;str name=&quot;fieldType&quot;&amp;gt;tlongs&amp;lt;/str&amp;gt;
  &amp;lt;/lst&amp;gt;
  &amp;lt;lst name=&quot;typeMapping&quot;&amp;gt;
    &amp;lt;str name=&quot;valueClass&quot;&amp;gt;java.lang.Number&amp;lt;/str&amp;gt;
    &amp;lt;str name=&quot;fieldType&quot;&amp;gt;tdoubles&amp;lt;/str&amp;gt;
  &amp;lt;/lst&amp;gt; --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/processor&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now, we start solr.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/solr-6.5.1/bin
$ ./solr start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;crawl-and-index&quot;&gt;Crawl and Index&lt;/h1&gt;
&lt;p&gt;Now that we have everything set up, we are ready to put Nutch in action.&lt;/p&gt;

&lt;p&gt;First, tell nutch what URL(s) to crawl. We do this by creating a simple text file, and pointing Nutch to it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/apache-nutch-2.3.1/
$ mkdir urls
$ vi urls/seeds.text
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Enter the URL(s) in this file, for example. &lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.wikipedia.org&lt;/code&gt;. One URL per line.&lt;/p&gt;

&lt;p&gt;Once the seed file is set up, run the following -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ runtime/local/bin/nutch inject urls/
InjectorJob: starting at 2017-08-14 07:43:22
InjectorJob: Injecting urlDir: urls
InjectorJob: Using class org.apache.gora.mongodb.store.MongoStore as the Gora storage class.
InjectorJob: total number of urls rejected by filters: 0
InjectorJob: total number of urls injected after normalization and filtering: 1
Injector: finished at 2017-08-14 07:43:25, elapsed: 00:00:03
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This has initialized the crawl database - we can use the MongoDB CLI to check out the resulting database and collection.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; show dbs
local    0.000GB
nutchdb  0.005GB
&amp;gt; use nutchdb
switched to db nutchdb
&amp;gt; show collections
webpage
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, we generate the top 50 URLs. Do not worry if you see a different number like 20 below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ runtime/local/bin/nutch generate -topN 50
GeneratorJob: starting at 2017-08-14 08:56:36
GeneratorJob: Selecting best-scoring urls due for fetch.
GeneratorJob: starting
GeneratorJob: filtering: true
GeneratorJob: normalizing: true
GeneratorJob: topN: 50
GeneratorJob: finished at 2017-08-14 08:56:38, time elapsed: 00:00:02
GeneratorJob: generated batch id: 1502528196-1091715892 containing 20 URLs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that Nutch has selected N URLs, we go ahead fetch them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ runtime/local/bin/nutch fetch -all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This will fetch the N URLs, and we’ll see a ton of output.&lt;/p&gt;

&lt;p&gt;Once fetched, the content needs to be parsed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ runtime/local/bin/nutch parse -all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, we update the DB with the current status.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ runtime/local/bin/nutch updatedb -all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Finally, we index these pages in Solr&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ runtime/local/bin/nutch solrindex http://localhost:8983/solr/nutch -all
IndexingJob: starting
Active IndexWriters :
SOLRIndexWriter
	solr.server.url : URL of the SOLR instance (mandatory)
	solr.commit.size : buffer size when sending to SOLR (default 1000)
	solr.mapping.file : name of the mapping file for fields (default solrindex-mapping.xml)
	solr.auth : use authentication (default false)
	solr.auth.username : username for authentication
	solr.auth.password : password for authentication
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you have access to the Solr console (http://host:8983), fire it up in a browser.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If this is an AWS EC2 instance, you’ll need to ensure HTTP access is allowed on port 8983 via the Security Groups + NACL, and if this is in Vagrant, use the port mapper in &lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt; to map guest port 8983 to any host port you’d like to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once in Solr admin console, we can try firing up queries. If unable to access the admin UX, the same can be done via curls, like so:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl &quot;http://localhost:8983/solr/nutch/select?fl=url,%20meta_description,%20anchor,%20title&amp;amp;indent=on&amp;amp;q=content:test&amp;amp;wt=json&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here, we’re querying Solr for any &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; that matches &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; (hence &lt;code class=&quot;highlighter-rouge&quot;&gt;q=content:test&lt;/code&gt;) and only return the &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;meta_description&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;anchor&lt;/code&gt; (hence &lt;code class=&quot;highlighter-rouge&quot;&gt;fl=url,%20meta_description,%20anchor,%20title&lt;/code&gt;). We will get a list of at most 10 results in a JSON format. You may want to play with different values for different fields either via the Solr Console or curl. Refer to Solr query syntax &lt;a href=&quot;&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There we have it - a fully functional, end to end crawler and indexer setup!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please note that the &lt;em&gt;generate-fetch-parse-updatedb-index&lt;/em&gt; steps will need to be run frequently. It is a good idea to set up a cron job to execute these steps on a desired interval (based on the velocity of the site being indexed).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post, I did not cover alternatives like &lt;a href=&quot;https://scrapy.org/&quot; target=&quot;_blank_&quot;&gt;Scrapy&lt;/a&gt;, &lt;a href=&quot;https://www.crummy.com/software/BeautifulSoup/&quot; target=&quot;_blank_&quot;&gt;Beautiful Soup&lt;/a&gt;, &lt;a href=&quot;https://github.com/yasserg/crawler4j&quot; target=&quot;_blank_&quot;&gt;crawler4j&lt;/a&gt;, etc. but I would encourage you to check them out if in discovery/research phase before deciding on Nutch.&lt;/p&gt;

&lt;p&gt;Thoughts, feedback, ideas? Please let me know in the comments below.&lt;/p&gt;

&lt;h1 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h1&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2017/08/14/search-with-nutch-mongodb-solr/&quot;;  
this.page.identifier = &quot;/2017/08/14/search-with-nutch-mongodb-solr&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="architecture" />
      
        <category term="search" />
      

      

      
        <summary type="html">Search is one of the most fantastic areas of the technology industry, and has been addressed many, many times with different algorithms, producing varying degrees of success. We get so used to it, that often times I wish I had a Cmd-F while reading a real book. Recently we had our Quarterly Hack Week at Marqeta, and one of the ideas was to build search around our public pages. These pages would include the public website assets, as well as the the API developer guides and documentation. This post is a quick summary of the infrastructure, setup, and gotchas of using Nutch 2.3.1 to build a site search - essentially notes from this hack week project.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Caching - Gotchas &amp;amp; Lessons Learned</title>
      
      <link href="https://lobster1234.github.io/2017/07/05/caching-gotchas-and-lessons-learned/" rel="alternate" type="text/html" title="Caching - Gotchas &amp; Lessons Learned" />
      <published>2017-07-05T23:44:37-07:00</published>
      <updated>2017-07-05T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/07/05/caching-gotchas-and-lessons-learned</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/07/05/caching-gotchas-and-lessons-learned/">&lt;p&gt;It has been said &lt;a href=&quot;https://martinfowler.com/bliki/TwoHardThings.html&quot; target=&quot;_blank_&quot;&gt;time and again&lt;/a&gt; - &lt;em&gt;“There are only two hard things in Computer Science: cache invalidation and naming things”.&lt;/em&gt; Having run into both of these problems in my professional career, I figured I could write a post, summarizing the lessons I have learned along the way by seeing and building various caching architectures across many companies, big and small.&lt;/p&gt;

&lt;p&gt;Just like threading, caching is easy to code, but often creates more problems than it intends to solve. These problems can arise from - you guessed it - invalidation,  sub-par efficiency, inconsistency, and many more. It is also one of my favorite topics for technical interviews :)
&lt;!--more--&gt;&lt;/p&gt;
&lt;h1 id=&quot;caching---an-oversimplified-introduction&quot;&gt;Caching - An Oversimplified Introduction&lt;/h1&gt;

&lt;p&gt;By definition, a &lt;em&gt;cache&lt;/em&gt; is a storage which stores the result from a previous data access, in order to make it available more efficiently for future accesses. Cached data usually has a defined &lt;em&gt;time to live&lt;/em&gt;, or &lt;em&gt;TTL&lt;/em&gt; so it can be evicted, and replaced with more recent state. When data is found in the cache, it is called a &lt;em&gt;hit&lt;/em&gt;, and a failure results in a &lt;em&gt;miss&lt;/em&gt;. When a &lt;em&gt;miss&lt;/em&gt; happens, the underlying data store is accessed, and the result is placed in the cache with a &lt;em&gt;TTL&lt;/em&gt;, and the cycle goes on.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hit ratio&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;nHits:nMisses&lt;/code&gt;) is a metric used to measure caching efficiency - a higher &lt;em&gt;hit ratio&lt;/em&gt; would mean efficient caching, while a lower &lt;em&gt;hit ratio&lt;/em&gt; would mean the cache is not really helping as much as it should. This is the case when the cached data is highly mutable, and gets &lt;em&gt;invalidated&lt;/em&gt; way too often to be of any value for future requests.&lt;/p&gt;

&lt;p&gt;With this introduction, here are the lessons learned, and best practices:&lt;/p&gt;

&lt;h1 id=&quot;1-take-it-easy&quot;&gt;1. Take it easy&lt;/h1&gt;
&lt;p&gt;Caching is super easy to implement. It also has the charm that attracts many architects and developers, giving a false impression of being a low hanging fruit. However, do not get carried away. Identify the immutable vs. mutable objects in your application, as having a large imbalance between these may make caching a blessing or a curse. Identify the usage patterns around your data. Start small by caching the immutable data, and monitor the performance of the application. Measure the &lt;em&gt;hit ratio&lt;/em&gt; before moving on to the more aggressive approaches. Make data-driven decisions.&lt;/p&gt;

&lt;h1 id=&quot;2-not-all-caches-are-alike&quot;&gt;2. Not all caches are alike&lt;/h1&gt;
&lt;p&gt;A cache can be &lt;em&gt;in-process&lt;/em&gt; (taking the memory space of the application server), or &lt;em&gt;global&lt;/em&gt; (out-of-process). For example, &lt;a href=&quot;http://www.ehcache.org/&quot; target=&quot;_blank_&quot;&gt;EHCache&lt;/a&gt; is an in-process cache, while &lt;a href=&quot;https://memcached.org/&quot; target=&quot;_blank_&quot;&gt;Memcached&lt;/a&gt; or &lt;a href=&quot;https://redis.io&quot; target=&quot;_blank_&quot;&gt;Redis&lt;/a&gt; are global cache servers. There are pros and cons to these. Some architectures also do a mix-and-match, which is why knowing your data usage patterns is the first step in designing a good caching strategy. The in-process cache will add state to the server, and, if in a cluster, there is a good chance each instance will end up with a different state of the data, causing inconsistency. However, for immutable data, in-process caches work great. As does a simple Map. Global caches hold a &lt;em&gt;shared state&lt;/em&gt; of the application, but need extra infrastructure. Global caches can be clustered, and provide a single, consistent view of cached data.&lt;/p&gt;

&lt;h1 id=&quot;3-design-for-high-availability&quot;&gt;3. Design for High Availability&lt;/h1&gt;
&lt;p&gt;In-process caches are more available than global caches if we mitigate the consistency issues. Global caches are a different story. In the event of global caches failures, based on the client, the connections will time out, thereby taking up network time and locking threads. A failure will also cause a huge load on the back end, snowballing into increased database contention, possibly rippling across multiple applications which are relying on your application’s API. Highly available caching is implemented via cache replication and/or persistent caches. This replication can happen via shards, and/or in a master/slave type configuration. &lt;a href=&quot;https://www.couchbase.com&quot; target=&quot;_blank_&quot;&gt;Couchbase&lt;/a&gt; provides replication via Couchbase cluster. Redis provides a highly available &lt;a href=&quot;https://redis.io/topics/sentinel&quot; target=&quot;_blank_&quot;&gt;Redis Sentinel&lt;/a&gt;. Consider these servers instead of inventing one of your own, unless absolutely necessary. &lt;a href=&quot;https://varnish-cache.org/&quot; target=&quot;_blank_&quot;&gt;Varnish HTTP Cache&lt;/a&gt; is an HTTP cache, useful for caching HTTP responses with a built in &lt;code class=&quot;highlighter-rouge&quot;&gt;grace period&lt;/code&gt;, where the cache serves stale data for an amount of time even if the back-end is unavailable.&lt;/p&gt;

&lt;h1 id=&quot;4-beware-of-cache-hotspots&quot;&gt;4. Beware of Cache Hotspots&lt;/h1&gt;
&lt;p&gt;Hotspots are created when a value tied to key becomes all too popular. An example can be a breaking news story cached in one of the servers. In this event, the global server containing the key being accessed heavily ends up degrading performance for other keys on the same server. This can be avoided via a &lt;em&gt;near/far cache architecture&lt;/em&gt;, where a cache server with &lt;em&gt;very low TTL&lt;/em&gt; runs on the local instance (localhost), and the application looks up the key in the &lt;em&gt;near server&lt;/em&gt; first, and in the event of a miss, reaches out to the &lt;em&gt;far server&lt;/em&gt;. The low TTL (few seconds) ensures that the data is not too stale, while the far cache server does not have to get hit that hard in a hotspot situation.&lt;/p&gt;

&lt;h1 id=&quot;5-namespace-your-keys&quot;&gt;5. Namespace your Keys&lt;/h1&gt;
&lt;p&gt;Keys are the identifiers against which the values are stored in the cache. Key collisions can have nightmarish results. Have a good naming strategy for the keys, especially when sharing a global cache cluster across multiple application servers. Have a common function to take the application name, object name, and object ID and spit out a key. This is particularly important for multi-tenant servers, where they’d need to cache multiple, identical key names. Tenant A’s person_1234 is not the same as Tenant B’s person_1234. If all the IDs are GUIDs, that can offer some help, but most often the IDs are auto-inc numeric primary keys. The keys are also distributed via a hash functions, usually implemented in the client (like spymemcached). This ensures consistent key distribution across the members of a cache cluster. You may want to write your own hash function if the one provided by the cache provider is not up to the requirements.&lt;/p&gt;

&lt;h1 id=&quot;6-do-not-update&quot;&gt;6. Do not Update&lt;/h1&gt;
&lt;p&gt;Do not bother updating the cache on state changes. Just delete the key from the cache, and let the next read take care of caching the value. It may seem like a good idea to update the cache with the fresh data in the event of a state change, but it is not worth the effort. Not only this tends to have race conditions in a clustered environment, in write-heavy scenarios, data consistency becomes an issue as well. Just have your state change methods invalidate the key.&lt;/p&gt;

&lt;h1 id=&quot;7-build-a-secure-auditable-invalidation-mechanism&quot;&gt;7. Build a secure, auditable, invalidation mechanism&lt;/h1&gt;
&lt;p&gt;Realistically, no one should update the database directly while bypassing the API or the server code. However, this is an all too common scenario in the real world. This creates a situation where the cache does not hold the right state that the database has. The options are limited - delete the key, or wait for the key to expire. These options may not work if the keys are hashed (vs. human readable like &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp.myperson.1234&lt;/code&gt;), or the TTL is too high. I have seen cache servers having to be bounced after this, causing a snowball effect as the database gets overloaded, akin to a complete failure of a cache server. To avoid this, create an API endpoint that would take basic parameters to form a key, create and hash the key, and delete that key from the cache. Best way is to have a &lt;em&gt;parameterized jenkins job&lt;/em&gt; for this operation - which provides security and auditing out of the box.&lt;/p&gt;

&lt;h1 id=&quot;8-be-aware-of-the-key-and-value-size-limits&quot;&gt;8. Be aware of the key and value size limits&lt;/h1&gt;
&lt;p&gt;Different cache servers have different limits. Memcached key names cannot be greater than 250 bytes, and values cannot be larger than 1 MB. Redis has much larger limits, 512 MB for key and value. For memcached, keep this in mind when namespacing. A good idea is to MD5 or hash the key name to ensure consistent and unique key of acceptable length. Similarly, based on the efficiency trade-offs, you may want to compress or change the serialization format of the values as appropriate.&lt;/p&gt;

&lt;h1 id=&quot;9-http-cache-is-not-the-same-as-application-cache&quot;&gt;9. HTTP Cache is not the same as Application Cache&lt;/h1&gt;
&lt;p&gt;While so far we have discussed objets from the database being cached, there are cases where it makes a lot of sense to cache at the HTTP level, i.e. the HTTP response from an API, or an entire HTML response from a webserver. CDNs (Content Delivery Networks) are giant HTTP Caches. This is a also common scenario in &lt;em&gt;edge caching&lt;/em&gt;, where the cache sits at the HTTP layer to cache static content with much larger TTLs. In case of APIs, the HTTP GET API URL is used as the key name. If going this route, be aware of the query strings that may have been used to modify the response. If the API supports features like field filtering, projections, sort, etc - the URL based caching may have a lower hit ratio, or inconsistent results. It is a good idea to account for these features while constructing the key. Caching the response for &lt;code class=&quot;highlighter-rouge&quot;&gt;?expand=address,business&lt;/code&gt; should also result in a &lt;em&gt;hit&lt;/em&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;?expand=business,address&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;10-use-http-cache-headers-for-http-responses&quot;&gt;10. Use HTTP Cache Headers for HTTP Responses&lt;/h1&gt;
&lt;p&gt;This is where we move caching from the server, to the client. In other words, we can instruct the requester of our APIs or HTTP Content to cache the response at their end. Instead of building our own vernacular for these instructions, use the standard HTTP Spec. The &lt;a href=&quot;https://tools.ietf.org/html/rfc7234&quot; target=&quot;_blank_&quot;&gt;HTTP RFC 7234&lt;/a&gt; describes how HTTP content caching should behave, particularly when the client is a browser. The same directives and headers should also be used for all HTTP responses. For example, the directive &lt;code class=&quot;highlighter-rouge&quot;&gt;no-cache&lt;/code&gt; would instruct the client to never cache the response, while &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; would instruct the client to safely re-use the response till it expires (as defined by the &lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt; value, or the TTL in seconds). Regardless of a webpage or a JSON response from an API, it is a good idea to adhere to HTTP Spec.&lt;/p&gt;

&lt;p&gt;Here is an example of cache headers returned by Google -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  bash-3.2$ curl --head https://www.google.com
  HTTP/1.1 200 OK
  Expires: -1
  Cache-Control: private, max-age=0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;11-centralize-the-cache-interface-and-keep-it-simple&quot;&gt;11. Centralize the Cache Interface, and keep it simple&lt;/h1&gt;
&lt;p&gt;Last but not the least, design all the cache operations to go through a single class instead of spreading it everywhere. This has many benefits, like centralizing the the logic for key name creation, providing vendor independent method for the rest of the application to interact with the cache, and also, optimize the serialization of the objects (like replacing Java Object Serialization with Kyro or protobuf). This also provides a way for cache key lookups and invalidations with human-friendly key names, despite the cache having hashed key names. For instance, in Java, this can be a &lt;code class=&quot;highlighter-rouge&quot;&gt;Singleton&lt;/code&gt; sitting in a commons-jar used across all the applications sharing a cache cluster.&lt;/p&gt;

&lt;p&gt;In conclusion, while no solution is wrong, it is best to apply caching to get the biggest bang for the buck, reduce infrastructure overhead, and satisfy the consistency and availability requirements. Caching strategy for a Financial Application will be entirely different than that of a Social Networking App, which will be entirely different than a Content/Media Application. Caching is not a one size fits all proposition. However, I hope that by using the notes above, you can design an efficient, data-driven caching strategy across all tiers of your application.&lt;/p&gt;

&lt;h1 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h1&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2017/07/05/caching-gotchas-and-lessons-learned/&quot;;  
this.page.identifier = &quot;/2017/07/05/caching-gotchas-and-lessons-learned&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="architecture" />
      
        <category term="caching" />
      

      

      
        <summary type="html">It has been said time and again - “There are only two hard things in Computer Science: cache invalidation and naming things”. Having run into both of these problems in my professional career, I figured I could write a post, summarizing the lessons I have learned along the way by seeing and building various caching architectures across many companies, big and small. Just like threading, caching is easy to code, but often creates more problems than it intends to solve. These problems can arise from - you guessed it - invalidation, sub-par efficiency, inconsistency, and many more. It is also one of my favorite topics for technical interviews :)</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Boto 3 and SQS</title>
      
      <link href="https://lobster1234.github.io/2017/06/25/boto-and-sqs/" rel="alternate" type="text/html" title="Boto 3 and SQS" />
      <published>2017-06-25T23:44:37-07:00</published>
      <updated>2017-06-25T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/06/25/boto-and-sqs</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/06/25/boto-and-sqs/">&lt;p&gt;&lt;a href=&quot;https://github.com/boto/boto3&quot; target=&quot;_blank_&quot;&gt;Boto 3&lt;/a&gt; is the AWS SDK for Python. In fact, this SDK is the reason I picked up Python - so I can do stuff with AWS with a few lines of Python in a script instead of a full blown Java setup. Its fun, easy, and pretty much feels like working on a CLI with a rich programming language to back it up. In this post we will use &lt;a href=&quot;http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/Welcome.html&quot; target=&quot;_blank_&quot;&gt;SQS&lt;/a&gt; and boto 3 to perform basic operations on the service.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;SQS is a highly available and scalable PaaS for Messaging. This allows for decoupling various components of the architecture, and cleaner hand-off of responsibilities across them. We use SQS heavily at &lt;a href=&quot;https://www.marqeta.com&quot; target=&quot;_blank_&quot;&gt;Marqeta&lt;/a&gt; for various integration patterns.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re used to JMS, then you may need some pivoting, as SQS is not exactly a JMS provider, but there is a &lt;a href=&quot;http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-java-message-service-jms-client.html&quot; target=&quot;_blank_&quot;&gt;library&lt;/a&gt; that can be used as a bridge between JMS and SQS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You should already have an &lt;a href=&quot;https://aws.amazon.com/free/&quot; target=&quot;_blank_&quot;&gt;AWS account&lt;/a&gt;, and AWS configured on your development machine via AWS CLI’s &lt;code class=&quot;highlighter-rouge&quot;&gt;aws configure&lt;/code&gt; command. Here is a &lt;a href=&quot;https://lobster1234.github.io/2017/02/17/marqeta-aws-sqs-lab/&quot; target=&quot;_blank_&quot;&gt;quick tutorial&lt;/a&gt; to familiarize yourself with SQS.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You should already have python3 and pip3 installed. Please see &lt;a href=&quot;https://lobster1234.github.io/2017/05/25/python-java-primer/&quot; target=&quot;_blank_&quot;&gt;this post&lt;/a&gt; for details on installing and getting started with Python 3.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To install Boto 3, type &lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install boto3&lt;/code&gt; on the shell prompt.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Verify that Boto 3 is installed -&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash-3&quot;&gt;bash-3.2$ pip3 show boto3
Name: boto3
Version: 1.4.4
Summary: The AWS SDK for Python
Home-page: https://github.com/boto/boto3
Author: Amazon Web Services
Author-email: UNKNOWN
License: Apache License 2.0
Location: /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages
Requires: s3transfer, jmespath, botocore
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will use a standard queue, for &lt;a href=&quot;http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html&quot; target=&quot;_blank_&quot;&gt;FIFO Queues&lt;/a&gt;, see notes in the comments below.&lt;/p&gt;

&lt;h3 id=&quot;the-code&quot;&gt;The Code&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/local/bin/python3&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;boto3&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# create a boto3 client&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sqs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# create the test queue&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# for a FIFO queue, the name must end in .fifo, and you must pass FifoQueue = True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test_queue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# get a list of queues, we get back a dict with 'QueueUrls' as a key with a list of queue URLs&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;queues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_queues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueNamePrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test_queue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# we filter to narrow down the list&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_queue_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'QueueUrls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# send 100 messages to this queue&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# we set a simple message body for each message&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# for FIFO queues, a 'MessageGroupId' is required, which is a 128 char alphanumeric string&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;enqueue_response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_queue_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'This is test message #'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# the response contains MD5 of the body, a message Id, MD5 of message attributes, and a sequence number (for FIFO queues)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Message ID : '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MessageId'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# next, we dequeue these messages - 10 messages at a time (SQS max limit) till the queue is exhausted.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# in production/real setup, I suggest using long polling as you get billed for each request, regardless of an empty response&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receive_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_queue_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxNumberOfMessages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# adjust MaxNumberOfMessages if needed&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Messages'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# when the queue is exhausted, the response dict contains no 'Messages' key&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Messages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 'Messages' is a list&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# process the messages&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# next, we delete the message from the queue so no one else will process it again&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueueUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_queue_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiptHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ReceiptHandle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Queue is now empty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please refer to Boto 3 SQS documentation &lt;a href=&quot;http://boto3.readthedocs.io/en/latest/reference/services/sqs.html&quot; target=&quot;_blank_&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="boto" />
      
        <category term="python" />
      
        <category term="aws" />
      
        <category term="sqs" />
      

      

      
        <summary type="html">Boto 3 is the AWS SDK for Python. In fact, this SDK is the reason I picked up Python - so I can do stuff with AWS with a few lines of Python in a script instead of a full blown Java setup. Its fun, easy, and pretty much feels like working on a CLI with a rich programming language to back it up. In this post we will use SQS and boto 3 to perform basic operations on the service.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Python Primer for Java Developers</title>
      
      <link href="https://lobster1234.github.io/2017/05/25/python-java-primer/" rel="alternate" type="text/html" title="Python Primer for Java Developers" />
      <published>2017-05-25T23:44:37-07:00</published>
      <updated>2017-05-25T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/05/25/python-java-primer</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/05/25/python-java-primer/">&lt;p&gt;I took these notes while ramping up on Python, to be able to contribute to a few Github projects, deploy AWS Lambdas quicker, and use &lt;a href=&quot;https://github.com/boto/boto3&quot; target=&quot;_blank_&quot;&gt;boto3&lt;/a&gt; for quite a few projects. Plus I find it a very light, frictionless, quick and easy scripting language to have in the arsenal. This information can be particularly useful to anyone who is coming from a Java background, and wants to compare and contrast the two languages’ basic constructs and syntax.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;
&lt;p&gt;I recommend using &lt;a href=&quot;https://atom.io/&quot; target=&quot;_blank_&quot;&gt;Atom&lt;/a&gt;, and installing the &lt;a href=&quot;https://atom.io/packages/script&quot; target=&quot;_blank_&quot;&gt;Script&lt;/a&gt; package. Once done, make sure you download and install &lt;a href=&quot;https://www.python.org/downloads/&quot; target=&quot;_blank_&quot;&gt;Python 3.x&lt;/a&gt;. For OSX, this will also install &lt;code class=&quot;highlighter-rouge&quot;&gt;pip3&lt;/code&gt;, which is the Python Package Manager. I noticed that on Ubuntu Xenial I had to install pip3 via &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install python3-pip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://github.com/lsegal/atom-runner/issues/124&quot; target=&quot;_blank_&quot;&gt;(closed) issue&lt;/a&gt; logged for Atom to work with Python 3 on OSX, but none of it worked for me except using shebang. Just put &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/local/bin/python3&lt;/span&gt;&lt;/code&gt; as the first line in the file which you’ll write code in.&lt;/p&gt;

&lt;p&gt;To write code, create a new file in Atom, and you’re good to go. On OSX use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+i&lt;/code&gt; to execute.&lt;/p&gt;

&lt;p&gt;I’d also recommend checking out the &lt;a href=&quot;https://www.hackerrank.com/domains/python/py-introduction&quot; target=&quot;_blank_&quot;&gt;Python Domain&lt;/a&gt; on HackerRank for hands-on practice.&lt;/p&gt;

&lt;p&gt;That said, lets get started.&lt;/p&gt;

&lt;h3 id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;
&lt;h4 id=&quot;java&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//  This is a comment&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*  
    This is a
    multi line comment
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;python&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This is a comment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;variables&quot;&gt;Variables&lt;/h3&gt;
&lt;h4 id=&quot;java-1&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0034&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//conversions&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseLong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1024&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseBoolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//casting&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;python-1&quot;&gt;Python&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Name&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0034&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# casting&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Will only return false for an empty string or an int=0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list_of_ints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of_strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;hello-world&quot;&gt;Hello World&lt;/h3&gt;
&lt;h4 id=&quot;java-2&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//With newline&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Without newline&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;python-2&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# With newline&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Without newline&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;read-input&quot;&gt;Read Input&lt;/h3&gt;
&lt;h4 id=&quot;java-3&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and age is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;python-3&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter age&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Name is &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; and age is &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;operators&quot;&gt;Operators&lt;/h3&gt;
&lt;h4 id=&quot;java-4&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sum : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Diff : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Product : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Modulo : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Power : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Floor Division : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Float Division : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;python-4&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sum : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Diff : &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Product : &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Modulo : &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Floor Division : &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Float Division : &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;if-then-else&quot;&gt;If-then-else&lt;/h3&gt;
&lt;p&gt;We use the if-then-else exercise from Hackerrank as an example.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
If n  is odd, print Weird
If n is even and in the inclusive range of 2 to 5 , print Not Weird
If n is even and in the inclusive range of 6 to 20, print Weird
If n is even and greater than 20 , print Not Weird

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;java-5&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Weird&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not Weird&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Weird&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not Weird&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;python-5&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Weird&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not Weird&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Weird&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not Weird&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;switch&quot;&gt;Switch&lt;/h3&gt;
&lt;h4 id=&quot;java-6&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dayOfWeek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Weekend&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TGIF&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Weekday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;python-6&quot;&gt;Python&lt;/h4&gt;
&lt;p&gt;Python does not really have a switch/case. if/elif/else are used instead.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Weekend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TGIF&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Weekday&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;for-loop&quot;&gt;For Loop&lt;/h3&gt;
&lt;h4 id=&quot;java-7&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Manish&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;python-7&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Manish&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Python also supports Scala style &lt;code class=&quot;highlighter-rouge&quot;&gt;For Comprehensions&lt;/code&gt;, which are called &lt;code class=&quot;highlighter-rouge&quot;&gt;Generators&lt;/code&gt;. There is a subtle difference though, as you can see below.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;while-loop&quot;&gt;While Loop&lt;/h3&gt;
&lt;h4 id=&quot;java-8&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Loop Broke with n = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;python-8&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Loop broke with n = &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;exceptions-and-errors&quot;&gt;Exceptions and Errors&lt;/h3&gt;
&lt;h4 id=&quot;java-9&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//do something&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeOtherException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//do something else&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//always executes&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;python-9&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# This will cause an error&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;AssertionError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Caught Assertion Exception&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# catch all exceptions&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Caught unknown exception&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# happy path&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No exceptions raised&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# will execute regardless of exceptions or happy path&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Done with the assertion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;functions&quot;&gt;Functions&lt;/h3&gt;
&lt;h4 id=&quot;java-10&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;python-10&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# If return is skipped, the method returns a None&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Can be called with named arguments&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Will print 12&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Can take default arguments too&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Will return 7&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;collections---lists&quot;&gt;Collections - Lists&lt;/h3&gt;
&lt;p&gt;There are technically no &lt;code class=&quot;highlighter-rouge&quot;&gt;Arrays&lt;/code&gt; in Python, just &lt;code class=&quot;highlighter-rouge&quot;&gt;Lists&lt;/code&gt;. Also, they may contain many &lt;code class=&quot;highlighter-rouge&quot;&gt;types&lt;/code&gt; of elements, but in practice it is just one &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;. Python Lists are mutable.&lt;/p&gt;
&lt;h4 id=&quot;java-11&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//in place sort&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//remove the first occurrence of &quot;C&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//remove object at the index 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//reverse the list&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//return the index of first occurrence of &quot;A&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//add list1 elements to list at the end&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//size of the list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;python-11&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# create a new list&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# add to the end&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# insert at an index&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sorted_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# returns a new, sorted list&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# in place sort&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# remove first occurrence of &quot;C&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;popped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# return and remove the item at index 2&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# reverse the list&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# return index of &quot;A&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# add a list with E and F to the end of this list&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# size of the list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;collections---sets&quot;&gt;Collections - Sets&lt;/h3&gt;
&lt;h4 id=&quot;java-12&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;set1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;set1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;set1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;set2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;set2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;set2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;//intersection&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intersection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;intersection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retainAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;//union&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;python-12&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_of_words1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# create a new set. Note that we do not use {}, as that is for the dict&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_of_words1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# add values&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_of_words1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_of_words1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Boat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Boat&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_of_words1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_of_words2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Anchor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Coast&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# create another set and populate it&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_of_words1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_of_words2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# intersection&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_of_words1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_of_words2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# union&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_of_words2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# all values&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;collections---tuples&quot;&gt;Collections - Tuples&lt;/h3&gt;
&lt;p&gt;There are no &lt;code class=&quot;highlighter-rouge&quot;&gt;Tuples&lt;/code&gt; in Java. A tuple is an immutable collection of values.&lt;/p&gt;
&lt;h4 id=&quot;python-13&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Good&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Morning&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# or words = &quot;Good&quot;, &quot;Morning&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Good&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# True&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# This is what makes the tuples so special - they are hashable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# or a,b = &quot;Good&quot;, &quot;Morning&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Good&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Morning&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;collections---maps&quot;&gt;Collections - Maps&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Maps&lt;/code&gt; are called &lt;code class=&quot;highlighter-rouge&quot;&gt;dicts&lt;/code&gt; or Dictionaries in Python.&lt;/p&gt;
&lt;h4 id=&quot;java-13&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;wordCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anchor&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;wordCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dock&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;wordCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;wordCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;wordCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;boat&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//throws NullPointerException&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;python-14&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;wordcount_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# create a new, empty dict&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wordcount_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anchor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# create a new dict and add key-values&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wordcount_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# add keys and values&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wordcount_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wordcount_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;boat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wordcount_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# value of a key&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wordcount_map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# List of keys&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wordcount_map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# List of values&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordcount_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# True&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wordcount_map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#prints tuples of key-value pairs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wordcount_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# throws a KeyError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;classes-and-objects&quot;&gt;Classes and Objects&lt;/h3&gt;
&lt;h4 id=&quot;java-14&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;baz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Usage&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// will print 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// will print 2&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;python-15&quot;&gt;Python&lt;/h4&gt;
&lt;p&gt;For more details like member visibility and multiple inheritance, etc., see &lt;a href=&quot;https://docs.python.org/3/tutorial/classes.html&quot; target=&quot;_blank_&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;baz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# think of this as a Constructor in Java&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# think of self as &quot;this&quot; in Java&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Usage&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;clz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# will print 1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# will print ['baz']&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;clz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# will print 2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# will print ['foo','bar']&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;reading-and-writing-files&quot;&gt;Reading and Writing Files&lt;/h3&gt;
&lt;h4 id=&quot;java-15&quot;&gt;Java&lt;/h4&gt;
&lt;p&gt;Here is an example with &lt;a href=&quot;https://commons.apache.org/proper/commons-io/javadocs/api-2.5/org/apache/commons/io/FileUtils.html&quot; target=&quot;_blank_&quot;&gt;Apache Commons FileUtils&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/tmp/foo.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Read line by line&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LineIterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lineIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Read the entire file in memory&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readFileToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Write to a file&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/tmp/bar.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is a test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;python-16&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# read line by line&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/tmp/foo.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# read the entire file in memory&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/tmp/foo.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# write to a file&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/tmp/bar.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# open for both read and write&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is a test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# will print &quot;This is a test&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;handling-http-communication&quot;&gt;Handling HTTP Communication&lt;/h3&gt;
&lt;h4 id=&quot;java-16&quot;&gt;Java&lt;/h4&gt;
&lt;p&gt;Here is an example with &lt;a href=&quot;http://square.github.io/okhttp/&quot; target=&quot;_blank_&quot;&gt;okhttp&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;OkHttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OkHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://lobster1234.github.io&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//similarly, use response's methods to get other values like status code, etc.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;python-17&quot;&gt;Python&lt;/h4&gt;
&lt;p&gt;First, install &lt;code class=&quot;highlighter-rouge&quot;&gt;requests&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;pip3&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install requests
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then, you’re ready to make HTTP requests&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://lobster1234.github.io&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# headers as a dict&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 200&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# body&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;While these notes provide a quick kick-start and a glimpse in Python Programming, I encourage you to visit python.org and check out the &lt;a href=&quot;https://docs.python.org/3/&quot; target=&quot;_blank_&quot;&gt;documentation&lt;/a&gt;. There is a &lt;strong&gt;lot&lt;/strong&gt; more to Python than what is covered here. Please let me know your feedback with a &lt;a href=&quot;https://twitter.com/lobster1234&quot; target=&quot;_blank_&quot;&gt;tweet/DM&lt;/a&gt;, and thank you for stopping by!&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="python" />
      
        <category term="java" />
      

      

      
        <summary type="html">I took these notes while ramping up on Python, to be able to contribute to a few Github projects, deploy AWS Lambdas quicker, and use boto3 for quite a few projects. Plus I find it a very light, frictionless, quick and easy scripting language to have in the arsenal. This information can be particularly useful to anyone who is coming from a Java background, and wants to compare and contrast the two languages’ basic constructs and syntax.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Get Started on Google Cloud with CLI</title>
      
      <link href="https://lobster1234.github.io/2017/05/14/get-started-on-google-cloud-with-cli/" rel="alternate" type="text/html" title="Get Started on Google Cloud with CLI" />
      <published>2017-05-14T23:44:37-07:00</published>
      <updated>2017-05-14T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/05/14/get-started-on-google-cloud-with-cli</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/05/14/get-started-on-google-cloud-with-cli/">&lt;p&gt;After working with &lt;a href=&quot;https://aws.amazon.com/&quot; target=&quot;_blank_&quot;&gt;Amazon Web Services&lt;/a&gt; for a few years, I decided to take &lt;a href=&quot;https://cloud.google.com/&quot; target=&quot;_blank_&quot;&gt;Google Cloud Platform&lt;/a&gt; for a spin. In this post we will get set up with Google Cloud Platform (GCP), and use the CLI to interact with it for a very basic use case (launch, delete an instance). I will also refer to AWS counterpart(s) as and when it makes sense. The idea is to conceptualize automated creation and teardown of entire environments using the idea of &lt;em&gt;projects&lt;/em&gt; in GCP.&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;Before we proceed, it is important to understand the concept of Projects in Google Cloud Platform. A project does not really have a direct counterpart in AWS. A project is a collection of resources and services organized to work together. One project is associated with one billing account. Any communication outside of the project boundaries needs to occur via an external network connection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sign up for &lt;a href=&quot;https://cloud.google.com/free/&quot; target=&quot;_blank_&quot;&gt;Google Cloud Platform Free Tier&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://cloud.google.com/sdk/&quot; target=&quot;_blank_&quot;&gt;Download and unzip&lt;/a&gt; the Google Cloud SDK. While AWS Command Line Interface is called AWS CLI, GCP’s is called Cloud SDK.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd google-cloud-sdk&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./install.sh&lt;/code&gt; to add the CLI SDK to our path.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud init&lt;/code&gt; to initialize the SDK. This will trigger an OAuth flow, authorizing the SDK to make API calls on our behalf.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once authorized, we will se a list of projects to pick from (If there are any existing ones), or to create a new project. Let us create a new project.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  You are logged in as: [your_email_at_gmail.com].

  Pick cloud project to use:
   [1] cp100-166810
   [2] manish-test-162406
   [3] Create a new project
  Please enter numeric choice or text value (must exactly match list
  item): 3
  Enter a Project ID. Note that a Project ID CANNOT be changed later.
  Project IDs must be 6-30 characters (lowercase ASCII, digits, or
  hyphens) in length and start with a lowercase letter. project-for-my-blog

  Your current project has been set to: [project-for-my-blog].

  ...

  Your Google Cloud SDK is configured and ready to use!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;There are several files created in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config/gcloud&lt;/code&gt; which contain the config, logs, credentials, etc. Similar to AWS, which uses &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.aws&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2 id=&quot;exploring-the-cli&quot;&gt;Exploring the CLI&lt;/h2&gt;

&lt;p&gt;The typical syntax of gcloud CLI is &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud [flags ] &amp;lt;group | command&amp;gt;&lt;/code&gt;. This is similar to AWS CLI, where it is &lt;code class=&quot;highlighter-rouge&quot;&gt;aws &amp;lt;command&amp;gt; &amp;lt;subcommand&amp;gt; [&amp;lt;subcommand&amp;gt; ...] [params]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is a compare and contrast to show configuration&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ gcloud config configurations list
NAME     IS_ACTIVE  ACCOUNT                       PROJECT              DEFAULT_ZONE  DEFAULT_REGION
default  True       your_email_at_gmail@gmail.com  project-for-my-blog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;vs.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws configure list
      Name                    Value             Type    Location
      ----                    -----             ----    --------
   profile                &amp;lt;not set&amp;gt;             None    None
access_key                &amp;lt;not set&amp;gt;             None    None
secret_key                &amp;lt;not set&amp;gt;             None    None
    region                us-east-1      config-file    ~/.aws/config
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To list out components installed with the CLI, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud components list&lt;/code&gt; command. This is very different than AWS CLI.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ gcloud components list

Your current Cloud SDK version is: 155.0.0
The latest available version is: 155.0.0

┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                  Components                                                 │
├───────────────┬──────────────────────────────────────────────────────┬──────────────────────────┬───────────┤
│     Status    │                         Name                         │            ID            │    Size   │
├───────────────┼──────────────────────────────────────────────────────┼──────────────────────────┼───────────┤
│ Not Installed │ App Engine Go Extensions                             │ app-engine-go            │  96.6 MiB │
│ Not Installed │ Bigtable Command Line Tool                           │ cbt                      │   3.9 MiB │
│ Not Installed │ Cloud Datalab Command Line Tool                      │ datalab                  │   &amp;lt; 1 MiB │
│ Not Installed │ Cloud Datastore Emulator                             │ cloud-datastore-emulator │  15.4 MiB │
│ Not Installed │ Cloud Datastore Emulator (Legacy)                    │ gcd-emulator             │  38.1 MiB │
│ Not Installed │ Cloud Pub/Sub Emulator                               │ pubsub-emulator          │  21.0 MiB │
│ Not Installed │ Emulator Reverse Proxy                               │ emulator-reverse-proxy   │  14.5 MiB │
│ Not Installed │ Google Container Registry's Docker credential helper │ docker-credential-gcr    │   2.3 MiB │
│ Not Installed │ gcloud Alpha Commands                                │ alpha                    │   &amp;lt; 1 MiB │
│ Not Installed │ gcloud Beta Commands                                 │ beta                     │   &amp;lt; 1 MiB │
│ Not Installed │ gcloud app Java Extensions                           │ app-engine-java          │ 128.6 MiB │
│ Not Installed │ gcloud app PHP Extensions (Mac OS X)                 │ app-engine-php-darwin    │  21.9 MiB │
│ Not Installed │ gcloud app Python Extensions                         │ app-engine-python        │   6.1 MiB │
│ Not Installed │ kubectl                                              │ kubectl                  │  14.8 MiB │
│ Installed     │ BigQuery Command Line Tool                           │ bq                       │   &amp;lt; 1 MiB │
│ Installed     │ Cloud SDK Core Libraries                             │ core                     │   6.0 MiB │
│ Installed     │ Cloud Storage Command Line Tool                      │ gsutil                   │   2.9 MiB │
│ Installed     │ Default set of gcloud commands                       │ gcloud                   │           │
└───────────────┴──────────────────────────────────────────────────────┴──────────────────────────┴───────────┘
To install or remove components at your current SDK version [155.0.0], run:
  $ gcloud components install COMPONENT_ID
  $ gcloud components remove COMPONENT_ID

To update your SDK installation to the latest version [155.0.0], run:
  $ gcloud components update

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As we can see, we have the basic components pre-installed, and others can be installed/removed at any time.&lt;/p&gt;

&lt;h2 id=&quot;gcloud-interactive-shell&quot;&gt;gcloud Interactive Shell&lt;/h2&gt;

&lt;p&gt;Just like in AWS we can use the super awesome &lt;a href=&quot;https://github.com/awslabs/aws-shell&quot; target=&quot;_blank_&quot;&gt;AWS Shell&lt;/a&gt;, for gcloud, the interactive shell is a part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Alpha&lt;/code&gt; component. It can be installed with &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud components install alpha&lt;/code&gt;, and can be run with &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud alpha shell&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ gcloud alpha shell
gcloud&amp;gt;
-------------------------------------------------------------------------------
your_email_at_gmail@gmail.com | project-for-my-blog | ctrl-q: Quit | ctrl-t: Help ON
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This has the contextual help as well as smart auto-complete/auto-suggest features similar to the aws-shell.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-project-via-gcloud-cli&quot;&gt;Creating a Project via gcloud CLI&lt;/h2&gt;

&lt;p&gt;This is where it gets &lt;strong&gt;really interesting&lt;/strong&gt;, specially when compared to AWS. Before the project can be put to any use, it needs to have Cloud APIs enabled, and to do that, it needs to have billing enabled.&lt;/p&gt;

&lt;p&gt;Verify the billing account, which has been initialized after authentication we did during &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud init&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud&amp;gt; alpha billing accounts list
ID                    NAME                OPEN
XXXXXX-XXXXXX-XXXXXX  My Billing Account  True
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, we associate, or &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; our project, &lt;code class=&quot;highlighter-rouge&quot;&gt;project-for-my-blog&lt;/code&gt; with this &lt;code class=&quot;highlighter-rouge&quot;&gt;account-id&lt;/code&gt;, like so -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud&amp;gt; alpha billing accounts projects link project-for-my-blog --account-id=XXXXXX-XXXXXX-XXXXXX
billingAccountName: billingAccounts/XXXXXX-XXXXXX-XXXXXX
billingEnabled: true
name: projects/project-for-my-blog/billingInfo
projectId: project-for-my-blog
gcloud&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’re not done yet. We need to associate services to this project. We can list the available services by using &lt;code class=&quot;highlighter-rouge&quot;&gt;list --available&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud&amp;gt; service-management list --available
NAME                                      TITLE
picker.googleapis.com                     Google Picker API
bigquery-json.googleapis.com              BigQuery API
chromewebstore.googleapis.com             Chrome Web Store API
tracing.googleapis.com                    Google Tracing API
youtube.googleapis.com                    YouTube Data API v3
youtubeanalytics.googleapis.com           YouTube Analytics API
clouderrorreporting.googleapis.com        Stackdriver Error Reporting API
...
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Since we need the compute services enabled, we will enable it by using &lt;code class=&quot;highlighter-rouge&quot;&gt;service-management --enable &amp;lt;service-name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud&amp;gt; service-management enable compute-component.googleapis.com
Waiting for async operation operations/projectSettings.544ddc35-4780-414d-a814-XXXXXXXXX to complete...
Operation finished successfully. The following command can describe the Operation details:
 gcloud service-management operations describe operations/projectSettings.544ddc35-4780-414d-a814-XXXXXXXX
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that we got the billing and the service-management sorted out, we can issue &lt;code class=&quot;highlighter-rouge&quot;&gt;compute&lt;/code&gt; commands.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud&amp;gt; compute instances list
Listed 0 items.
gcloud&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;creating-an-instance&quot;&gt;Creating an Instance&lt;/h2&gt;

&lt;p&gt;Next, we will create an instance. This is much easier compared to AWS, as gcloud defaults pretty much everything except for the name and zone of the instance.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud&amp;gt; compute instances create first-gcloud-instance --zone us-west1-a
Created [https://www.googleapis.com/compute/v1/projects/project-for-my-blog/zones/us-west1-a/instances/first-gcloud-instance].
NAME                   ZONE        MACHINE_TYPE   PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP    STATUS
first-gcloud-instance  us-west1-a  n1-standard-1               10.138.0.3   35.xxx.yyy.zz  RUNNING
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can verify the default values by issuing a &lt;code class=&quot;highlighter-rouge&quot;&gt;describe&lt;/code&gt; command, just like AWS.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud&amp;gt; compute instances describe first-gcloud-instance --zone us-west1-a
canIpForward: false
cpuPlatform: Intel Broadwell
creationTimestamp: '2017-05-16T01:24:55.090-07:00'
disks:
- autoDelete: true
  boot: true
  deviceName: persistent-disk-0
  index: 0
  interface: SCSI
  kind: compute#attachedDisk
  licenses:
  - https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-8-jessie
  mode: READ_WRITE
  source: https://www.googleapis.com/compute/v1/projects/project-for-my-blog/zones/us-west1-a/disks/first-gcloud-instance
  type: PERSISTENT
id: '4643304423181191609'
kind: compute#instance
machineType: https://www.googleapis.com/compute/v1/projects/project-for-my-blog/zones/us-west1-a/machineTypes/n1-standard-1
metadata:
  fingerprint: CFAAAAAAA=
  kind: compute#metadata
name: first-gcloud-instance
networkInterfaces:
- accessConfigs:
  - kind: compute#accessConfig
    name: external-nat
    natIP: 35.xxx.yyy.zz
    type: ONE_TO_ONE_NAT
  kind: compute#networkInterface
  name: nic0
  network: https://www.googleapis.com/compute/v1/projects/project-for-my-blog/global/networks/default
  networkIP: 10.138.0.3
  subnetwork: https://www.googleapis.com/compute/v1/projects/project-for-my-blog/regions/us-west1/subnetworks/default
scheduling:
  automaticRestart: true
  onHostMaintenance: MIGRATE
  preemptible: false
selfLink: https://www.googleapis.com/compute/v1/projects/project-for-my-blog/zones/us-west1-a/instances/first-gcloud-instance
serviceAccounts:
- email: 999999999999-compute@developer.gserviceaccount.com
  scopes:
  - https://www.googleapis.com/auth/cloud.useraccounts.readonly
  - https://www.googleapis.com/auth/devstorage.read_only
  - https://www.googleapis.com/auth/logging.write
  - https://www.googleapis.com/auth/monitoring.write
  - https://www.googleapis.com/auth/pubsub
  - https://www.googleapis.com/auth/service.management.readonly
  - https://www.googleapis.com/auth/servicecontrol
  - https://www.googleapis.com/auth/trace.append
status: RUNNING
tags:
  fingerprint: 42AAAAAAAAA=
zone: https://www.googleapis.com/compute/v1/projects/project-for-my-blog/zones/us-west1-a
gcloud&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To summarize, the instance is a Debian8 (Jessie) VM, type n1-standard-1 (1 vCPU, 3.75G RAM), has a Public IP, a 10GB Standard Persistent Disk (HDD).&lt;/p&gt;

&lt;p&gt;In AWS terms, the AMI is &lt;code class=&quot;highlighter-rouge&quot;&gt;Debian GNU/Linux 8 (Jessie)&lt;/code&gt;, instance type is &lt;code class=&quot;highlighter-rouge&quot;&gt;m3.medium&lt;/code&gt;, with a 10G HDD Root Volume, no EBS volume, in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Default VPC&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Public Subnet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into this instance. Note that we did not deal with any &lt;code class=&quot;highlighter-rouge&quot;&gt;keypair&lt;/code&gt; like we do with AWS. However, as we try to &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into this instance, gcloud will create a keypair for us.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud&amp;gt; compute ssh first-gcloud-instance --zone us-west1-a

WARNING: The public SSH key file for gcloud does not exist.
WARNING: The private SSH key file for gcloud does not exist.
WARNING: You do not have an SSH key for gcloud.
WARNING: SSH keygen will be executed to generate a key.
Generating public/private rsa key pair.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /Users/mpandit/.ssh/google_compute_engine.
Your public key has been saved in /Users/mpandit/.ssh/google_compute_engine.pub.
The key fingerprint is:
SHA256:************************************ mpandit@C02STG51GTFM
The key's randomart image is:
+---[RSA 2048]----+
..
..
..
..
+----[SHA256]-----+
Updating project ssh metadata...\Updated [https://www.googleapis.com/compute/v1/projects/project-for-my-blog].
Updating project ssh metadata...done.
Waiting for SSH key to propagate.
Warning: Permanently added 'compute.4643304423181191609' (ECDSA) to the list of known hosts.

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
mpandit@first-gcloud-instance:~$
mpandit@first-gcloud-instance:~$ uname -a
Linux first-gcloud-instance 3.16.0-4-amd64 #1 SMP Debian 3.16.39-1+deb8u2 (2017-03-07) x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Feel free to play around with the instance. Here is how to install Apache2.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mpandit@first-gcloud-instance:~$ sudo apt-get install apache2
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following extra packages will be installed:
  ...

Processing triggers for libc-bin (2.19-18+deb8u7) ...
Processing triggers for systemd (215-17+deb8u6) ...
Processing triggers for sgml-base (1.26+nmu4) ...

mpandit@first-gcloud-instance:~$ telnet localhost 80
Trying ::1...
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, if we try to use the public IP from our browser, the connection will fail. This is because only &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; (port 22) access is allowed by default.&lt;/p&gt;

&lt;p&gt;We can compare this to AWS where the Default VPC Security Group allows all traffic to all ports from &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0/0&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;deleting-the-instance&quot;&gt;Deleting the Instance&lt;/h2&gt;

&lt;p&gt;Deleting the instance is also straightforward, needing only the name and the zone.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud&amp;gt; compute instances list
NAME                ZONE        MACHINE_TYPE   PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP     STATUS
first-gcloud-instance  us-west1-a  n1-standard-1               10.138.0.3   35.xxx.yyy.zz  RUNNING
gcloud&amp;gt; compute instances delete my-gcloud-instance --zone us-west1-a
The following instances will be deleted. Attached disks configured to
be auto-deleted will be deleted unless they are attached to any other
instances. Deleting a disk is irreversible and any data on the disk
will be lost.
 - [my-gcloud-instance] in [us-west1-a]

Do you want to continue (Y/n)?  Y

Deleted [https://www.googleapis.com/compute/v1/projects/project-for-my-blog/zones/us-west1-a/instances/first-gcloud-instance].
gcloud&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;deleting-the-project&quot;&gt;Deleting the Project&lt;/h2&gt;

&lt;p&gt;Finally, we can delete the project. This is not an instantaneous action though - as GCP lets us &lt;code class=&quot;highlighter-rouge&quot;&gt;undelete&lt;/code&gt; a project for up to a certain time (30 days?). Once the project is deleted, an email is sent informing the same.  Deleting a project will delete all the resources associated with it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud&amp;gt; projects list
PROJECT_ID                NAME                   PROJECT_NUMBER
project-for-my-blog       project-for-my-blog    28XXXXXXXXXXXX
gcloud&amp;gt; projects delete project-for-my-blog
Your project will be deleted.

Do you want to continue (Y/n)?  Y

Deleted [https://cloudresourcemanager.googleapis.com/v1/projects/project-for-my-blog].

You can undo this operation for a limited period by running:
  $ gcloud projects undelete project-for-my-blog
gcloud&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While this is barely scrarching the surface of GCP, in this post we were able to get a brief introduction to using GCP via command line, and drive a very basic use case in an automated manner with no UX involvement. Please &lt;a href=&quot;https://www.twitter.com/lobster1234&quot; target=&quot;_blank_&quot;&gt;tweet/DM&lt;/a&gt; me with your feedback, and what would you like to see next.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="gcloud" />
      
        <category term="gcp" />
      

      

      
        <summary type="html">After working with Amazon Web Services for a few years, I decided to take Google Cloud Platform for a spin. In this post we will get set up with Google Cloud Platform (GCP), and use the CLI to interact with it for a very basic use case (launch, delete an instance). I will also refer to AWS counterpart(s) as and when it makes sense. The idea is to conceptualize automated creation and teardown of entire environments using the idea of projects in GCP.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Migrating a Domain to Amazon Route53</title>
      
      <link href="https://lobster1234.github.io/2017/05/10/migrating-a-domain-to-amazon-route53/" rel="alternate" type="text/html" title="Migrating a Domain to Amazon Route53" />
      <published>2017-05-10T23:44:37-07:00</published>
      <updated>2017-05-10T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/05/10/migrating-a-domain-to-amazon-route53</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/05/10/migrating-a-domain-to-amazon-route53/">&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/route53/&quot; target=&quot;_blank_&quot;&gt;Amazon Route53&lt;/a&gt; is a highly available and scalable DNS service. Route53 provides Domain Registrations and Transfers, DNS service to route traffic to the infrastructure (either within AWS or non-AWS), advanced routing policies like weighted and geo, and health check services that can be leveraged to perform traffic routing to different destination in the event of a failure. It provides more flexibility and seamless integration with AWS Services than any other DNS host can.&lt;/p&gt;

&lt;p&gt;One of the most common scenarios is the need to send traffic from a site registered at non-Route53 providers to an ELB, which Route53 supports via an &lt;a href=&quot;http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-choosing-alias-non-alias.html&quot; target=&quot;_blank_&quot;&gt;Alias Record&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post we will discuss moving the DNS - where requests to a domain hosted on a non-Route53 provider would resolve to Route53, and then point to an ELB which could be hosting a web property. However, the destination does not have to be an ELB, it can be any public IP. The other part is that of the Domain Registration itself, which can be transferred to Route53 if needed.&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Always move DNS before transferring the domain registration to avoid any outage during the transition.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will use a GoDaddy registered domain, which needs to resolve to an ELB which is fronting a Web Application.&lt;/p&gt;

&lt;p&gt;If your provider is different, then these steps may not match 1:1 but will be similar.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Log in to the AWS Console, and search for &lt;strong&gt;Route53&lt;/strong&gt; on the landing page. Click the service name.
&lt;img src=&quot;https://lobster1234.github.io/assets/dns-1.png&quot; alt=&quot;dns-1&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click the &lt;strong&gt;Get Started Now&lt;/strong&gt; under the &lt;strong&gt;DNS Management&lt;/strong&gt; section.
&lt;img src=&quot;https://lobster1234.github.io/assets/dns-2.png&quot; alt=&quot;dns-2&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click the &lt;strong&gt;Create Hosted Zone&lt;/strong&gt; Button.
&lt;img src=&quot;https://lobster1234.github.io/assets/dns-3.png&quot; alt=&quot;dns-3&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A form will show up in the right panel. Enter your domain name (skip the &lt;code class=&quot;highlighter-rouge&quot;&gt;www&lt;/code&gt;), and an optional description. Keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;Public Hosted Zone&lt;/code&gt; selected. Click &lt;strong&gt;Create&lt;/strong&gt;.
&lt;img src=&quot;https://lobster1234.github.io/assets/dns-4.png&quot; alt=&quot;dns-4&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once done, you will see the zone details, with only an &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; record set and a &lt;code class=&quot;highlighter-rouge&quot;&gt;SOA&lt;/code&gt; record set. &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; has a list of name servers, and &lt;code class=&quot;highlighter-rouge&quot;&gt;SOA&lt;/code&gt; is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Start of Authority&lt;/code&gt; record, which at a minimum contains the primary name server host name. You will notice this is usually the first name server address from the &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; record record set. You can read more information on various DNS record set types &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_DNS_record_types&quot; target=&quot;_blank_&quot;&gt;here&lt;/a&gt;.
&lt;img src=&quot;https://lobster1234.github.io/assets/dns-5.png&quot; alt=&quot;dns-5&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, we need to add our record sets from GoDaddy to this hosted zone. To do this, we login to GoDaddy, click on &lt;strong&gt;Manage DNS&lt;/strong&gt; under the &lt;strong&gt;Domain&lt;/strong&gt; being moved.
&lt;img src=&quot;https://lobster1234.github.io/assets/dns-13.png&quot; alt=&quot;dns-13&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scroll all the way down and notice a section called &lt;strong&gt;Advanced Features&lt;/strong&gt;. Click the link that says &lt;strong&gt;Export Zone File (Unix)&lt;/strong&gt;.
&lt;img src=&quot;https://lobster1234.github.io/assets/dns-6.png&quot; alt=&quot;dns-6&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Notice a file &lt;code class=&quot;highlighter-rouge&quot;&gt;your_domain_name.txt&lt;/code&gt; that has been downloaded. Open that file in any text editor of your choice.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now come back to the &lt;strong&gt;Route 53&lt;/strong&gt; page with the &lt;strong&gt;Hosted Zone&lt;/strong&gt;, and click &lt;strong&gt;Import Zone File&lt;/strong&gt; at the top. A form will open up on the right. Copy and paste the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;your_domain_name.txt&lt;/code&gt; file in this section, and click &lt;strong&gt;Import&lt;/strong&gt; button.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click refresh at the top right or just refresh your browser and you’ll notice a much bigger list of record sets in the hosted domain. These have been imported from the GoDaddy Zone File.
&lt;img src=&quot;https://lobster1234.github.io/assets/dns-7.png&quot; alt=&quot;dns-7&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, we just need to point the Name Servers listed in GoDaddy for our Domain to Amazon’s. To do this, go to GoDaddy, and just above &lt;strong&gt;Advanced Features&lt;/strong&gt;, look for a section called &lt;strong&gt;Nameservers&lt;/strong&gt;.
&lt;img src=&quot;https://lobster1234.github.io/assets/dns-9.png&quot; alt=&quot;dns-9&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;strong&gt;Change&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;strong&gt;Custom&lt;/strong&gt;
&lt;img src=&quot;https://lobster1234.github.io/assets/dns-10.png&quot; alt=&quot;dns-10&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go back to &lt;strong&gt;Route 53&lt;/strong&gt;, and Notice the &lt;strong&gt;NS&lt;/strong&gt; type record in the Route53 recordset list.
&lt;img src=&quot;https://lobster1234.github.io/assets/dns-8.png&quot; alt=&quot;dns-8&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy paste the name servers from the &lt;strong&gt;NS&lt;/strong&gt; Type recordset one by one in the GoDaddy custom list. You will need to click &lt;strong&gt;Add Nameserver&lt;/strong&gt; twice to add 2 more rows for a total of 4 Amazon Nameservers.
&lt;img src=&quot;https://lobster1234.github.io/assets/dns-11.png&quot; alt=&quot;dns-11&quot; /&gt;
Click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For ELB - Come back to the &lt;strong&gt;Route 53&lt;/strong&gt; page, and click the &lt;strong&gt;A&lt;/strong&gt; Type. On the right side, it will show an IPv4 Address. If you wish to change that to an ELB DNS, check the box that says &lt;strong&gt;Yes&lt;/strong&gt; for &lt;strong&gt;Alias&lt;/strong&gt;, and enter your ELB’s DNS name (A Record) as the &lt;strong&gt;Alias Target&lt;/strong&gt;. If there is no ELB, then the imported &lt;strong&gt;A&lt;/strong&gt; type record should already have a public IP address of your site, and no changes are needed.
&lt;img src=&quot;https://lobster1234.github.io/assets/dns-12.png&quot; alt=&quot;dns-12&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give it a few minutes and keep verifying the name server change by using &lt;a href=&quot;http://dnscheck.pingdom.com/&quot; target=&quot;_blank_&quot;&gt;this excellent service by Pingdom&lt;/a&gt;. Enter your domain name, and if everything worked, you will notice the Amazon Nameservers show up under the &lt;strong&gt;Nameservers&lt;/strong&gt; section on the test results page. If you still see Godaddy’s &lt;code class=&quot;highlighter-rouge&quot;&gt;*.domaincontrol.com&lt;/code&gt; then give it a while and retry.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once you see the Amazon Nameservers in this test, You should be all set! You can now choose to transfer your domain ownership from GoDaddy to Route53, but that is entirely optional.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt; - You will pay 50 cents a month for the first 25 hosted zones, and 40 cents for a billion DNS queries a month. More advanced features (healthchecks, routing policies) carry extra configuration and costs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="route53" />
      

      

      
        <summary type="html">Amazon Route53 is a highly available and scalable DNS service. Route53 provides Domain Registrations and Transfers, DNS service to route traffic to the infrastructure (either within AWS or non-AWS), advanced routing policies like weighted and geo, and health check services that can be leveraged to perform traffic routing to different destination in the event of a failure. It provides more flexibility and seamless integration with AWS Services than any other DNS host can. One of the most common scenarios is the need to send traffic from a site registered at non-Route53 providers to an ELB, which Route53 supports via an Alias Record. In this post we will discuss moving the DNS - where requests to a domain hosted on a non-Route53 provider would resolve to Route53, and then point to an ELB which could be hosting a web property. However, the destination does not have to be an ELB, it can be any public IP. The other part is that of the Domain Registration itself, which can be transferred to Route53 if needed.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Setting up AWS Billing Alerts</title>
      
      <link href="https://lobster1234.github.io/2017/04/28/setting-up-aws-billing-alerts/" rel="alternate" type="text/html" title="Setting up AWS Billing Alerts" />
      <published>2017-04-28T23:44:37-07:00</published>
      <updated>2017-04-28T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/04/28/setting-up-aws-billing-alerts</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/04/28/setting-up-aws-billing-alerts/">&lt;p&gt;For beginners, Amazon Web Services has a &lt;a href=&quot;https://aws.amazon.com/s/dm/optimization/server-side-test/free-tier/free_np/&quot; target=&quot;_blank_&quot;&gt;Free Tier&lt;/a&gt;, which is &lt;em&gt;very generous&lt;/em&gt;. However, as you start to stretch the free tier to it’s limits, it’s good to have billing alerts set up. Essentially you’ll get an email when your bill approaches a certain amount.&lt;/p&gt;

&lt;p&gt;Setting up billing alerts uses &lt;a href=&quot;https://aws.amazon.com/cloudwatch/&quot; target=&quot;_blank_&quot;&gt;CloudWatch&lt;/a&gt;, which is not really the first service the beginners run into. This post shows how to set up AWS Billing Alerts, with screenshots, so you do not have to be familiar with CloudWatch to set one up. I strongly recommend setting the Billing Alerts up, regardless of free tier - having heard and seen horror stories in the recent past.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;Log in to the &lt;a href=&quot;https://console.aws.amazon.com&quot; target=&quot;_blank_&quot;&gt;AWS Console&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, search for &lt;em&gt;CloudWatch&lt;/em&gt;, and select it. You should see something like this -&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/billing-1.png&quot; alt=&quot;Cloudwatch-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Billing&lt;/strong&gt; from the left menu, which will show the below -&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/billing-2.png&quot; alt=&quot;Cloudwatch-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On this screen, click &lt;strong&gt;Create Alarm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This will open up a form, where we will be able to set up threshold, as well as an email address to get notified on.&lt;/p&gt;

&lt;p&gt;First, we set the dollar amount. The image below shows &lt;code class=&quot;highlighter-rouge&quot;&gt;$5&lt;/code&gt; as the threshold.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/billing-3.png&quot; alt=&quot;Cloudwatch-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, on the same screen, we set the notification. Under &lt;strong&gt;Actions&lt;/strong&gt;, click &lt;strong&gt;New List&lt;/strong&gt;. When the text field shows up, enter your email. Then click &lt;strong&gt;Create Alarm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/billing-4.png&quot; alt=&quot;Cloudwatch-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you do, this popup would prompt to confirm the email address that had just been entered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/billing-5.png&quot; alt=&quot;Cloudwatch-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Look for a confirmation email in your inbox, and click the subscription confirmation link. The page would look something like this -&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/billing-6.png&quot; alt=&quot;Cloudwatch-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click View Alarm, and you will see this page with the new alarm created. Initially the Alarm State will be &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INSUFFICIENT_DATA&lt;/code&gt;&lt;/strong&gt;, which means the alarm has just been started, and cloudwatch needs to gather more data around this metric to determine the correct state.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/billing-7.png&quot; alt=&quot;Cloudwatch-7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Give it a minute or two, and refresh the page, you will that the alarm is now in &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt;&lt;/strong&gt; state.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/billing-8.png&quot; alt=&quot;Cloudwatch-8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the billing exceeds the threshold, the alarm state will be &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ALARM&lt;/code&gt;&lt;/strong&gt;, and a notification will be triggered. The state will remain &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ALARM&lt;/code&gt;&lt;/strong&gt; unless a value satisfying the threshold is achieved.&lt;/p&gt;

&lt;p&gt;Hope this post helps you keep a closer eye on your AWS account charges, and avoid any surprises. I’ve seen cases from runaway lambdas, to accidentally leaving expensive instance types running for weeks. Protection is the key!&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      

      

      
        <summary type="html">For beginners, Amazon Web Services has a Free Tier, which is very generous. However, as you start to stretch the free tier to it’s limits, it’s good to have billing alerts set up. Essentially you’ll get an email when your bill approaches a certain amount. Setting up billing alerts uses CloudWatch, which is not really the first service the beginners run into. This post shows how to set up AWS Billing Alerts, with screenshots, so you do not have to be familiar with CloudWatch to set one up. I strongly recommend setting the Billing Alerts up, regardless of free tier - having heard and seen horror stories in the recent past.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Packer your AMIs for Immutable AWS Deployments</title>
      
      <link href="https://lobster1234.github.io/2017/04/23/packer-your-AMIs-for-immutable-aws-deployments/" rel="alternate" type="text/html" title="Packer your AMIs for Immutable AWS Deployments" />
      <published>2017-04-23T23:44:37-07:00</published>
      <updated>2017-04-23T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/04/23/packer-your-AMIs-for-immutable-aws-deployments</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/04/23/packer-your-AMIs-for-immutable-aws-deployments/">&lt;p&gt;In the world of MicroServices, &lt;em&gt;immutable deployments&lt;/em&gt; is a highly recommended strategy. It demands that every release get a fresh environment, all the way down to the lowest level - or in case of AWS, the &lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html&quot; target=&quot;_blank_&quot;&gt;AMI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An AMI can bundle the base operating system, application server/runtime, scripts, agents, etc. along with a versioned application artifact. In the spirit of &lt;em&gt;Infrastructure as Code&lt;/em&gt;, the AMI itself can be versioned as a simple json file, as we will see in this post.&lt;/p&gt;

&lt;p&gt;With respect to Automation, creation of the AMI can be triggered as a &lt;em&gt;downstream&lt;/em&gt; Jenkins Job, after successful pre-release tests, and can then act as an &lt;em&gt;upstream&lt;/em&gt; Job for the Infrastructure Build-out using &lt;a href=&quot;https://aws.amazon.com/cloudformation/&quot; target=&quot;_blank_&quot;&gt;CloudFormation&lt;/a&gt;, or &lt;a href=&quot;https://www.terraform.io/&quot; target=&quot;_blank_&quot;&gt;Terraform&lt;/a&gt;. Once the infrastructure is built, it can be made &lt;em&gt;live&lt;/em&gt; via blue/green, red/black or any other deployment plan.&lt;/p&gt;

&lt;p&gt;In this post, we will build an AMI that can be used to launch 100% identical instances in the infrastructure. We will use &lt;a href=&quot;https://packer.io&quot; target=&quot;_blank_&quot;&gt;Packer&lt;/a&gt; to build the AMI, and create Jenkins Jobs to simulate a simplified, real-world CI/CD pipeline.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/packer.png&quot; alt=&quot;Packer Gitflow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ami&quot;&gt;AMI&lt;/h2&gt;

&lt;p&gt;An AMI, or Amazon Machine Image is a template that describes an instance - Operating System (Linux, Windows..), Architecture (i386, x86_64..), Virtualization (pvm, hvm), Block Device Mapping, Root Volume Type (EBS, Instance), and any other software packaged along. An AMI can be used to launch instances, usually in an Auto Scaling Group. An AMI is tied to a region, but can be copied over to other region(s). AMIs can be private (to an account), public, or shared across accounts. This privacy model controls which accounts can launch instances using this AMI. AMIs can be created from an instance via AWS CLI using the &lt;a href=&quot;http://docs.aws.amazon.com/cli/latest/reference/ec2/create-image.html&quot; target=&quot;_blank_&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create-image&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt;

&lt;h2 id=&quot;amis-and-immutable-deployments&quot;&gt;AMIs and Immutable Deployments&lt;/h2&gt;

&lt;p&gt;An AMI can be thought of as the lowest level of control for a deployment. Going up the chain, there are application servers, with application artifacts (RPM, WAR, node package) at the highest level. The goal is to achieve immutability by bundling the artifact in the AMI (&lt;em&gt;baking in&lt;/em&gt;) so the instances created from this AMI would need no other configuration, and completely identical instances can be spun up in an automated manner. The logs on this instance can be monitored by pushing them out to a central logging service, such as Splunk or Loggly, or a home grown ELK setup. There should absolutely be no need to ssh into any of these instances.&lt;/p&gt;

&lt;h2 id=&quot;packer&quot;&gt;Packer&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://packer.io&quot; target=&quot;_blank_&quot;&gt;Packer&lt;/a&gt; is a tool to automate building of AMIs (and other targeted Machine Images) from configuration files, or &lt;em&gt;templates&lt;/em&gt;. The templates are JSON files containing basic information about the AMI to be created, and can contain inline scripts to provision software on the resulting AMI. Any instances launched from this AMI will have the exact same configuration - from the Operating System to the deployed code. It is ideal to &lt;em&gt;not&lt;/em&gt; have any &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; access on these instances either to achieve a much higher, or absolute level of immutability. That may take a few iterations and maturity cycles though.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Refer to the &lt;a href=&quot;https://github.com/lobster1234/helloworld-api&quot; target=&quot;_blank_&quot;&gt;Hello World SparkJava App&lt;/a&gt;, which is created using the &lt;a href=&quot;https://github.com/lobster1234/sparkjava-archetypes&quot; target=&quot;_blank_&quot;&gt;SparkJava WAR Maven archetype&lt;/a&gt;. This WAR (versioned artifact) is available in github and will be &lt;em&gt;baked into&lt;/em&gt; the AMI. We will use Jenkins to create an AMI for a release version of our war file.&lt;/p&gt;

&lt;p&gt;In the real world, the WAR will be a real service, and the artifact would have been uploaded to Nexus or Artifactory after successfully passing pre-release test cycle. In this case, the war is available as a &lt;code class=&quot;highlighter-rouge&quot;&gt;release&lt;/code&gt; in this github repo.&lt;/p&gt;

&lt;p&gt;Download Packer from &lt;a href=&quot;https://www.packer.io/downloads.html&quot; target=&quot;_blank_&quot;&gt;packer.io&lt;/a&gt;. It would be ideal to have it run on your Jenkins node, as we will be using Jenkins to create an AMI.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ packer                               
Usage: packer [--version] [--help] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]

Available commands are:
   build       build image(s) from template
   fix         fixes templates from old versions of packer
   inspect     see components of a template
   push        push a template and supporting files to a Packer build service
   validate    check that a template is valid
   version     Prints the Packer version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Before creating the Jenkins job, it would help to take a look at a typical, basic Packer template. This file is located &lt;a href=&quot;https://github.com/lobster1234/helloworld-api/blob/master/src/main/resources/packer.json&quot; target=&quot;_blank_&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_comment&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Simple Packer Template using Amazon Linux 2017.03&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;variables&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;aws_access_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;aws_secret_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;builders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;amazon-ebs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;access_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{user `aws_access_key`}}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;secret_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{user `aws_secret_key`}}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;us-east-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;source_ami&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ami-c58c1dd3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;instance_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;t2.micro&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssh_username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ec2-user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ami_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HelloWorld Build-{{user `Build`}}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;source_ami&lt;/code&gt; I’ve used here is latest release &lt;code class=&quot;highlighter-rouge&quot;&gt;2017.03&lt;/code&gt; (at the time of writing) of Amazon Linux in &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1&lt;/code&gt;. You can view the AMI IDs &lt;a href=&quot;https://aws.amazon.com/amazon-linux-ami/&quot; target=&quot;_blank_&quot;&gt;here&lt;/a&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;source_ami&lt;/code&gt; is the base AMI - you may want to have a different base AMI for your company or project. In order to not think of this as a chicken and egg problem, the &lt;code class=&quot;highlighter-rouge&quot;&gt;source_ami&lt;/code&gt; can be &lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html&quot; target=&quot;_blank_&quot;&gt;created from an EC2 instance&lt;/a&gt;, which has the desired software and block mappings etc. on it.&lt;/p&gt;

&lt;p&gt;In this case we will just use the bare bones Amazon Linux AMI to build the image. The type defines &lt;code class=&quot;highlighter-rouge&quot;&gt;EBS-backed-store&lt;/code&gt; AMI in this case. Packer will build the AMI by creating an instance off of the &lt;code class=&quot;highlighter-rouge&quot;&gt;source_ami&lt;/code&gt;, run any installation scripts (to set up servers like Tomcat and deploying the WAR file), and register the image created after this process as a new AMI. The EC2 instance used to create the AMI will then be terminated by Packer.&lt;/p&gt;

&lt;p&gt;All of this is defined under the &lt;code class=&quot;highlighter-rouge&quot;&gt;builders&lt;/code&gt; section of the template, which can have multiple builders. We then use the template’s variable system to inject the artifact build version and timestamp in the created AMI name. In the real world, this &lt;code class=&quot;highlighter-rouge&quot;&gt;Build&lt;/code&gt; variable will be a Jenkins parameter passed over by an upstream job.&lt;/p&gt;

&lt;p&gt;Regarding the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_access_key&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_secret_key&lt;/code&gt; - these can be passed to the Jenkins job as parameters, or ideally be pre-configured on the Jenkins node under &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.aws/credentials&lt;/code&gt;. More details on Packer Templates &lt;a href=&quot;https://www.packer.io/docs/templates/index.html&quot; target=&quot;_blank_&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;provisioning-the-ami&quot;&gt;Provisioning the AMI&lt;/h2&gt;

&lt;p&gt;With the base AMI identified, we will need to install Tomcat, and deploy the WAR artifact in the AMI being created. This is achieved via a simple script, contained in a &lt;code class=&quot;highlighter-rouge&quot;&gt;provisioner&lt;/code&gt; section in &lt;code class=&quot;highlighter-rouge&quot;&gt;packer.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The script would do the following -&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download and install &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenJDK8&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Tomcat8&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Download the artifact (again, I am just using a simple git release here)&lt;/li&gt;
  &lt;li&gt;Deploy it under &lt;code class=&quot;highlighter-rouge&quot;&gt;Tomcat&lt;/code&gt;, and make &lt;code class=&quot;highlighter-rouge&quot;&gt;Tomcat&lt;/code&gt; start on bootup&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_comment&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Simple Packer Template using Amazon Linux 2017.03&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;variables&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;aws_access_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;aws_secret_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;builders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;amazon-ebs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;access_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{user `aws_access_key`}}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;secret_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{user `aws_secret_key`}}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;us-east-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;source_ami&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ami-c58c1dd3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;instance_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;t2.micro&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssh_username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ec2-user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ami_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HelloWorld Build-{{user `Build`}}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;provisioners&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;inline&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sleep 30&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo yum update -y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo yum install java-1.8.0 java-1.8.0-openjdk-devel tomcat8-webapps -y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo yum remove java-1.7.0-openjdk  -y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo wget https://github.com/lobster1234/helloworld-api/files/953511/helloworld-api.war.gz -O /usr/share/tomcat8/webapps/helloworld-api.war.gz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo gunzip /usr/share/tomcat8/webapps/helloworld-api.war.gz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo chkconfig tomcat8 on&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we are ready to run packer via Jenkins, but let us validate the JSON first.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ packer validate packer.json
Template validated successfully.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;creating-the-jenkins-job-to-build-the-ami&quot;&gt;Creating the Jenkins Job to build the AMI&lt;/h2&gt;

&lt;p&gt;This is the job that gets triggered after pre-release tests have passed, and an artifact is ready to be pulled. This is a &lt;code class=&quot;highlighter-rouge&quot;&gt;parameterized&lt;/code&gt; build, and the parameter(s) will help it pull the correct artifact for the version being built.&lt;/p&gt;

&lt;p&gt;We call the Jenkins Job &lt;code class=&quot;highlighter-rouge&quot;&gt;hello-world-api-packer&lt;/code&gt;, created as a FreeStyle Project, pointed it to the git repo, and add the following under &lt;code class=&quot;highlighter-rouge&quot;&gt;Build/Execute Shell&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/Downloads/packer build -var Build=$Build src/main/resources/packer.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There is 1 string parameter, called &lt;code class=&quot;highlighter-rouge&quot;&gt;Build&lt;/code&gt;. Please see the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.xml&lt;/code&gt; of this job in the References section below.&lt;/p&gt;

&lt;p&gt;Once run, this is the job output -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Downloads/packer build -var Build=$Build src/main/resources/packer.json
[hello-world-api-packer] $ /bin/sh -xe /Users/mpandit/Downloads/tomcat/temp/hudson108285086652597491.sh
+ /Users/mpandit/Downloads/packer build -var Build=1.0 src/main/resources/packer.json
[1;32mamazon-ebs output will be in this color.

amazon-ebs: Prevalidating AMI Name...
amazon-ebs: Found Image ID: ami-c58c1dd3
amazon-ebs: Creating temporary keypair: packer_58fed083-13d4-5740-0417-277163f775de
amazon-ebs: Creating temporary security group for this instance...
amazon-ebs: Authorizing access to port 22 the temporary security group...
amazon-ebs: Launching a source AWS instance...
amazon-ebs: Instance ID: i-0a0980f97a10aa4a0
amazon-ebs: Waiting for instance (i-0a0980f97a10aa4a0) to become ready...
amazon-ebs: Adding tags to source instance
amazon-ebs: Adding tag: &quot;Name&quot;: &quot;Packer Builder&quot;
amazon-ebs: Waiting for SSH to become available...
amazon-ebs: Connected to SSH!
amazon-ebs: Provisioning with shell script: /var/folders/vf/d0q4kjg964581kjjz4969dbny407x7/T/packer-shell299271769
amazon-ebs: Stopping the source instance...
amazon-ebs: Waiting for the instance to stop...
amazon-ebs: Creating the AMI: HelloWorld Build-1.0
amazon-ebs: AMI: ami-08fc671e
amazon-ebs: Waiting for AMI to become ready...
amazon-ebs: Terminating the source AWS instance...
amazon-ebs: Cleaning up any extra volumes...
amazon-ebs: No volumes to clean up, skipping
amazon-ebs: Deleting temporary security group...
amazon-ebs: Deleting temporary keypair...
'amazon-ebs' finished.

==&amp;gt; Builds finished. The artifacts of successful builds are:
--&amp;gt; amazon-ebs: AMIs were created:

us-east-1: ami-08fc671e

Finished: SUCCESS
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As we can see, the new AMI has been created with an ID &lt;code class=&quot;highlighter-rouge&quot;&gt;ami-08fc671e&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1&lt;/code&gt; region. Since this AMI is private, It is visible under &lt;code class=&quot;highlighter-rouge&quot;&gt;My AMIs&lt;/code&gt; on the AWS Console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/ami.png&quot; alt=&quot;AMI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Upon selecting this AMI and launching an instance in a public subnet with a security group allowing TCP traffic to port &lt;code class=&quot;highlighter-rouge&quot;&gt;8080&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0/0&lt;/code&gt;, we can see the Tomcat landing page.&lt;/p&gt;

&lt;p&gt;The resources below contain a fully functional pipeline - you’d need to configure &lt;a href=&quot;https://aws.amazon.com/cli/&quot; target=&quot;_blank_&quot;&gt;AWS CLI&lt;/a&gt; on the Jenkins node, and place &lt;code class=&quot;highlighter-rouge&quot;&gt;packer&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;/Downloads&lt;/code&gt; folder on the node. You may want to change these paths if your folder structure is different.&lt;/p&gt;

&lt;p&gt;Hope you found this tutorial useful, and can embark on the immutable deployment journey with Packer and AWS!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/lobster1234/helloworld-api&quot; target=&quot;_blank_&quot;&gt;Hello World API Github Project&lt;/a&gt;, which also has the &lt;code class=&quot;highlighter-rouge&quot;&gt;packer.json&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/resources&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gist.github.com/lobster1234/29b2b0cc8fea26e01a18d585ec97ffaf&quot; target=&quot;_blank_&quot;&gt;hello-world-api Jenkins Job&lt;/a&gt; to build the Hello World API Project and produce a WAR.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gist.github.com/lobster1234/c59b3ee2c558657c375ed4ec2b7310ab&quot; target=&quot;_blank_&quot;&gt;hello-world-api-packer Jenkins Job&lt;/a&gt; to create the AMI.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="packer" />
      
        <category term="ci-cd" />
      

      

      
        <summary type="html">In the world of MicroServices, immutable deployments is a highly recommended strategy. It demands that every release get a fresh environment, all the way down to the lowest level - or in case of AWS, the AMI. An AMI can bundle the base operating system, application server/runtime, scripts, agents, etc. along with a versioned application artifact. In the spirit of Infrastructure as Code, the AMI itself can be versioned as a simple json file, as we will see in this post. With respect to Automation, creation of the AMI can be triggered as a downstream Jenkins Job, after successful pre-release tests, and can then act as an upstream Job for the Infrastructure Build-out using CloudFormation, or Terraform. Once the infrastructure is built, it can be made live via blue/green, red/black or any other deployment plan. In this post, we will build an AMI that can be used to launch 100% identical instances in the infrastructure. We will use Packer to build the AMI, and create Jenkins Jobs to simulate a simplified, real-world CI/CD pipeline.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">AWS Lambda with Serverless Framework and Java/Maven - Part 3</title>
      
      <link href="https://lobster1234.github.io/2017/04/15/serverless-framework-api-gateway-lambda-proxy/" rel="alternate" type="text/html" title="AWS Lambda with Serverless Framework and Java/Maven - Part 3" />
      <published>2017-04-15T23:44:37-07:00</published>
      <updated>2017-04-15T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/04/15/serverless-framework-api-gateway-lambda-proxy</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/04/15/serverless-framework-api-gateway-lambda-proxy/">&lt;p&gt;In this final post of the series on Java-based Serverless Lambda API, we will invoke the Transactions API using the &lt;a href=&quot;https://aws.amazon.com/api-gateway/getting-started/&quot; target=&quot;_blank_&quot;&gt;Amazon API Gateway&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/serverless_blog.png&quot; alt=&quot;Serverless Blog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As Lambda is &lt;em&gt;evented&lt;/em&gt;, the HTTP endpoints exposed via the Amazon API Gateway will act as the event to trigger the function &lt;em&gt;synchronously&lt;/em&gt;. If you have been following the earlier two posts, by the end of this post you will be comfortable building RESTful APIs using AWS Lambda, Java, DynamoDB (or any persistence layer), API Gateway - all put together using simple configuration in &lt;a href=&quot;https://www.serverless.com&quot; target=&quot;_blank_&quot;&gt;Serverless Framework&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;set-up-serverless-framework&quot;&gt;Set up Serverless Framework&lt;/h2&gt;

&lt;p&gt;Please refer to &lt;a href=&quot;/2017/02/28/serverless-framework-java-maven-part-1&quot; target=&quot;_blank_&quot;&gt;AWS Lambda with Serverless Framework and Java/Maven - Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;build-and-deploy-the-transactions-api-lambdas&quot;&gt;Build and deploy the Transactions API Lambdas&lt;/h2&gt;

&lt;p&gt;Please refer to &lt;a href=&quot;/2017/04/12/serverless-framework-aws-apigateway/&quot; target=&quot;_blank_&quot;&gt;AWS Lambda with Serverless Framework and Java/Maven - Part 2&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-amazon-api-gateway&quot;&gt;Using Amazon API Gateway&lt;/h2&gt;

&lt;p&gt;Now that we have our two functions deployed, we can use API Gateway to trigger, or &lt;em&gt;invoke&lt;/em&gt; them. The Amazon API Gateway is a service that lets us expose many supported AWS offerings via RESTful API over HTTP. While in this case we will only use the API Gateway to expose and invoke our Lambda as an HTTP endpoint, this only covers a fraction of the API Gateway’s capability. I highly recommend reading the &lt;a href=&quot;http://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html&quot;&gt;Amazon API Gateway Developer Guide&lt;/a&gt; and this &lt;a href=&quot;https://www.youtube.com/watch?v=FcH8ovrNd9k&quot; target=&quot;_blank_&quot;&gt;video from AWS Summit&lt;/a&gt; to get familiar with full potential of the API Gateway product.&lt;/p&gt;

&lt;h3 id=&quot;lambda-proxy-integration&quot;&gt;Lambda Proxy Integration&lt;/h3&gt;

&lt;p&gt;We will be integrating the Lambdas in an integration pattern commonly referred to as &lt;a href=&quot;http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html#api-gateway-proxy-integration-types&quot; target=&quot;_blank_&quot;&gt;Lambda Proxy Integration&lt;/a&gt;, which means that the function(s) will get entire HTTP request &lt;em&gt;as-is&lt;/em&gt; in the form of the input payload. This payload contains the entire request including the headers, query parameters, path parameters, and the body, as documented &lt;a href=&quot;http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html#api-gateway-simple-proxy-for-Lambda-input-format&quot; target=&quot;_blank_&quot;&gt;here&lt;/a&gt;. While the function has full control on rendering the response body, code, and headers, the response is expected to be in a particular format, as documented &lt;a href=&quot;http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html#api-gateway-simple-proxy-for-Lambda-output-format&quot; target=&quot;_blank_&quot;&gt;here&lt;/a&gt;. Serverless Framework creates an &lt;code class=&quot;highlighter-rouge&quot;&gt;ApiGatewayResponse&lt;/code&gt; class as a part of the scaffolding which does exactly that. If you notice, the Transactions API code uses that class to marshal the response.&lt;/p&gt;

&lt;p&gt;By default, Serverless Framework uses the Lambda Proxy Integration for API Gateway.&lt;/p&gt;

&lt;h3 id=&quot;configuring-serverless-to-define-endpoints&quot;&gt;Configuring Serverless To Define Endpoints&lt;/h3&gt;

&lt;p&gt;The API endpoints will need to be defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt;, where we have defined the function resources, IAM permissions, and handlers among other things. The API Gateway configuration is a part of the function definition. Add the following under the &lt;code class=&quot;highlighter-rouge&quot;&gt;handler&lt;/code&gt; section for the two functions.&lt;/p&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /accounts/:account_id/transactions&lt;/code&gt; endpoint -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;get-transactions:
    handler: com.serverless.GetTransactionsHandler
    events:
      - http:
          path: /accounts/{account_id}/transactions
          method: get

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;POST /accounts/account_id/transactions&lt;/code&gt; endpoint -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;post-transaction:
  handler: com.serverless.PostTransactionsHandler
  events:
    - http:
        path: /accounts/{account_id}/transactions
        method: post
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lambda functions need an event to be triggered. The API Gateway invocation is one of the many events supported by AWS Lambda. Hence, we define &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; as the event under the function definition. Note that we can add more such events in the configuration, but for now we focus on HTTP invocation via the API Gateway. The endpoints will be &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;, so do not worry about calling the event as &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; here. Next, we provide more information about the &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; integration, namely the &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt;. Notice the path parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;account_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more details on the &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt; configuration for API Gateway, refer to Serverless Framework API Gateway documentation &lt;a href=&quot;https://serverless.com/framework/docs/providers/aws/events/apigateway/&quot; target=&quot;_blank_&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;deploying-the-api&quot;&gt;Deploying the API&lt;/h3&gt;

&lt;p&gt;Now that we have configured the event and the endpoint, we are all set to deploy the Serverless project. Before we do that, we need to attach the IAM policy to the &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless&lt;/code&gt; user in order to administer the API Gateway. Remember, we are using this user’s credentials for the Serverless Framework. This is different than the &lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html&quot; target=&quot;_blank_&quot;&gt;Lambda Execution Role&lt;/a&gt; that was configured in the last post.&lt;/p&gt;

&lt;p&gt;Log in to the AWS console, and click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Serverless&lt;/code&gt; group we had created in Part-1. Click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Attach Policy&lt;/code&gt;, Search for &lt;code class=&quot;highlighter-rouge&quot;&gt;APIGateway&lt;/code&gt;, and add the &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonAPIGatewayAdministrator&lt;/code&gt; policy to the group.&lt;/p&gt;

&lt;p&gt;The final set of policies should look like this -&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/serverless-group.png&quot; alt=&quot;IAM Group&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once done, we run the now familiar &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless deploy&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ serverless deploy
Serverless: Uploading CloudFormation file to S3...
Serverless: Uploading service .zip file to S3 (7.57 MB)...
Serverless: Updating Stack...
Serverless: Checking Stack update progress...
..........................................
Serverless: Stack update finished...
Service Information
service: transactions-api
stage: dev
region: us-east-1
api keys:
  None
endpoints:
  GET - https://aaaaaa.execute-api.us-east-1.amazonaws.com/dev/accounts/{account_id}/transactions
  POST - https://aaaaaa.execute-api.us-east-1.amazonaws.com/dev/accounts/{account_id}/transactions
functions:
  get-transactions: transactions-api-dev-get-transactions
  post-transaction: transactions-api-dev-post-transaction

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If we compare the output of this command to the one we got during deploying just the functions, we see that we get additional information in terms of the endpoints. I’ve masked the endpoint with &lt;code class=&quot;highlighter-rouge&quot;&gt;aaaaaa&lt;/code&gt;. This is referred to as an &lt;code class=&quot;highlighter-rouge&quot;&gt;appID&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;testing-the-endpoints&quot;&gt;Testing the Endpoints&lt;/h3&gt;

&lt;p&gt;We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; or any handy HTTP client to hit the two endpoints.&lt;/p&gt;

&lt;p&gt;First we &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; a transaction.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ curl -X POST https://aaaaaa.execute-api.us-east-1.amazonaws.com/dev/accounts/1234/transactions -d '{&quot;transaction_id&quot;:&quot;foo&quot;, &quot;amount&quot;: 20.50}'

{&quot;message&quot;:&quot;Transaction added successfully!&quot;,&quot;input&quot;:{&quot;resource&quot;:&quot;/accounts/{account_id}/transactions&quot;,&quot;path&quot;:&quot;/accounts/1234/transactions&quot;,&quot;httpMethod&quot;:&quot;POST&quot;,&quot;headers&quot;:{&quot;Accept&quot;:&quot;*/*&quot;,&quot;CloudFront-Forwarded-Proto&quot;:&quot;https&quot;,&quot;CloudFront-Is-Desktop-Viewer&quot;:&quot;true&quot;,&quot;CloudFront-Is-Mobile-Viewer&quot;:&quot;false&quot;,&quot;CloudFront-Is-SmartTV-Viewer&quot;:&quot;false&quot;,&quot;CloudFront-Is-Tablet-Viewer&quot;:&quot;false&quot;,&quot;CloudFront-Viewer-Country&quot;:&quot;US&quot;,&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;Host&quot;:&quot;aaaaaa.execute-api.us-east-1.amazonaws.com&quot;,&quot;User-Agent&quot;:&quot;curl/7.51.0&quot;,&quot;Via&quot;:&quot;1.1 939ea9d62ec616846d41b16cea0dc65b.cloudfront.net (CloudFront)&quot;,&quot;X-Amz-Cf-Id&quot;:&quot;YFSlfpQhMoyUk7xw1MwaHrC55oS-kL68gc9Of-hIa68bSr_61eK2Jw==&quot;,&quot;X-Amzn-Trace-Id&quot;:&quot;Root=1-58f327f0-5c9c884966463c313adaf2b5&quot;,&quot;X-Forwarded-For&quot;:&quot;73.111.62.170, 54.239.203.116&quot;,&quot;X-Forwarded-Port&quot;:&quot;443&quot;,&quot;X-Forwarded-Proto&quot;:&quot;https&quot;},&quot;queryStringParameters&quot;:null,&quot;pathParameters&quot;:{&quot;account_id&quot;:&quot;1234&quot;},&quot;stageVariables&quot;:null,&quot;requestContext&quot;:{&quot;accountId&quot;:&quot;123456789012&quot;,&quot;resourceId&quot;:&quot;6otyx5&quot;,&quot;stage&quot;:&quot;dev&quot;,&quot;requestId&quot;:&quot;bd4b3165-227c-11e7-baa4-61d7c2f92db9&quot;,&quot;identity&quot;:{&quot;cognitoIdentityPoolId&quot;:null,&quot;accountId&quot;:null,&quot;cognitoIdentityId&quot;:null,&quot;caller&quot;:null,&quot;apiKey&quot;:null,&quot;sourceIp&quot;:&quot;73.111.62.170&quot;,&quot;accessKey&quot;:null,&quot;cognitoAuthenticationType&quot;:null,&quot;cognitoAuthenticationProvider&quot;:null,&quot;userArn&quot;:null,&quot;userAgent&quot;:&quot;curl/7.51.0&quot;,&quot;user&quot;:null},&quot;resourcePath&quot;:&quot;/accounts/{account_id}/transactions&quot;,&quot;httpMethod&quot;:&quot;POST&quot;,&quot;apiId&quot;:&quot;aaaaaa&quot;},&quot;body&quot;:&quot;{\&quot;transaction_id\&quot;:\&quot;foo\&quot;, \&quot;amount\&quot;: 20.50}&quot;,&quot;isBase64Encoded&quot;:false}}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice the long response - this is because in the code for &lt;code class=&quot;highlighter-rouge&quot;&gt;PutTransactionsHandler.java&lt;/code&gt;, we’re adding the input as a part of the response (for troubleshooting). This input should also confirm our understanding of Lambda Proxy Integration. Formatted correctly, this is what the function got as a input from the AWS API Gateway -&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/accounts/{account_id}/transactions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/accounts/1234/transactions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;httpMethod&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;CloudFront-Forwarded-Proto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;CloudFront-Is-Desktop-Viewer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;CloudFront-Is-Mobile-Viewer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;CloudFront-Is-SmartTV-Viewer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;CloudFront-Is-Tablet-Viewer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;CloudFront-Viewer-Country&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;US&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;application/x-www-form-urlencoded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aaaaaa.execute-api.us-east-1.amazonaws.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;curl/7.51.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Via&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.1 939ea9d62ec616846d41b16cea0dc65b.cloudfront.net (CloudFront)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;X-Amz-Cf-Id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YFSlfpQhMoyUk7xw1MwaHrC55oS-kL68gc9Of-hIa68bSr_61eK2Jw==&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;X-Amzn-Trace-Id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Root=1-58f327f0-5c9c884966463c313adaf2b5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;X-Forwarded-For&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;73.111.62.170, 54.239.203.116&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;X-Forwarded-Port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;443&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;X-Forwarded-Proto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;queryStringParameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pathParameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;account_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;stageVariables&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;requestContext&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;accountId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;123456789012&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;resourceId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;6otyx5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;stage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;requestId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bd4b3165-227c-11e7-baa4-61d7c2f92db9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;identity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cognitoIdentityPoolId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;accountId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cognitoIdentityId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;caller&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;apiKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;sourceIp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;73.111.62.170&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;accessKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cognitoAuthenticationType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cognitoAuthenticationProvider&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;userArn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;userAgent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;curl/7.51.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;resourcePath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/accounts/{account_id}/transactions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;httpMethod&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;apiId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aaaaaa&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{\&quot;transaction_id\&quot;:\&quot;foo\&quot;, \&quot;amount\&quot;: 20.50}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;isBase64Encoded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lets &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; the transaction that has just posted, via &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; again.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ curl  https://aaaaaa.execute-api.us-east-1.amazonaws.com/dev/accounts/1234/transactions
[{&quot;account_id&quot;:&quot;1234&quot;,&quot;transaction_date&quot;:1492330481722,&quot;transaction_id&quot;:&quot;foo&quot;,&quot;amount&quot;:20.5}]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since we are not passing the &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; as a part of the output in &lt;code class=&quot;highlighter-rouge&quot;&gt;GetTransactionsHandler&lt;/code&gt;, we do not see the extra information. However, we do return the input in case of an exception, again, for troubleshooting purposes.&lt;/p&gt;

&lt;p&gt;You will also notice a delay (as much as 5-10 seconds) for the first invocation. This is called the &lt;code class=&quot;highlighter-rouge&quot;&gt;cold start&lt;/code&gt; time, and as developers we’ve to be aware of this. Specially with compiled languages like Java and C#, the start/boot time for a Lambda may exceed the SLA you may have - something to be mindful about.&lt;/p&gt;

&lt;p&gt;The more &lt;em&gt;infrequently&lt;/em&gt; the Lambda is invoked, &lt;em&gt;greater&lt;/em&gt; the cold start cost. There are plenty of &lt;em&gt;workarounds&lt;/em&gt; to address the cold start problem, I will cover some in a separate post as well.&lt;/p&gt;

&lt;h3 id=&quot;cleanup&quot;&gt;Cleanup&lt;/h3&gt;

&lt;p&gt;If you wish to remove the AWS infrastructure created as a part of this project, use the following command to do so. This will remove the IAM roles, any resources defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt;, and destroy the CloudFormation stack.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ serverless remove
Serverless: Getting all objects in S3 bucket...
Serverless: Removing objects in S3 bucket...
Serverless: Removing Stack...
Serverless: Checking Stack removal progress...
..................................
Serverless: Stack removal finished...

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this series, we have built what is essentially a scaled-down version of a Microservices based architecture. We built 2 Lambda functions, both of which can scale independent of each other. We learnt about the IAM permissions, and most importantly, about the Serverless Framework which let us focus on the functionality instead of worrying about deployment and management of the infrastructure like IAM, DynamoDB, API Gateway, S3, and the Lambda itself.&lt;/p&gt;

&lt;p&gt;This is nowhere close to what you’d imagine for a Production system, but it is my hope and confidence that the series has you more informed and familiar with Serverless Applictions in AWS.&lt;/p&gt;

&lt;p&gt;Please &lt;a href=&quot;https://www.twitter.com/lobster1234&quot; target=&quot;_blank_&quot;&gt;DM/tweet&lt;/a&gt; me your feedback, and thanks again for stopping by!&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="api-gateway" />
      
        <category term="lambda" />
      
        <category term="serverless" />
      
        <category term="dynamodb" />
      

      

      
        <summary type="html">In this final post of the series on Java-based Serverless Lambda API, we will invoke the Transactions API using the Amazon API Gateway. As Lambda is evented, the HTTP endpoints exposed via the Amazon API Gateway will act as the event to trigger the function synchronously. If you have been following the earlier two posts, by the end of this post you will be comfortable building RESTful APIs using AWS Lambda, Java, DynamoDB (or any persistence layer), API Gateway - all put together using simple configuration in Serverless Framework.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">AWS Lambda with Serverless Framework and Java/Maven - Part 2</title>
      
      <link href="https://lobster1234.github.io/2017/04/12/serverless-framework-aws-apigateway/" rel="alternate" type="text/html" title="AWS Lambda with Serverless Framework and Java/Maven - Part 2" />
      <published>2017-04-12T23:44:37-07:00</published>
      <updated>2017-04-12T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/04/12/serverless-framework-aws-apigateway</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/04/12/serverless-framework-aws-apigateway/">&lt;p&gt;We continue to build our &lt;a href=&quot;https://aws.amazon.com/lambda/&quot; target=&quot;_blank&quot;&gt;Lambda&lt;/a&gt; functions beyond the Hello World that we saw in the previous post. Our end goal is to build an API, and make it available via &lt;a href=&quot;https://aws.amazon.com/api-gateway/&quot; target=&quot;_blank&quot;&gt;Amazon API Gateway&lt;/a&gt;. We will build the foundation of our Lambda-API-Gateway set up in this tutorial. We will also set up &lt;a href=&quot;https://aws.amazon.com/dynamodb/&quot; target=&quot;_blank&quot;&gt;DynamoDB&lt;/a&gt;. Feel free to replace DynamoDB with any persistance layer, or even a mock.&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;The source code listed in this this post can be found &lt;a href=&quot;https://github.com/lobster1234/transactions-api&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;set-up-serverless-framework&quot;&gt;Set up Serverless Framework&lt;/h2&gt;

&lt;p&gt;Please refer to &lt;a href=&quot;/2017/02/28/serverless-framework-java-maven-part-1&quot; target=&quot;_blank&quot;&gt;AWS Lambda with Serverless Framework and Java/Maven - Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once serverless framework is set up, come back here to build a new project.&lt;/p&gt;

&lt;h2 id=&quot;the-api&quot;&gt;The API&lt;/h2&gt;

&lt;p&gt;For the sake of simplicity, here is the schema - There are payment accounts, every account has transactions, and every transaction has an amount, a transaction ID, and a transaction date.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The focus is here on simplicity of the example, as we focus on the AWS framework, deployment, and management.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is the API Schema -&lt;/p&gt;

&lt;p&gt;POST &lt;code class=&quot;highlighter-rouge&quot;&gt;/accounts/:account_id/transactions&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;transaction_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4f9a6c39-f3ba-4b62-9e30-ab408dd43933&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;22.44&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;GET &lt;code class=&quot;highlighter-rouge&quot;&gt;/accounts/:account_id/transactions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The date is UTC milliseconds, as we are not bothering with dateformats and conversions here.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;account_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;transaction_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1492160332168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;transaction_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4f9a6c39-f3ba-4b62-9e30-ab408dd43933&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;account_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;transaction_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1492160332122&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;transaction_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a411e6bd-941a-4ec9-9ff6-5fe816759256&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;100.20&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;create-a-serverless-project&quot;&gt;Create a serverless project&lt;/h2&gt;

&lt;p&gt;Start by creating a new Serverless project, or you may re-use the one created during the Part-1 of this series.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ mkdir transactions-api
bash-3.2$ serverless create -t aws-java-maven -n transactions-api
Serverless: Generating boilerplate...
 _______                             __
|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v1.10.0
 -------'

Serverless: Successfully generated boilerplate for template: &quot;aws-java-maven&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;update-the-pom-and-yaml&quot;&gt;Update the POM and YAML&lt;/h2&gt;

&lt;p&gt;Since serverless creates a project called “hello”, lets go modify it to sound a bit more…functional.&lt;/p&gt;

&lt;p&gt;First, change the &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.serverless&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;nt&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;dev&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.serverless&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;transactions-api&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;nt&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;dev&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;transactions-api&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Also, since the project will use DynamoDB, add the AWS Java DynamoDB SDK dependency in &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add the below just before &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.amazonaws&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;aws-java-sdk-dynamodb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.11.119&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, in &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt;, we describe the lambda handlers, and the deployment artifact name. Change the following&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# you can add packaging information here
package:
  artifact: target/hello-dev.jar

functions:
  hello:
    handler: com.serverless.Handler
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# you can add packaging information here
package:
  artifact: target/transactions-api-dev.jar

functions:
  get-transactions:
    handler: com.serverless.GetTransactionsHandler
  post-transaction:
    handler: com.serverless.PostTransactionsHandler
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;configure-dynamodb-resource-and-lambda-role&quot;&gt;Configure DynamoDB Resource and Lambda Role&lt;/h2&gt;

&lt;p&gt;Read more on DynamoDB &lt;a href=&quot;http://docs.aws.amazon.com/amazondynamodb/latest/gettingstartedguide/Welcome.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Since we’re also creating a DynamoDB Table, lets have serverless create it for us. We will also need to set permissions for our lambda function in order to access this table (&lt;em&gt;execution role&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;More details on Lambda Permissions Model &lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Serverless takes care of creating a basic lambda execution role, however, it only has CloudWatch Log permissions. So let us add permissions for DynamoDB as well.&lt;/p&gt;

&lt;p&gt;To do so, add the following to &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt; above the commented out section that says &lt;code class=&quot;highlighter-rouge&quot;&gt;# you can add statements to the Lambda function's IAM Role here&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make sure this is under the &lt;code class=&quot;highlighter-rouge&quot;&gt;provider&lt;/code&gt; section, so indent accordingly.&lt;/strong&gt;. Refer to the code in the github repo to verify.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iamRoleStatements:
   - Effect: &quot;Allow&quot;
     Action:
       - &quot;dynamodb:*&quot;
     Resource: &quot;*&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To create the table, at the bottom of the &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt;, add this CloudFormation section. This represents the schema. Since the serverless user (created in Part-1) in IAM has CloudFormation permissions across all resources, the framework will be able to create this resource via CloudFormation. As you can see, we are using &lt;code class=&quot;highlighter-rouge&quot;&gt;account_id&lt;/code&gt; as the &lt;code class=&quot;highlighter-rouge&quot;&gt;HASH&lt;/code&gt; key, and &lt;code class=&quot;highlighter-rouge&quot;&gt;transaction_date&lt;/code&gt; as our &lt;code class=&quot;highlighter-rouge&quot;&gt;RANGE&lt;/code&gt; key. Other attributes like &lt;code class=&quot;highlighter-rouge&quot;&gt;transaction_id&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;amount&lt;/code&gt; do not need to be declared.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resources:
  Resources:
    transactionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: transactions_table
        AttributeDefinitions:
          - AttributeName: account_id
            AttributeType: S
          - AttributeName: transaction_date
            AttributeType: S
        KeySchema:
          - AttributeName: account_id
            KeyType: HASH
          - AttributeName: transaction_date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;now-we-code&quot;&gt;Now we code!&lt;/h2&gt;

&lt;p&gt;I use &lt;a href=&quot;https://www.jetbrains.com/idea/&quot; target=&quot;_blank&quot;&gt;IntelliJ&lt;/a&gt;, but any IDE that works with a Maven project will do. In IntelliJ, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Open&lt;/code&gt;, then select the &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; and pick &lt;code class=&quot;highlighter-rouge&quot;&gt;Open as Project&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since there are declared 2 handlers &lt;code class=&quot;highlighter-rouge&quot;&gt;GetTransactionsHandler.java&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PostTransactionsHandler.java&lt;/code&gt;, copy the auto-generated &lt;code class=&quot;highlighter-rouge&quot;&gt;Hander.java&lt;/code&gt; as those two new files. There are now 3 Java files under &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/java/com/serverless&lt;/code&gt;. We will modify the copied files to build our API.&lt;/p&gt;

&lt;h3 id=&quot;dynamodb-pojo&quot;&gt;DynamoDB POJO&lt;/h3&gt;

&lt;p&gt;Lets create the POJO we will need for our API. We use &lt;code class=&quot;highlighter-rouge&quot;&gt;com.serverless.data&lt;/code&gt; package to hold it. Please note that we use &lt;a href=&quot;http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBMapper.Annotations.html&quot; target=&quot;_blank&quot;&gt;DynamoDB annotations&lt;/a&gt; in this POJO to make our life easier.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Transaction.java&lt;/code&gt; - This POJO represents the DynamoDB Item.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serverless&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@DynamoDBTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;transactions_table&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Transaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@DynamoDBHashKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;account_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Hash Key&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@DynamoDBRangeKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;transaction_date&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Range Key&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@DynamoDBAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;transaction_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@DynamoDBAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAccount_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAccount_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;account_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTransaction_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTransaction_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transaction_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTransaction_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTransaction_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transaction_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;dynamodb-adapter&quot;&gt;DynamoDB Adapter&lt;/h3&gt;

&lt;p&gt;Since our API uses DynamoDB, let us create a class to handle all DynamoDB work. Lets call it &lt;code class=&quot;highlighter-rouge&quot;&gt;DynamoDBAdapter&lt;/code&gt; and put it under &lt;code class=&quot;highlighter-rouge&quot;&gt;com.serverless.db&lt;/code&gt; package. We will make it a quick and dirty singleton. This provides 2 simple methods - to get transactions, and to store transactions. It uses &lt;a href=&quot;http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBMapper.Methods.html&quot; target=&quot;_blank&quot;&gt;DynamoDBMapper&lt;/a&gt; Class from AWS Java SDK.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serverless&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.client.builder.AwsClientBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.dynamodbv2.AmazonDynamoDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.dynamodbv2.model.AttributeValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.dynamodbv2.model.CreateTableRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.dynamodbv2.model.CreateTableResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.serverless.data.Transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.log4j.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DynamoDBAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamoDBAdapter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamoDBAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmazonDynamoDB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DynamoDBAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmazonDynamoDBClientBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withEndpointConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AwsClientBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EndpointConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://dynamodb.us-east-1.amazonaws.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;us-east-1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Created DynamoDB client&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamoDBAdapter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTransactions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DynamoDBMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamoDBMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AttributeValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:val1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AttributeValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accountId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DynamoDBQueryExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryExpression&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamoDBQueryExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withKeyConditionExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;account_id = :val1 &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withExpressionAttributeValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;putTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DynamoDBMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamoDBMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;lambda-function-handlers&quot;&gt;Lambda Function Handlers&lt;/h3&gt;

&lt;p&gt;Now we get to the fun part - writing our lambda handler. We had copied the Handler that Serverless created for us. Let us start there.&lt;/p&gt;

&lt;p&gt;Referring to AWS Documentation, we can extract request parameters from the request that the API Gateway sends us “as is”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html#api-gateway-simple-proxy-for-lambda-output-format&quot; target=&quot;_blank&quot;&gt;API Gateway Proxy For Lambda I/O format&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need to extract our path parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;account_id&lt;/code&gt; for the POST (and GET) request from &lt;code class=&quot;highlighter-rouge&quot;&gt;pathParameters&lt;/code&gt; element in this JSON.&lt;/p&gt;

&lt;p&gt;This part is a little tricky, as some elements are strings to be parsed as JSONs, others are serialized HashMaps. Please be sure to read the documentation linked above.&lt;/p&gt;

&lt;p&gt;Here is the code for &lt;code class=&quot;highlighter-rouge&quot;&gt;PostTransactionsHandler&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;handleRequest&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiGatewayResponse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;received: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//lets get our path parameter for account_id&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pathParameters&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;account_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAccount_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accountId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;JsonNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transaction_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTransaction_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTransaction_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;DynamoDBAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failure putting transaction&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiGatewayResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Powered-By&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AWS Lambda &amp;amp; serverless&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Transaction added successfully!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiGatewayResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Powered-By&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AWS Lambda &amp;amp; serverless&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the code above, we’re getting the &lt;code class=&quot;highlighter-rouge&quot;&gt;pathParameters&lt;/code&gt; as a &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; and extracting &lt;code class=&quot;highlighter-rouge&quot;&gt;account_id&lt;/code&gt; from it. Then we create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Transaction&lt;/code&gt; object and populate it, and call the &lt;code class=&quot;highlighter-rouge&quot;&gt;DynamoDBAdapter&lt;/code&gt; to persist the object. We parse the body using Jackson, which is already available to us via AWS Java SDK.&lt;/p&gt;

&lt;p&gt;Similarly, we code our &lt;code class=&quot;highlighter-rouge&quot;&gt;GetTransactionsHandler&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;handleRequest&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiGatewayResponse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;received: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pathParameters&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;account_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Getting transactions for &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamoDBAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransactions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accountId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failure getting transactions&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiGatewayResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Powered-By&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AWS Lambda &amp;amp; serverless&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiGatewayResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Powered-By&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AWS Lambda &amp;amp; serverless&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this case, we’re calling &lt;code class=&quot;highlighter-rouge&quot;&gt;DynamoDBAdapter&lt;/code&gt; to get the transactions for an account, and passing it as response body. We are not converting it to JSON or anything, hence you notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;transaction_date&lt;/code&gt; as a &lt;code class=&quot;highlighter-rouge&quot;&gt;long&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are done with coding now. Lets deploy this!&lt;/p&gt;

&lt;h2 id=&quot;deploying-the-two-lambda-functions&quot;&gt;Deploying the two lambda functions&lt;/h2&gt;

&lt;p&gt;This is where Serverless shines - it takes care of uploading the artifact, creating the AWS resources and IAM roles, CloudWatch Logs, etc.&lt;/p&gt;

&lt;p&gt;Build the jar, which will be the deployable artifact.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ mvn clean install
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building transactions-api dev
[INFO] ------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.099 s
[INFO] Finished at: 2017-04-14T02:44:01-07:00
[INFO] Final Memory: 39M/224M
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, we go ahead deploy.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ serverless deploy
Serverless: Creating Stack...
Serverless: Checking Stack create progress...
.....
Serverless: Stack create finished...
Serverless: Uploading CloudFormation file to S3...
Serverless: Uploading service .zip file to S3 (7.57 MB)...
Serverless: Updating Stack...
Serverless: Checking Stack update progress...
...........................
Serverless: Stack update finished...
Service Information
service: transactions-api
stage: dev
region: us-east-1
api keys:
  None
endpoints:
  None
functions:
  get-transactions: transactions-api-dev-get-transactions
  post-transaction: transactions-api-dev-post-transaction
bash-3.2$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you want to dive deeper, check out the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;.serverless&lt;/code&gt; folder. This has 2 CloudFormation templates that did the heavy lifting via Serverless Framework.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ tree .serverless/
.serverless/
├── cloudformation-template-create-stack.json
└── cloudformation-template-update-stack.json

0 directories, 2 files
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt; templte creates the S3 bucket to upload the artifact, and &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; template takes care of everything else. More details on CloudFormation &lt;a href=&quot;http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/GettingStarted.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Unfortunately invoking these 2 functions will not be straightforward via CLI, as they expects the input request as a &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ serverless invoke -f get-transactions
{
    &quot;statusCode&quot;: 500,
    &quot;body&quot;: &quot;{\&quot;message\&quot;:\&quot;Failure getting transactions\&quot;,\&quot;input\&quot;:{}}&quot;,
    &quot;headers&quot;: {
        &quot;X-Powered-By&quot;: &quot;AWS Lambda &amp;amp; serverless&quot;
    },
    &quot;isBase64Encoded&quot;: false
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Feel free to log into the AWS console, and look at the lambda just set up under Lambda section. Also, take a look at CloudFormation stacks. We can test it by creating a body similar to the AWS Lambda Proxy request from the documentation link above in the Console.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;/2017/04/15/serverless-framework-api-gateway-lambda-proxy/&quot; target=&quot;_blank_&quot;&gt;next and final part&lt;/a&gt;, we will wire up these 2 lambda functions to act as API endpoints.&lt;/p&gt;

&lt;p&gt;Thanks for staying with me so far!&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="api-gateway" />
      
        <category term="lambda" />
      
        <category term="serverless" />
      
        <category term="dynamodb" />
      

      

      
        <summary type="html">We continue to build our Lambda functions beyond the Hello World that we saw in the previous post. Our end goal is to build an API, and make it available via Amazon API Gateway. We will build the foundation of our Lambda-API-Gateway set up in this tutorial. We will also set up DynamoDB. Feel free to replace DynamoDB with any persistance layer, or even a mock.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Fish and iTerm2</title>
      
      <link href="https://lobster1234.github.io/2017/04/08/setting-up-fish-and-iterm2/" rel="alternate" type="text/html" title="Fish and iTerm2" />
      <published>2017-04-08T04:44:37-07:00</published>
      <updated>2017-04-08T04:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/04/08/setting-up-fish-and-iterm2</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/04/08/setting-up-fish-and-iterm2/">&lt;p&gt;So, out of boredom, I decided to upgrade my shell and terminal to something closer to 2017, instead of living in the early 90s. Clearly I’e been using &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; all these years - mostly on Ubuntu and lately on OSX. But I’ve always been &lt;em&gt;lazy and complacent&lt;/em&gt; with the terminal. I’ve always wanted to set up &lt;a href=&quot;http://fishshell.com&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt;&lt;/a&gt; - &lt;strong&gt;Friendly Interactive SHell&lt;/strong&gt;. for it’s git integration, and very rich interaction. Sure, all of this can be done on &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt; but I hate configuration, and combing hundreds of git repos for &lt;code class=&quot;highlighter-rouge&quot;&gt;bashfiles&lt;/code&gt; and find what works for me.&lt;/p&gt;

&lt;p&gt;While at &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt;, I also decided to upgrade the default Mac &lt;code class=&quot;highlighter-rouge&quot;&gt;terminal&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;iTerm2&lt;/code&gt;. This led me to a journey through installing fonts all the way to picking up the theme that works for me. But again, no configuration to mess with.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h3 id=&quot;installing-fish&quot;&gt;Installing fish&lt;/h3&gt;

&lt;p&gt;Since I have brew, I was able to simply do this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  bash-3.2$ brew install fish
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you do not have brew, head over to &lt;a href=&quot;http://fishshell.com&quot; target=&quot;_blank&quot;&gt;fishshell.com&lt;/a&gt; for instructions on setting it up. They have MacPorts, Installer, and an executable.&lt;/p&gt;

&lt;p&gt;Once installed, the default theme supports git repositories, in that, the prompt indicates the local repository state, has nice syntax highlighting on the command line, and typical things you’d expect from the shell of the 21st century.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/fish-1.png&quot; alt=&quot;Fish-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the prompt change, as well as a timestamp show up to the right of the window.&lt;/p&gt;

&lt;p&gt;If you wish to make fish your default shell, add add &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/fish&lt;/code&gt; at the very top of &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/shells&lt;/code&gt;, and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;chsh -s /usr/local/bin/fish&lt;/code&gt;. If not, then you can always type &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;installing-omf&quot;&gt;Installing omf&lt;/h3&gt;

&lt;p&gt;Given the richness of fish with themes and plugins, it’s best to use &lt;code class=&quot;highlighter-rouge&quot;&gt;omf&lt;/code&gt; - &lt;a href=&quot;https://github.com/oh-my-fish/oh-my-fish&quot; target=&quot;_blank&quot;&gt;Oh My Fish&lt;/a&gt;, which is more or less a package manager for fish.&lt;/p&gt;

&lt;p&gt;To install &lt;code class=&quot;highlighter-rouge&quot;&gt;omf&lt;/code&gt; -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ curl -L https://get.oh-my.fish | fish
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once &lt;code class=&quot;highlighter-rouge&quot;&gt;omf&lt;/code&gt; is installed, checking out themes etc. becomes a breeze. To do so, type &lt;code class=&quot;highlighter-rouge&quot;&gt;omf&lt;/code&gt; on the prompt to see the options. Typing &lt;code class=&quot;highlighter-rouge&quot;&gt;omf theme&lt;/code&gt; will show a big list, and in order to see what these themes look like, head over &lt;a href=&quot;https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; to preview them.&lt;/p&gt;

&lt;p&gt;I liked &lt;code class=&quot;highlighter-rouge&quot;&gt;bobthefish&lt;/code&gt;, and installed it like so -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;⋊&amp;gt; ~/work omf install bobthefish                                          05:04:17
Updating https://github.com/oh-my-fish/packages-main master... Done!
Installing package bobthefish
✔ bobthefish successfully installed.
 ~/work                                          773ms   Sat Apr  8 05:07:06 2017
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can always switch back to &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;omf theme default&lt;/code&gt;. You can install many themes and switch back and forth between them till you’re comfortable with one of them.&lt;/p&gt;

&lt;p&gt;However, this theme (and many others) uses fonts that would need to be installed.&lt;/p&gt;

&lt;h3 id=&quot;installing-powerline-patched-fonts&quot;&gt;Installing Powerline Patched Fonts&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/work  git clone https://github.com/powerline/fonts.git
~/work  cd fonts                               
~/w/fonts   master  ./install.sh
Copying fonts...
Powerline fonts installed to /Users/mpandit/Library/Fonts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Feel free to remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;fonts&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&quot;installing-iterm2&quot;&gt;Installing iTerm2&lt;/h3&gt;

&lt;p&gt;Downloaded and installed &lt;a href=&quot;https://www.iterm2.com/&quot; target=&quot;_blank&quot;&gt;iTerm2&lt;/a&gt;, which is super simple to do.&lt;/p&gt;

&lt;p&gt;Take a look at the Font Book, and pick the powerline font of your choice. I like &lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu Mono&lt;/code&gt;. You can type &lt;code class=&quot;highlighter-rouge&quot;&gt;powerline&lt;/code&gt; in the little search textbox in Font Book to shorten the list. Once picked, set the font here -&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/fish-2.png&quot; alt=&quot;Fish-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Restart iTerm2, and you should be all set!&lt;/p&gt;

&lt;h3 id=&quot;github-integration&quot;&gt;Github integration&lt;/h3&gt;

&lt;p&gt;This image shows how the prompt changes as we make simple changes to a local git repo. I am using &lt;code class=&quot;highlighter-rouge&quot;&gt;bobthefish&lt;/code&gt; theme. See the theme details on how the prompt indicates various states like locally committed but un-pushed changes, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/fish-3.png&quot; alt=&quot;Fish-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it is super helpful, with no configuration to get this going. This to me is one of the most useful and powerful features of &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that you have &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;omf&lt;/code&gt; set up, play with the many options and if you have never used it before, you’ll be surprised how modern and developer friendly this set up is. The depth of autocomplete going beyond just file names, auto-suggestion, history navigation, and syntax coloring makes working on the terminal so much productive and painless!&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="shell" />
      

      

      
        <summary type="html">So, out of boredom, I decided to upgrade my shell and terminal to something closer to 2017, instead of living in the early 90s. Clearly I’e been using bash all these years - mostly on Ubuntu and lately on OSX. But I’ve always been lazy and complacent with the terminal. I’ve always wanted to set up fish - Friendly Interactive SHell. for it’s git integration, and very rich interaction. Sure, all of this can be done on bash or zsh but I hate configuration, and combing hundreds of git repos for bashfiles and find what works for me. While at fish, I also decided to upgrade the default Mac terminal to iTerm2. This led me to a journey through installing fonts all the way to picking up the theme that works for me. But again, no configuration to mess with.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Using localstack with AWS CLI</title>
      
      <link href="https://lobster1234.github.io/2017/04/05/working-with-localstack-command-line/" rel="alternate" type="text/html" title="Using localstack with AWS CLI" />
      <published>2017-04-05T23:44:37-07:00</published>
      <updated>2017-04-05T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/04/05/working-with-localstack-command-line</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/04/05/working-with-localstack-command-line/">&lt;p&gt;&lt;a href=&quot;https://github.com/atlassian/localstack&quot; target=&quot;_blank&quot;&gt;Localstack&lt;/a&gt; is a really useful project by Atlassian, which allows for local development using the AWS cloud stack. In other words, it is a Mock AWS Stack with support for many of the infrastructure commonly coded against. This post is a quick and handy gist of using AWS command line to work with localstack for S3, SNS, SQS, and DynamoDB.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;setting-up-localstack&quot;&gt;Setting up localstack&lt;/h1&gt;

&lt;p&gt;Assuming you’re using an OSX/Linux base, check if you have &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;python 2.x&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;maven&lt;/code&gt; installed and in path.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
bash-3.2$ git clone https://github.com/atlassian/localstack.git
bash-3.2$ cd localstack
bash-3.2$ make clean install test
bash-3.2$ make infra
. .venv/bin/activate; exec localstack/mock/infra.py
Starting local dev environment. CTRL-C to quit.
Starting local Elasticsearch (port 4571)...
Starting mock ES service (port 4578)...
Starting mock S3 server (port 4572)...
Starting mock SNS server (port 4575)...
Starting mock SQS server (port 4576)...
Starting mock API Gateway (port 4567)...
Starting mock DynamoDB (port 4569)...
Starting mock DynamoDB Streams (port 4570)...
Starting mock Firehose (port 4573)...
Starting mock Lambda (port 4574)...
Starting mock Kinesis (port 4568)...
Starting mock Redshift server (port 4577)...
Ready.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Optionally, start the web interface as well. It is not really feature rich at the moment but something to check out.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ make install-web
bash-3.2$ make web
(. .venv/bin/activate; bin/localstack web --port=8080)
 * Running on http://0.0.0.0:8080/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 272-228-949
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Hit up http://localhost:8080 to see the console.&lt;/p&gt;

&lt;h2 id=&quot;s3&quot;&gt;S3&lt;/h2&gt;

&lt;h3 id=&quot;create-a-bucket&quot;&gt;Create a bucket&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4572 s3 mb s3://mytestbucket
make_bucket: mytestbucket

bash-3.2$ aws --endpoint-url=http://localhost:4572 s3 ls
2006-02-03 08:45:09 mytestbucket
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;copy-a-file-over&quot;&gt;Copy a file over&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4572 s3 cp /tmp/mongo.log s3://mytestbucket
upload: ../../../../tmp/mongo.log to s3://mytestbucket/mongo.log

bash-3.2$ aws --endpoint-url=http://localhost:4572 s3 ls s3://mytestbucket
2017-04-05 01:18:39       4789 mongo.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;delete-this-file&quot;&gt;Delete this file&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4572 s3 rm s3://mytestbucket/mongo.log
delete: s3://mytestbucket/mongo.log

bash-3.2$ aws --endpoint-url=http://localhost:4572 s3 ls s3://mytestbucket

bash-3.2$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;sns&quot;&gt;SNS&lt;/h2&gt;

&lt;h3 id=&quot;create-a-topic&quot;&gt;Create a topic&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4575 sns list-topics
{
    &quot;Topics&quot;: []
}

bash-3.2$ aws --endpoint-url=http://localhost:4575 sns create-topic --name test-topic
{
    &quot;TopicArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic&quot;
}
bash-3.2$ aws --endpoint-url=http://localhost:4575 sns list-topics
{
    &quot;Topics&quot;: [
        {
            &quot;TopicArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic&quot;
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;subscribe-to-the-topic&quot;&gt;Subscribe to the topic&lt;/h3&gt;

&lt;p&gt;(use any random email)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4575 sns subscribe --topic-arn arn:aws:sns:us-east-1:123456789012:test-topic --protocol email --notification-endpoint pibehatin@1rentcar.top
{
    &quot;SubscriptionArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic:5aacffbe-ccf7-40d5-be97-c55af7392935&quot;
}

bash-3.2$ aws --endpoint-url=http://localhost:4575 sns list-subscriptions
{
    &quot;Subscriptions&quot;: [
        {
            &quot;Owner&quot;: &quot;&quot;,
            &quot;Endpoint&quot;: &quot;pibehatin@1rentcar.top&quot;,
            &quot;Protocol&quot;: &quot;email&quot;,
            &quot;TopicArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic&quot;,
            &quot;SubscriptionArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic:5aacffbe-ccf7-40d5-be97-c55af7392935&quot;
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;publish-to-this-topic&quot;&gt;Publish to this topic&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4575 sns publish  --topic-arn arn:aws:sns:us-east-1:123456789012:test-topic --message 'Test Message!'
{
    &quot;MessageId&quot;: &quot;n/a&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;sqs&quot;&gt;SQS&lt;/h2&gt;

&lt;h3 id=&quot;create-a-queue&quot;&gt;Create a Queue&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4576 sqs create-queue --queue-name test_queue
{
    &quot;QueueUrl&quot;: &quot;http://localhost:4576/123456789012/test_queue&quot;
}

bash-3.2$ aws --endpoint-url=http://localhost:4576 sqs list-queues
{
    &quot;QueueUrls&quot;: [
        &quot;http://localhost:4576/123456789012/test_queue&quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;send-a-message-to-this-queue&quot;&gt;Send a message to this queue&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$  aws --endpoint-url=http://localhost:4576 sqs send-message --queue-url http://localhost:4576/123456789012/test_queue --message-body 'Test Message!'
{
    &quot;MD5OfMessageBody&quot;: &quot;df69267381a60e476252c989db9ac8ad&quot;,
    &quot;MessageId&quot;: &quot;a6ed436b-076a-0d8d-73e1-cc3291a19c28&quot;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;receive-the-message-from-this-queue&quot;&gt;Receive the message from this queue&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$  aws --endpoint-url=http://localhost:4576 sqs receive-message --queue-url http://localhost:4576/123456789012/test_queue
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;Test Message!&quot;,
            &quot;Attributes&quot;: {
                &quot;ApproximateFirstReceiveTimestamp&quot;: &quot;1.49138149959e+12&quot;,
                &quot;SenderId&quot;: &quot;AIDAIT2UOQQY3AUEKVGXU&quot;,
                &quot;ApproximateReceiveCount&quot;: &quot;1&quot;,
                &quot;SentTimestamp&quot;: &quot;1.49138142195e+12&quot;
            },
            &quot;ReceiptHandle&quot;: &quot;xuazrzyjcgpgzpzlxlyxmujbgzfkswixjkywshturlylrfwzyccutlumitgduyzddwkaoypcmswlkxrrjghdyztfewrpmkxdufptyketrfumwzicmggogdbaucwztvorplibccpfhirmalnixvfbklzrgncpisdsiuiajqwefxueqhuygfibmgqwx&quot;,
            &quot;MD5OfBody&quot;: &quot;df69267381a60e476252c989db9ac8ad&quot;,
            &quot;MessageId&quot;: &quot;a6ed436b-076a-0d8d-73e1-cc3291a19c28&quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you do this many times, the process seems to sleep. May be to simulate the message visibility? Here are 2 consecutive runs.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;real	0m15.185s
user	0m0.291s
sys	0m0.158s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;real	0m26.829s
user	0m0.291s
sys	0m0.167s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I have reported this issue here - &lt;a href=&quot;https://github.com/atlassian/localstack/issues/52&quot; target=&quot;_blank&quot;&gt;https://github.com/atlassian/localstack/issues/52&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;delete-this-message&quot;&gt;Delete this message&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4576 sqs delete-message --queue-url http://localhost:4576/123456789012/test_queue --receipt-handle 'yugzzebhnnksfuvbjlibfnlejyqbulxqfegsnrgafjeabxaatxbmeiyfkfliedslohseosgjwkxhdzllpudhccjhorpkwbgjgyzeyzjwkfvqflathnvsmugeyevbqmfyqanuxetvdhcetseuwzrqpexogzggznndxmbqowtlalvqtffntdahhihel'

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;dynamodb&quot;&gt;DynamoDB&lt;/h2&gt;
&lt;h3 id=&quot;create-a-table&quot;&gt;Create a table&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4569 dynamodb create-table --table-name test_table  --attribute-definitions AttributeName=first,AttributeType=S AttributeName=second,AttributeType=N --key-schema AttributeName=first,KeyType=HASH AttributeName=second,KeyType=RANGE --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
{
   &quot;TableDescription&quot;: {
       &quot;TableArn&quot;: &quot;arn:aws:dynamodb:us-east-1:000000000000:table/test_table&quot;,
       &quot;AttributeDefinitions&quot;: [
           {
               &quot;AttributeName&quot;: &quot;first&quot;,
               &quot;AttributeType&quot;: &quot;S&quot;
           },
           {
               &quot;AttributeName&quot;: &quot;second&quot;,
               &quot;AttributeType&quot;: &quot;N&quot;
           }
       ],
       &quot;ProvisionedThroughput&quot;: {
           &quot;NumberOfDecreasesToday&quot;: 0,
           &quot;WriteCapacityUnits&quot;: 5,
           &quot;ReadCapacityUnits&quot;: 5
       },
       &quot;TableSizeBytes&quot;: 0,
       &quot;TableName&quot;: &quot;test_table&quot;,
       &quot;TableStatus&quot;: &quot;CREATING&quot;,
       &quot;KeySchema&quot;: [
           {
               &quot;KeyType&quot;: &quot;HASH&quot;,
               &quot;AttributeName&quot;: &quot;first&quot;
           },
           {
               &quot;KeyType&quot;: &quot;RANGE&quot;,
               &quot;AttributeName&quot;: &quot;second&quot;
           }
       ],
       &quot;ItemCount&quot;: 0,
       &quot;CreationDateTime&quot;: 1491818083.66
   }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can verify our created table -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4569 dynamodb list-tables
{
    &quot;TableNames&quot;: [
        &quot;test_table&quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and describe it too&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4569 dynamodb describe-table --table-name test_table
{
   &quot;Table&quot;: {
       &quot;TableArn&quot;: &quot;arn:aws:dynamodb:us-east-1:000000000000:table/test_table&quot;,
       &quot;AttributeDefinitions&quot;: [
           {
               &quot;AttributeName&quot;: &quot;first&quot;,
               &quot;AttributeType&quot;: &quot;S&quot;
           },
           {
               &quot;AttributeName&quot;: &quot;second&quot;,
               &quot;AttributeType&quot;: &quot;N&quot;
           }
       ],
       &quot;ProvisionedThroughput&quot;: {
           &quot;NumberOfDecreasesToday&quot;: 0,
           &quot;WriteCapacityUnits&quot;: 5,
           &quot;ReadCapacityUnits&quot;: 5
       },
       &quot;TableSizeBytes&quot;: 0,
       &quot;TableName&quot;: &quot;test_table&quot;,
       &quot;TableStatus&quot;: &quot;ACTIVE&quot;,
       &quot;KeySchema&quot;: [
           {
               &quot;KeyType&quot;: &quot;HASH&quot;,
               &quot;AttributeName&quot;: &quot;first&quot;
           },
           {
               &quot;KeyType&quot;: &quot;RANGE&quot;,
               &quot;AttributeName&quot;: &quot;second&quot;
           }
       ],
       &quot;ItemCount&quot;: 0,
       &quot;CreationDateTime&quot;: 1491818083.66
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;put-item&quot;&gt;Put item&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4569 dynamodb put-item --table-name test_table  --item '{&quot;first&quot;:{&quot;S&quot;:&quot;Jack&quot;},&quot;second&quot;:{&quot;N&quot;:&quot;42&quot;}}'

bash-3.2$ aws --endpoint-url=http://localhost:4569 dynamodb put-item --table-name test_table  --item '{&quot;first&quot;:{&quot;S&quot;:&quot;Manish&quot;},&quot;second&quot;:{&quot;N&quot;:&quot;40&quot;}}'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;scan-table&quot;&gt;Scan Table&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4569 dynamodb scan --table-name test_table

 {
    &quot;Count&quot;: 2,
    &quot;Items&quot;: [
        {
            &quot;second&quot;: {
                &quot;N&quot;: &quot;40&quot;
            },
            &quot;first&quot;: {
                &quot;S&quot;: &quot;Manish&quot;
            }
        },
        {
            &quot;second&quot;: {
                &quot;N&quot;: &quot;42&quot;
            },
            &quot;first&quot;: {
                &quot;S&quot;: &quot;Jack&quot;
            }
        }
    ],
    &quot;ScannedCount&quot;: 2,
    &quot;ConsumedCapacity&quot;: null
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;get-item&quot;&gt;Get item&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
bash-3.2$ aws --endpoint-url=http://localhost:4569 dynamodb get-item --table-name test_table  --key '{&quot;first&quot;:{&quot;S&quot;:&quot;Manish&quot;},&quot;second&quot;:{&quot;N&quot;:&quot;40&quot;}}'

{
    &quot;Item&quot;: {
        &quot;second&quot;: {
            &quot;N&quot;: &quot;40&quot;
        },
        &quot;first&quot;: {
            &quot;S&quot;: &quot;Manish&quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;query&quot;&gt;Query&lt;/h3&gt;
&lt;p&gt;I &lt;strong&gt;hate&lt;/strong&gt; to query over CLI, and you can see why. Hope this can help you realize that the best way to deal with DynamoDB is via an SDK.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ aws --endpoint-url=http://localhost:4569 dynamodb query --table-name test_table --projection-expression &quot;#first, #second&quot; --key-condition-expression &quot;#first = :value&quot; --expression-attribute-values '{&quot;:value&quot; : {&quot;S&quot;:&quot;Manish&quot;}}' --expression-attribute-names '{&quot;#first&quot;:&quot;first&quot;, &quot;#second&quot;:&quot;second&quot;}'
{
    &quot;Count&quot;: 1,
    &quot;Items&quot;: [
        {
            &quot;second&quot;: {
                &quot;N&quot;: &quot;40&quot;
            },
            &quot;first&quot;: {
                &quot;S&quot;: &quot;Manish&quot;
            }
        }
    ],
    &quot;ScannedCount&quot;: 1,
    &quot;ConsumedCapacity&quot;: null
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="localstack" />
      

      

      
        <summary type="html">Localstack is a really useful project by Atlassian, which allows for local development using the AWS cloud stack. In other words, it is a Mock AWS Stack with support for many of the infrastructure commonly coded against. This post is a quick and handy gist of using AWS command line to work with localstack for S3, SNS, SQS, and DynamoDB.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">SparkJava Maven Archetype with .war generation</title>
      
      <link href="https://lobster1234.github.io/2017/04/04/sparkjava-maven-archetype-webapp/" rel="alternate" type="text/html" title="SparkJava Maven Archetype with .war generation" />
      <published>2017-04-04T01:11:03-07:00</published>
      <updated>2017-04-04T01:11:03-07:00</updated>
      <id>https://lobster1234.github.io/2017/04/04/sparkjava-maven-archetype-webapp</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/04/04/sparkjava-maven-archetype-webapp/">&lt;p&gt;&lt;a href=&quot;http://sparkjava.com/&quot; target=&quot;_blank&quot;&gt;Spark Java&lt;/a&gt; is a Java 8 based lightweight framework which I highly recommend for writing APIs. It is so simple that it comes with an embedded jetty. However, in real world production you’d want to run it in an external container like Tomcat, JBoss, or Jetty (external), etc.
I found a &lt;a href=&quot;https://github.com/ImaginateWayne/sparkjava-archetypes&quot; target=&quot;_blank&quot;&gt;SparkJava Hello World archetype&lt;/a&gt;, however, it uses the embedded jetty. I was able to fork the repo and add .war support to it.&lt;/p&gt;

&lt;p&gt;The fork is &lt;a href=&quot;https://github.com/marqeta/sparkjava-archetypes/tree/master/sparkjava-helloworld-archetype&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post walks through the usage.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;clone-the-fork&quot;&gt;Clone the fork&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  C02STG51GTFM:work mpandit$ git clone https://github.com/marqeta/sparkjava-archetypes.git
  Cloning into 'sparkjava-archetypes'...
  remote: Counting objects: 115, done.
  remote: Compressing objects: 100% (13/13), done.
  remote: Total 115 (delta 3), reused 0 (delta 0), pack-reused 101
  Receiving objects: 100% (115/115), 13.20 KiB | 0 bytes/s, done.
  Resolving deltas: 100% (18/18), done.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;install-the-archetype-in-your-local-m2&quot;&gt;Install the archetype in your local .m2&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  C02STG51GTFM:work mpandit$ cd sparkjava-archetypes/
  C02STG51GTFM:sparkjava-archetypes mpandit$ cd sparkjava-helloworld-archetype/
  C02STG51GTFM:sparkjava-helloworld-archetype mpandit$ mvn install
  INFO] Scanning for projects...
  [INFO]                                                                         
  [INFO] ------------------------------------------------------------------------
  [INFO] Building Spark Java Hello World Archetype 1.0.0
  [INFO] ------------------------------------------------------------------------
  [INFO] ....
  [INFO] ....
  [INFO] ------------------------------------------------------------------------
  [INFO] BUILD SUCCESS
  [INFO] ------------------------------------------------------------------------
  [INFO] Total time: 7.029 s
  [INFO] Finished at: 2017-04-06T20:47:41-07:00
  [INFO] Final Memory: 13M/245M
  [INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;create-the-helloworld-project-using-this-archetype&quot;&gt;Create the HelloWorld project using this archetype&lt;/h3&gt;

&lt;p&gt;You may want to replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;groupId&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;artifactId&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; to match your code structure.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:sparkjava-helloworld-archetype mpandit$ cd ~/work
C02STG51GTFM:work mpandit$ mvn archetype:generate \
&amp;gt;     -DarchetypeGroupId=com.sparkjava \
&amp;gt;     -DarchetypeArtifactId=sparkjava-helloworld-archetype \
&amp;gt;     -DarchetypeVersion=1.0.0 \
&amp;gt;     -DgroupId=com.marqeta.mqpay \
&amp;gt;     -DartifactId=webhooks-api \
&amp;gt;     -Dversion=1.0-SNAPSHOT \
&amp;gt;     -Dpackage=com.marqeta.mqpay

[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spark Java Hello World Archetype 1.0.0
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] &amp;gt;&amp;gt;&amp;gt; maven-archetype-plugin:2.2:generate (default-cli) &amp;gt; generate-sources @ sparkjava-helloworld-archetype &amp;gt;&amp;gt;&amp;gt;
[INFO]
[INFO] &amp;lt;&amp;lt;&amp;lt; maven-archetype-plugin:2.2:generate (default-cli) &amp;lt; generate-sources @ sparkjava-helloworld-archetype &amp;lt;&amp;lt;&amp;lt;
[INFO]
[INFO] --- maven-archetype-plugin:2.2:generate (default-cli) @ sparkjava-helloworld-archetype ---
[INFO] Generating project in Interactive mode
[INFO] Archetype repository missing. Using the one from [com.sparkjava:sparkjava-helloworld-archetype:1.0.0] found in catalog local
[INFO] Using property: groupId = com.marqeta.mqpay
[INFO] Using property: artifactId = webhooks-api
[INFO] Using property: version = 1.0-SNAPSHOT
[INFO] Using property: package = com.marqeta.mqpay
Confirm properties configuration:
groupId: com.marqeta.mqpay
artifactId: webhooks-api
version: 1.0-SNAPSHOT
package: com.marqeta.mqpay
 Y: :

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Hit enter, and you will notice a webhooks-api folder with the project in it.&lt;/p&gt;

&lt;p&gt;You can notice the generated files - Most importantly the Spark Application and web.xml.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:work mpandit$ cd webhooks-api
C02STG51GTFM:webhooks-api mpandit$ tree
.
├── README.md
├── pom.xml
└── src
    └── main
        ├── java
        │   └── com
        │       └── marqeta
        │           └── mqpay
        │               └── SparkJavaHelloWorld.java
        └── webapp
            └── WEB-INF
                └── web.xml

8 directories, 4 files

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;build-the-project&quot;&gt;Build the Project&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:webhooks-api mpandit$ mvn install
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building webhooks-api 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ webhooks-api ---
[INFO] ..
[INFO] ..
[INFO] ..
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.140 s
[INFO] Finished at: 2017-04-06T20:52:07-07:00
[INFO] Final Memory: 21M/308M
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;deploy-the-generated-war-file&quot;&gt;Deploy the generated war file&lt;/h3&gt;
&lt;p&gt;I have tomcat under &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Downloads/tomcat&lt;/code&gt;. Replace it with your destination Servlet container’s webapp folder.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:webhooks-api mpandit$ cp target/webhooks-api-1.0-SNAPSHOT.war ~/Downloads/tomcat/webapps/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;verify-if-it-all-worked&quot;&gt;Verify if it all worked&lt;/h3&gt;

&lt;p&gt;We can do a simple curl, or browser to hit localhost.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:webhooks-api mpandit$ curl -i http://localhost:8080/webhooks-api-1.0-SNAPSHOT/hello
HTTP/1.1 200
Content-Type: text/html;charset=utf-8
Transfer-Encoding: chunked
Date: Fri, 07 Apr 2017 04:17:26 GMT

Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can modify the code in &lt;code class=&quot;highlighter-rouge&quot;&gt;SparkJavaHelloWorld.java&lt;/code&gt; to add more endpoints, or add new controllers (remember to add them to &lt;code class=&quot;highlighter-rouge&quot;&gt;web.xml&lt;/code&gt; so Spark can process them).&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="maven" />
      
        <category term="sparkjava" />
      

      

      
        <summary type="html">Spark Java is a Java 8 based lightweight framework which I highly recommend for writing APIs. It is so simple that it comes with an embedded jetty. However, in real world production you’d want to run it in an external container like Tomcat, JBoss, or Jetty (external), etc. I found a SparkJava Hello World archetype, however, it uses the embedded jetty. I was able to fork the repo and add .war support to it. The fork is here This post walks through the usage.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">AWS Lambda with Serverless Framework and Java/Maven - Part 1</title>
      
      <link href="https://lobster1234.github.io/2017/02/28/serverless-framework-java-maven-part-1/" rel="alternate" type="text/html" title="AWS Lambda with Serverless Framework and Java/Maven - Part 1" />
      <published>2017-02-28T22:15:37-08:00</published>
      <updated>2017-02-28T22:15:37-08:00</updated>
      <id>https://lobster1234.github.io/2017/02/28/serverless-framework-java-maven-part-1</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/02/28/serverless-framework-java-maven-part-1/">&lt;p&gt;&lt;a href=&quot;https://serverless.com&quot; target=&quot;_blank&quot;&gt;Serverless&lt;/a&gt; is a node.js based framework that makes creating, deploying, and managing serverless functions a breeze. We will use AWS as our FaaS (Function-as-a-Service) provider, although Serverless supports IBM OpenWhisk and Microsoft Azure as well.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will create and deploy a java-maven based AWS Lambda function. In Part-1 we will not modify any code, or even look at the generated code. We will focus on the deployment and the command line interface to manage lambda, provided out of the box by serverless framework.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h3&gt;
&lt;p&gt;Here is what the setup on my Mac looks like (Sierra)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt; (1.1.10) - you will need this if you do not have node/npm installed already.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; (v7.6.0)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; (4.1.2)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Apache Maven&lt;/code&gt; (3.2.5)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Oracle JDK&lt;/code&gt; (1.8.0_121)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;install-serverless&quot;&gt;Install Serverless&lt;/h3&gt;
&lt;p&gt;If you do not have &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; installed, use &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install node&lt;/code&gt; to install &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:~ mpandit$ npm install serverless -g
/usr/local/bin/serverless -&amp;gt; /usr/local/lib/node_modules/serverless/bin/serverless
/usr/local/bin/slss -&amp;gt; /usr/local/lib/node_modules/serverless/bin/serverless
/usr/local/bin/sls -&amp;gt; /usr/local/lib/node_modules/serverless/bin/serverless

&amp;gt; serverless@1.7.0 postinstall /usr/local/lib/node_modules/serverless
&amp;gt; node ./scripts/postinstall.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;configure-serverless-for-aws&quot;&gt;Configure Serverless for AWS&lt;/h3&gt;
&lt;p&gt;Serverless needs to use AWS credentials for an IAM user. I recommend creating a user with no access, and we can add permissions as we go.&lt;/p&gt;

&lt;p&gt;We create a &lt;em&gt;programmatic-access-only&lt;/em&gt; user called &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless&lt;/code&gt;, and added it to a new group called &lt;code class=&quot;highlighter-rouge&quot;&gt;Serverless&lt;/code&gt;. The group should have no permissions associated with it.&lt;/p&gt;

&lt;p&gt;Next, copy paste the AWS credentials of this user in the command below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless config credentials --provider aws --key &amp;lt;key&amp;gt; --secret &amp;lt;secret&amp;gt;

Serverless: Setting up AWS...
Serverless: Saving your AWS profile in &quot;~/.aws/credentials&quot;...
Serverless: Success! Your AWS access keys were stored under the &quot;default&quot; profile.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Serverless uses &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1&lt;/code&gt; region by default, which can be overriden by providing the &lt;code class=&quot;highlighter-rouge&quot;&gt;--region&lt;/code&gt; parameter.&lt;/p&gt;

&lt;h3 id=&quot;create-the-java-project&quot;&gt;Create the Java project&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:~ mpandit$ cd ~/work
Manishs-MacBook-Pro:work mpandit$ mkdir serverless-java
Manishs-MacBook-Pro:work mpandit$ cd serverless-java
Manishs-MacBook-Pro:serverless-java mpandit$ serverless create --template aws-java-maven

Serverless: Generating boilerplate...
 _______                             __
|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v1.7.0
 -------'

Serverless: Successfully generated boilerplate for template: &quot;aws-java-maven&quot;
Serverless: NOTE: Please update the &quot;service&quot; property in serverless.yml with your service name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;set-up-iam-policies&quot;&gt;Set up IAM Policies&lt;/h3&gt;
&lt;p&gt;If you run &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless info&lt;/code&gt;, it will report an error as our user does not really have any permissions.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless info

  Serverless Error ---------------------------------------

     User: arn:aws:iam::123456789209:user/serverless is not
     authorized to perform: cloudformation:DescribeStacks
     on resource: arn:aws:cloudformation:us-east-1:123456789209:stack/aws-java-maven-dev/*

  Get Support --------------------------------------------
     Docs:          docs.serverless.com
     Bugs:          github.com/serverless/serverless/issues

  Your Environment Information -----------------------------
     OS:                 darwin
     Node Version:       7.6.0
     Serverless Version: 1.7.0

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Lets add CloudFormation policy to this user. We will do this via adding the permission to the associated group.&lt;/p&gt;

&lt;p&gt;You will notice that there is no such thing as &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonCloudFormationFullAccess&lt;/code&gt;. Hence, we will need to create a custom policy.&lt;/p&gt;

&lt;p&gt;Click the Group name on the IAM console, and click the Permissions tab. Expand Inline Policies, and click the link that allows creation of an inline policy.&lt;/p&gt;

&lt;p&gt;In the page that opens up, select Policy Generator and proceed and make these selections -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Effect : Allow&lt;/li&gt;
  &lt;li&gt;AWS Service: AWS CloudFormation&lt;/li&gt;
  &lt;li&gt;Actions - All Actions Selected&lt;/li&gt;
  &lt;li&gt;ARN - *&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click Add Statement, and click Next Step. This will show the policy we just created. Rename it to &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless-cloudformation-policy&lt;/code&gt;. Click Apply.&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Stmt1488265872000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cloudformation:*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We will also need to give S3 access to this user, as serverless would need to upload the artifact to S3 for deployment via CloudFormation. We now add &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonS3FullAccess&lt;/code&gt; to this group, and our user will inherit it. This time we will click Attach Policy under Managed Policies instead of Inline Policies.&lt;/p&gt;

&lt;p&gt;Another Managed Policy is for CloudWatch Logs access, so we will select &lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatchLogsFullAccess&lt;/code&gt; and attach to the group.&lt;/p&gt;

&lt;p&gt;As a part of the deployment process, serverless would need to associate the lambda with the invocation role. In order to do that, attach &lt;code class=&quot;highlighter-rouge&quot;&gt;IAMFullAccess&lt;/code&gt; policy from the Managed Policies to the group as well.&lt;/p&gt;

&lt;p&gt;Finally, we add &lt;code class=&quot;highlighter-rouge&quot;&gt;AWSLambdaFullAccess&lt;/code&gt; to this group so the serverless framework can manage the services (lambda functions).&lt;/p&gt;

&lt;p&gt;To summarize, our &lt;code class=&quot;highlighter-rouge&quot;&gt;Serverless&lt;/code&gt; IAM Group should have following policies -&lt;/p&gt;

&lt;p&gt;Managed -&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonS3FullAccess&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatchLogsFullAccess&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IAMFullAccess&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AWSLambdaFullAccess&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inline - &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless-cloudformation-policy&lt;/code&gt; for CloudFormation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One thing to keep in mind is that for functions that are triggered by an event, the event source would need access to invoke the function. This is managed via function policies, which are set up when the trigger is configured. For instance, if you want the lambda to be triggered on an S3 event on a bucket, the association between the S3 bucket and the function will need to have a function policy.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you’ll notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless info&lt;/code&gt; command returns no services.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless info

  Serverless Error ---------------------------------------

     Stack with id aws-java-maven-dev does not exist

  Get Support --------------------------------------------
     Docs:          docs.serverless.com
     Bugs:          github.com/serverless/serverless/issues

  Your Environment Information -----------------------------
     OS:                 darwin
     Node Version:       7.6.0
     Serverless Version: 1.7.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;deploy-the-stack&quot;&gt;Deploy the stack&lt;/h3&gt;
&lt;p&gt;Since deployment of the stack is essentially setting up our lambda function (the template has a simple function), we need to create the artifact (jar).&lt;/p&gt;

&lt;p&gt;Since this is a maven project, we use maven to build the project.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ mvn clean install
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building hello dev
[INFO] ------------------------------------------------------------------------
...
...
...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 14.709 s
[INFO] Finished at: 2017-02-27T23:26:00-08:00
[INFO] Final Memory: 23M/145M
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now that we have the artifact in &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; folder (&lt;code class=&quot;highlighter-rouge&quot;&gt;hello-dev.jar&lt;/code&gt;), we can go ahead deploy it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless deploy
Serverless: Creating Stack...
Serverless: Checking Stack create progress...
.....
Serverless: Stack create finished...
Serverless: Uploading CloudFormation file to S3...
Serverless: Uploading service .zip file to S3 (1.98 MB)...
Serverless: Updating Stack...
Serverless: Checking Stack update progress...
..................
Serverless: Stack update finished...
Service Information
service: aws-java-maven
stage: dev
region: us-east-1
api keys:
  None
endpoints:
  None
functions:
  aws-java-maven-dev-hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can check the AWS CloudFormation section in the console to view details of the stack that has just been created.&lt;/p&gt;

&lt;p&gt;Now that our service is deployed, it wil show up under &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless info&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless info
Service Information
service: aws-java-maven
stage: dev
region: us-east-1
api keys:
  None
endpoints:
  None
functions:
  aws-java-maven-dev-hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, lets try to invoke it.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless invoke --function  hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{\&quot;message\&quot;:\&quot;Go Serverless v1.x! Your function executed successfully!\&quot;,\&quot;input\&quot;:{}}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;X-Powered-By&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS Lambda &amp;amp; serverless&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;isBase64Encoded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The function can also be invoked with an input. The input is essentially a Map, so we can pass it a JSON string with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--data&lt;/code&gt; parameter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless invoke --function hello --data '{&quot;key&quot;:&quot;value&quot;}'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{\&quot;message\&quot;:\&quot;Go Serverless v1.x! Your function executed successfully!\&quot;,\&quot;input\&quot;:{\&quot;key\&quot;:\&quot;value\&quot;}}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;X-Powered-By&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS Lambda &amp;amp; serverless&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;isBase64Encoded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A good idea would be to explore the CloudWatch Logs and Lambda metrics for our function from the console.&lt;/p&gt;

&lt;p&gt;The same can be done command line, like so -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless logs --function hello
START RequestId: f8390071-fd8d-11e6-9195-554889504121 Version: $LATEST
2017-02-28 08:14:48 &amp;lt;f8390071-fd8d-11e6-9195-554889504121&amp;gt; INFO  com.serverless.Handler:17 - received: {}
END RequestId: f8390071-fd8d-11e6-9195-554889504121
REPORT RequestId: f8390071-fd8d-11e6-9195-554889504121	Duration: 445.52 ms	Billed Duration: 500 ms 	Memory Size: 1024 MB	Max Memory Used: 57 MB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can also look at the metrics associated with our functions (The 1 error is because I had passed a malformed JSON input).&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless metrics
Service wide metrics
February 27, 2017 1:59 AM - February 28, 2017 1:59 AM

Invocations: 7
Throttles: 0
Errors: 1
Duration (avg.): 276.55ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless metrics --function hello
hello
February 27, 2017 1:59 AM - February 28, 2017 1:59 AM

Invocations: 7
Throttles: 0
Errors: 1
Duration (avg.): 276.55ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that we have successfully deployed and tested the templated service, we are now ready to dive deeper into the actual code, configuration, and constructs of serverless framework. That will be &lt;a href=&quot;/2017/04/12/serverless-framework-aws-apigateway&quot;&gt;Part-2 of this tutorial&lt;/a&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="serverless" />
      
        <category term="lambda" />
      

      

      
        <summary type="html">Serverless is a node.js based framework that makes creating, deploying, and managing serverless functions a breeze. We will use AWS as our FaaS (Function-as-a-Service) provider, although Serverless supports IBM OpenWhisk and Microsoft Azure as well. In this tutorial, we will create and deploy a java-maven based AWS Lambda function. In Part-1 we will not modify any code, or even look at the generated code. We will focus on the deployment and the command line interface to manage lambda, provided out of the box by serverless framework.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Notes from AWS Lambda Deep Dive Webinar</title>
      
      <link href="https://lobster1234.github.io/2017/02/27/notes-from-aws-lambda-deep-dive-webinar/" rel="alternate" type="text/html" title="Notes from AWS Lambda Deep Dive Webinar" />
      <published>2017-02-27T07:20:44-08:00</published>
      <updated>2017-02-27T07:20:44-08:00</updated>
      <id>https://lobster1234.github.io/2017/02/27/notes-from-aws-lambda-deep-dive-webinar</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/02/27/notes-from-aws-lambda-deep-dive-webinar/">&lt;p&gt;I’ve put together my notes from the AWS webinar, which can be seen &lt;a href=&quot;https://www.youtube.com/watch?v=dB4zJk_fqrU&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lambda is the key enabler and a core AWS component for serverless computing. Lets you run the code you want, without worrying about the underlying infrastructure and provisioning. It is also cost efficient, as there are no instances that are in running state but idle. Lambda handles scaling up and scaling down as needed, transparently to the customer.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Event Source - Changes in state of the resources or data, or any events triggered explicitly or implicitly. A large number of AWS services can act as Event Sources - Like S3 (Object PUT, DELETE..), DynamoDB, IoT, CloudFormation, CloudWatch, SNS, API Gateway and Cron schedule to name a few.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Function - The piece of code that would be run when that event occurs. The function can access any services downstream if needed. Currently Supported languages are Node.js, Python, Java 8 and C#.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-cases&quot;&gt;Use cases&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Stateless, event-based file/data processing.&lt;/li&gt;
  &lt;li&gt;On demand execution of some logic where an event is generated via an explicit action.&lt;/li&gt;
  &lt;li&gt;Custom Workflows for state changes within AWS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Code can be developed in the 4 supported languages (currently).&lt;/li&gt;
  &lt;li&gt;The code should have no affinity or access to the underlying infrastructure, and should use external infrastructure for state (like a cache or a database). The code should be entirely stateless.&lt;/li&gt;
  &lt;li&gt;The memory usage allowed is from 128MB to 1.5GB in increments of 64MB. CPU and network are allocated proportionately.&lt;/li&gt;
  &lt;li&gt;Lambda can be invoked synchronously (the client waits for a response from the function), and asynchronously (fire and forget, a 202 Accepted).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-in-it&quot;&gt;What is in it&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Handler()&lt;/code&gt; function - Entry point for Lambda.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Event&lt;/code&gt; Object - The request (representation of the event). Can be a stream or an simple data type.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Context&lt;/code&gt; Object - Provides a handle to the environment and basic utilities like time, logging and client/event info.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FunctionConfiguration&lt;/code&gt; Metadata
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VpcConfig&lt;/code&gt; - Useful if you want to access your private resources within your VPC. Enables the lambda environment to be able to talk to your VPC.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DeadLetterConfig&lt;/code&gt; - Failed events are sent to SQS or SNS. A dead letter queue or an SNS topic can be configured where the event is sent back in case the lambda function fails to process it. It is only available for async requests.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt; - Key value pairs as a part of the configuration, which are then available as environment variables to the function. They’re encrypted at rest via KMS, and are decrypted during lambda initialization.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;limits&quot;&gt;Limits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;512 MB of temporary storage (ephemeral).&lt;/li&gt;
  &lt;li&gt;1024 File Descriptors&lt;/li&gt;
  &lt;li&gt;1024 processes + threads&lt;/li&gt;
  &lt;li&gt;300 seconds maximum execution duration&lt;/li&gt;
  &lt;li&gt;6MB Request payload&lt;/li&gt;
  &lt;li&gt;6MB Response&lt;/li&gt;
  &lt;li&gt;50MB Deployment package (compressed)&lt;/li&gt;
  &lt;li&gt;250MB Uncompressed&lt;/li&gt;
  &lt;li&gt;4KB Environment variables&lt;/li&gt;
  &lt;li&gt;100 Concurrent Executions (can be increased by requesting Amazon)&lt;/li&gt;
  &lt;li&gt;75GB total size of all lambdas across one region.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;container-model&quot;&gt;Container Model&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Each execution happens in a container that is created and managed by AWS. Containers are  re-used. This re-use can let us share cached static data, or DB connections between invocations. The folder &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; is available across invocations. However, do not rely on this, use it opportunistically.&lt;/li&gt;
  &lt;li&gt;Bootstrapping happens when a function is invoked for the first time after creation or update. The start time can be reduced by allowing more memory, having a smaller deployment package. Clearly Python and Node.js will be much quicker to bootstrap than Java and C#. Strip down the deployment of all the libraries that are not needed, as lambda will load everything that is present in the package. Mode to an interpreted language if cold starts are not within acceptable limits.&lt;/li&gt;
  &lt;li&gt;Containers run Amazon Linux AMI. If there are any native binaries, compile against this environment.&lt;/li&gt;
  &lt;li&gt;OpenJDK 1.8 is already provided by the container, so does not need to be packaged. Similarly AWS SDK for other languages, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A zip file or a jar file containing the code and dependencies. Use Maven or Eclipse to make a package.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cicd-options&quot;&gt;CI/CD Options&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Use AWS CodeCommit, CodeBuild, CodePipeline&lt;/li&gt;
  &lt;li&gt;Use Github, Jenkins, CodeShip&lt;/li&gt;
  &lt;li&gt;Put the package on an S3 location&lt;/li&gt;
  &lt;li&gt;AWS &lt;code class=&quot;highlighter-rouge&quot;&gt;SAM&lt;/code&gt; - Serverless Application Model&lt;/li&gt;
  &lt;li&gt;CloudFormation supports &lt;code class=&quot;highlighter-rouge&quot;&gt;SAM&lt;/code&gt; extensions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;versioning&quot;&gt;Versioning&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A version is an immutable copy of code+config&lt;/li&gt;
  &lt;li&gt;Each version gets it’s own ARN&lt;/li&gt;
  &lt;li&gt;Versions can be aliased (like 13=Dev, 11=Prod, 12=Beta)&lt;/li&gt;
  &lt;li&gt;The aliasing enables rollbacks or staged promotions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;security-and-scaling&quot;&gt;Security and Scaling&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The Push model, where the upstream service invokes the function. The resource level policies are applied to the lambda function which control which resources can invoke it (Like allow S3 to invoke this function). The policies are already created when the event source is attached via the console.&lt;/li&gt;
  &lt;li&gt;The pull model is used for stream event sources (Kinesis and DynbamoDB). Here lambda polls instead of the resources pushing. An IAM policy is created for the Lambda to be able to poll the source (instead of the other way around for Push).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;concurrency-and-scaling&quot;&gt;Concurrency and Scaling&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Requests per second * function execution duration&lt;/li&gt;
  &lt;li&gt;When throttled, the async events are retried automatically for 6 hours, with delays between retries.&lt;/li&gt;
  &lt;li&gt;For sync requests, the client gets a 429.&lt;/li&gt;
  &lt;li&gt;Use async model if bursts are expected as retries are handled automatically when throttled.&lt;/li&gt;
  &lt;li&gt;Request AWS to increase the concurrency limit if consistently getting throttled.&lt;/li&gt;
  &lt;li&gt;Ensure the downstream also keeps up with Lambda throttling, for example, if each lambda creates 10 MySQL connections, 100 concurrent invocations is not something MySQL will be able to handle.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;debugging-and-operations&quot;&gt;Debugging and Operations&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;4xx errors can be invalid parameter value (400), resource not found (404), request too large (413) and can be fixed by the developer.&lt;/li&gt;
  &lt;li&gt;5xx need to be fixed by the admin&lt;/li&gt;
  &lt;li&gt;Stream based events are retried till the data expires&lt;/li&gt;
  &lt;li&gt;Async invocations are retried 2 extra times before sent to dead letter queue&lt;/li&gt;
  &lt;li&gt;For sync invocations, the caller will need to implement the retry logic when they get an error from the call&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tracing-tracking-and-logging&quot;&gt;Tracing, Tracking and Logging&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;AWS X-Ray (Preview) for detailed breakdown of lambda performance and behavior metrics.&lt;/li&gt;
  &lt;li&gt;All calls made to lambda are logged to CloudTrail. They can be delivered to S3 and analyzed.&lt;/li&gt;
  &lt;li&gt;Every start, end, and report goes to CloudWatch&lt;/li&gt;
  &lt;li&gt;Java User logs can be created via &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.println()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.err.println()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LambdaLogger.log()&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Log4j.*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Default metrics are free - which include duration, throttles, errors, etc. Custom metrics can also be added by the function itself via the CloudWatch API.&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="serverless" />
      
        <category term="lambda" />
      

      

      
        <summary type="html">I’ve put together my notes from the AWS webinar, which can be seen here. Lambda is the key enabler and a core AWS component for serverless computing. Lets you run the code you want, without worrying about the underlying infrastructure and provisioning. It is also cost efficient, as there are no instances that are in running state but idle. Lambda handles scaling up and scaling down as needed, transparently to the customer.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">AWS Training at Marqeta : SQS Lab</title>
      
      <link href="https://lobster1234.github.io/2017/02/17/marqeta-aws-sqs-lab/" rel="alternate" type="text/html" title="AWS Training at Marqeta : SQS Lab" />
      <published>2017-02-17T19:10:44-08:00</published>
      <updated>2017-02-17T19:10:44-08:00</updated>
      <id>https://lobster1234.github.io/2017/02/17/marqeta-aws-sqs-lab</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/02/17/marqeta-aws-sqs-lab/">&lt;p&gt;This post is the handout for the SQS Lab I ran as a part of hands-on AWS training to the Engineering + DevOps team at &lt;a href=&quot;https://www.marqeta.com&quot; target=&quot;_blank&quot;&gt;Marqeta&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this lab we will use AWS CLI to work with SQS. I’ve replaced the account ID with 111111111111.&lt;/p&gt;

&lt;h2 id=&quot;prepare-the-cli-aws-shell&quot;&gt;Prepare the CLI (aws-shell)&lt;/h2&gt;
&lt;p&gt;In the previous lab we configured &lt;code class=&quot;highlighter-rouge&quot;&gt;aws-shell&lt;/code&gt; on our laptops with an access key, secret, and default region. However, the user only had &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonS3FullAccess&lt;/code&gt; via a managed policy, and &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonEC2FullAccess&lt;/code&gt; via the &lt;code class=&quot;highlighter-rouge&quot;&gt;developers&lt;/code&gt; group.&lt;/p&gt;

&lt;p&gt;We will fire up the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws-shell&lt;/code&gt; and use basic SQS commands. Autocomplete feature of the shell will come in very handy as you’ll see.&lt;/p&gt;

&lt;p&gt;First, we will try to list the queues we have in our account.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs list-queues

An error occurred (AccessDenied) when calling the ListQueues operation: Access to the resource https://queue.amazonaws.com/ is denied.
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Since the access key and secret we’re using is not tied to SQS policy, we go ahead and add that to the &lt;code class=&quot;highlighter-rouge&quot;&gt;developers&lt;/code&gt; group. It is called &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonSQSFullAccess&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once done, you should see an empty list for the same command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs list-queues
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, lets create a queue.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs create-queue --queue-name my_test_queue
{
    &quot;QueueUrl&quot;: &quot;https://queue.amazonaws.com/111111111111/my_test_queue&quot;
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can go on the console in SQS section, and see this queue being created. You will notice that the Queue URL on the console is a bit richer, with region in there as well.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;	https://sqs.us-east-1.amazonaws.com/111111111111/my_test_queue
&lt;/code&gt;
Now that we’ve created a queue, we will go ahead and send a message to it. As you do this, you will notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;aws-shell&lt;/code&gt; will autocomplete the queue-url for us.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs send-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue --message-body &quot;Hello!&quot;
{
    &quot;MD5OfMessageBody&quot;: &quot;952d2c56d0485958336747bcdd98590d&quot;,
    &quot;MessageId&quot;: &quot;31e40b96-c61c-4b6a-8682-67ebb7badc36&quot;
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The max message size is 256KB, with a default visibility timeout of 30 seconds. This means whoever consumes this message has 30 seconds to process it, otherwise it will become available to other consumers for processing, i.e. back in the queue. Lets give that a try.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;Hello!&quot;,
            &quot;ReceiptHandle&quot;: &quot;AQEBD9ziSgXsnzTdBNzjNDksLpLU/ASfSdxdeFT1MkzCezLdnKL9HljPpsRaz97eSdjRCm27c3/iNcaITv2PEFgpNs62zezc4jpzWh3ysPYVwVgBjqbhobVQiF8JBRxuHSfqgQ8qSsgF2QOpU2Bn6qE/wC/LSqwxNqd/aQRab5EUA9zgqHx9L15FIlbmdGrz8Qz6ebPyFi4Lr5gb+S79t+wN9s0yE9+kEQvKjeweF0OHRyGeBWybwEFVlc3qPeo0QT9WLdkQ68PKBCY8s7djSJoD7npv9j2YeFS4+EcNzJ9ql5x2wpzcLOF672exXivigcjGMUdP9JT32Xju61ixWYnIDgd7KXWo12f+VgSc7/s143kZGPNwpkicvoNRlmzx/urI&quot;,
            &quot;MD5OfBody&quot;: &quot;952d2c56d0485958336747bcdd98590d&quot;,
            &quot;MessageId&quot;: &quot;31e40b96-c61c-4b6a-8682-67ebb7badc36&quot;
        }
    ]
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We immediately fire the same command, and notice nothing comes back.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is due to the visibility timeout of 30 seconds. Lets wait 30 seconds, and you’ll see the same message comes back on the queue.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;Hello!&quot;,
            &quot;ReceiptHandle&quot;: &quot;AQEBU5MiEmzKdpwJ705Ehe6brf5fmkx0sa+m2ibZxbVsmdsKiHX+RyDu4s+T2yBNP9MS7NjSmEA9l/dLgwn55cN6qDCTCxxOrvVEp1MVMqximPCjzFgkmYTYR5w32TBqamDxKqadAGPUgjLyLlvD/M5tc+MuyvrFL2WaWovK7cpMRk5VGlW+pSaC+TNfhtt2QeLpNW4GUnLxtAu96BrY54ll3jelHtt3jnuAqNOaJ6nzDwKvfonyrpdd4sVS+cKPo4LzS47kJyX8p/gZdi/7cY5Oty+1RhfEkfmkEUKm2Eg4DK8Rm+E9jyUjYK+VmxWc/0JAeKwGRkIuZEuYW1kWav7y3/PkJNaXHJvVQtyLDQiSy8zf8wrjyoyGknaonmUIHtyP&quot;,
            &quot;MD5OfBody&quot;: &quot;952d2c56d0485958336747bcdd98590d&quot;,
            &quot;MessageId&quot;: &quot;31e40b96-c61c-4b6a-8682-67ebb7badc36&quot;
        }
    ]
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is where the application developers have to pick a right visibility timeout, which should allow the consumer enough time to process the message and delete it from the queue, so multiple processing does not occur. Let us delete the message after processing (reading) it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs delete-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue --receipt-handle &quot;AQEBHh4KsuIv0QABOD49rbmmu6V0r0I34ENhrQqT5me0pPMfM2KOBWX+NvqPVV8eaB3T7zujcJj0qgQlvvqbzgCMKeKYSlExbVgLs6tFHKZgR6wUVH/X6RhN579u4LHFo3SBu9IExDpz226sEoVAn0MOhOlvArU72xJQm+pNPwRjEicQxu6MQPakfiq8yHGICYSUPyBhz+/OwxLx4iDe8exWY2Esvz2zt1q7kD/u2PqzPXiL0uIBsW18tyslMfftGSEV3cB19HFJEHNJ9olZtstNMrX1MAGJZqDHxS1rllSCrNCiqD4264Ou/eyf7duPwhvNT97mmUS0NbCuhTX5P3Kt4BytNFwKY3Qu13vkgb1rciO/1NNifwNbJ+gjOI7xS246&quot;
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice that we need to provide the &lt;code class=&quot;highlighter-rouge&quot;&gt;receipt-handle&lt;/code&gt; that we got after receiving the message in order to delete it.&lt;/p&gt;

&lt;p&gt;Next we can go on the console and look at cloudwatch monitoring. We will also create an alarm to notify us if a message has not been picked up for N minutes. This is something that can alert us of dead consumers, or an issue with processing the messages.&lt;/p&gt;

&lt;h2 id=&quot;more-on-visibility-timeout&quot;&gt;More on visibility timeout&lt;/h2&gt;

&lt;p&gt;In order to change visibility timeout, which can be done when the consumer does not want the message to go back in the queue, like it wants to retry processing the message itself instead of passing it on to another consumer, it can be done by providing the &lt;code class=&quot;highlighter-rouge&quot;&gt;queue-url&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;receipt-handle&lt;/code&gt; like so - note that &lt;code class=&quot;highlighter-rouge&quot;&gt;visibility-timeout&lt;/code&gt; is specified in seconds.&lt;/p&gt;

&lt;p&gt;Lets push a message, consume it, and then increase the &lt;code class=&quot;highlighter-rouge&quot;&gt;visibility-timeout&lt;/code&gt; to 2 minutes (120 seconds).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs send-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue --message-body &quot;Gonna take long&quot;
{
    &quot;MD5OfMessageBody&quot;: &quot;de80b2f443dc0a15382a40a625b74d3a&quot;,
    &quot;MessageId&quot;: &quot;8efcd759-eb0f-48a3-92fe-5b83e0dd8740&quot;
}
aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;Gonna take long&quot;,
            &quot;ReceiptHandle&quot;: &quot;AQEBYkUuIUjSEnzSI7ymjk/oRB0K9osJ2Nyud1+pij4nVAJ8taZ+FHq1kvWIm4LGrjZEVveMPOjsxP/nmmaUCEXAZKYQHATnQDT2Hqt+NJiMQG+EFd6HBTXtT5gH29UN/ieAOGHAV6zWR2IJH+h4eRA8U7tgciatz5P/KGrHgH1qmxe9EoSkXOulikG82cs22gymNBeqNe+TZiNgwH6Kfd6CwTcCh8oowk1YXMqXaVCBso1n1R7JtMkDWd4R1CnEVCtTt1ZCfbVgHrKADPFkuwUYIp0lEXXYeDD5GqvJBaR3+INFW2t7qEMb0uzPr1s9n42W2uMEC7u45dqYss9mWlNhrI7+YG6IxCL0jx7VxIIrkOj1ihsHgwj+bxMCH7Eiu+87&quot;,
            &quot;MD5OfBody&quot;: &quot;de80b2f443dc0a15382a40a625b74d3a&quot;,
            &quot;MessageId&quot;: &quot;8efcd759-eb0f-48a3-92fe-5b83e0dd8740&quot;
        }
    ]
}

aws&amp;gt; sqs change-message-visibility --queue-url https://queue.amazonaws.com/111111111111/my_test_queue --receipt-handle &quot;AQEBYkUuIUjSEnzSI7ymjk/oRB0K9osJ2Nyud1+pij4nVAJ8taZ+FHq1kvWIm4LGrjZEVveMPOjsxP/nmmaUCEXAZKYQHATnQDT2Hqt+NJiMQG+EFd6HBTXtT5gH29UN/ieAOGHAV6zWR2IJH+h4eRA8U7tgciatz5P/KGrHgH1qmxe9EoSkXOulikG82cs22gymNBeqNe+TZiNgwH6Kfd6CwTcCh8oowk1YXMqXaVCBso1n1R7JtMkDWd4R1CnEVCtTt1ZCfbVgHrKADPFkuwUYIp0lEXXYeDD5GqvJBaR3+INFW2t7qEMb0uzPr1s9n42W2uMEC7u45dqYss9mWlNhrI7+YG6IxCL0jx7VxIIrkOj1ihsHgwj+bxMCH7Eiu+87&quot; --visibility-timeout 120
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now even if we try to get message after 30 seconds, this message will not show up. However, it will after 120 seconds unless we delete it. Remember that this value is absolute, which means it changes the timeout from default (30 seconds) to 120 seconds and not to 30+120 seconds.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="sqs" />
      

      

      
        <summary type="html">This post is the handout for the SQS Lab I ran as a part of hands-on AWS training to the Engineering + DevOps team at Marqeta.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">AWS Primer and Quickstart Presentation</title>
      
      <link href="https://lobster1234.github.io/2017/02/01/aws-primer-and-quickstart/" rel="alternate" type="text/html" title="AWS Primer and Quickstart Presentation" />
      <published>2017-02-01T07:22:10-08:00</published>
      <updated>2017-02-01T07:22:10-08:00</updated>
      <id>https://lobster1234.github.io/2017/02/01/aws-primer-and-quickstart</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/02/01/aws-primer-and-quickstart/">Slides from my introductory talk on AWS at Marqeta.

&lt;!--more--&gt;
&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;13c65dd7c1744c319001b4415e3ca439&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="presentations" />
      

      

      
        <summary type="html">Slides from my introductory talk on AWS at Marqeta.</summary>
      

      
      
    </entry>
  
  
</feed>
