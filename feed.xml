<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.4.3">Jekyll</generator>
  
  
  <link href="https://lobster1234.github.io/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://lobster1234.github.io/" rel="alternate" type="text/html" />
  <updated>2017-04-10T03:17:32-07:00</updated>
  <id>https://lobster1234.github.io//</id>

  
    <title type="html">My Blog</title>
  

  
    <subtitle>Authored by Manish Pandit - A tech blog with gists, code, presentations, tutorials, and many goodies around programming, devops, cloud architectures, aws, google cloud platform, and infrastructure.
</subtitle>
  

  
    <author>
        <name>Manish Pandit</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">Fish and iTerm2</title>
      
      <link href="https://lobster1234.github.io/2017/04/08/setting-up-fish-and-iterm2/" rel="alternate" type="text/html" title="Fish and iTerm2" />
      <published>2017-04-08T04:44:37-07:00</published>
      <updated>2017-04-08T04:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/04/08/setting-up-fish-and-iterm2</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/04/08/setting-up-fish-and-iterm2/">&lt;p&gt;So, out of boredom, I decided to upgrade my shell and terminal to something closer to 2017, instead of living in the early 90s. Clearly I’e been using &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; all these years - mostly on Ubuntu and lately on OSX. But I’ve always been &lt;em&gt;lazy and complacent&lt;/em&gt; with the terminal. I’ve always wanted to set up &lt;a href=&quot;http://fishshell.com&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt;&lt;/a&gt; - &lt;strong&gt;Friendly Interactive SHell&lt;/strong&gt;. for it’s git integration, and very rich interaction. Sure, all of this can be done on &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt; but I hate configuration, and combing hundreds of git repos for &lt;code class=&quot;highlighter-rouge&quot;&gt;bashfiles&lt;/code&gt; and find what works for me.&lt;/p&gt;

&lt;p&gt;While at &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt;, I also decided to upgrade the default Mac &lt;code class=&quot;highlighter-rouge&quot;&gt;terminal&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;iTerm2&lt;/code&gt;. This led me to a journey through installing fonts all the way to picking up the theme that works for me. But again, no configuration to mess with.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h3 id=&quot;installing-fish&quot;&gt;Installing fish&lt;/h3&gt;

&lt;p&gt;Since I have brew, I was able to simply do this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  bash-3.2$ brew install fish
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you do not have brew, head over to &lt;a href=&quot;http://fishshell.com&quot; target=&quot;_blank&quot;&gt;fishshell.com&lt;/a&gt; for instructions on setting it up. They have MacPorts, Installer, and an executable.&lt;/p&gt;

&lt;p&gt;Once installed, the default theme supports git repositories, in that, the prompt indicates the local repository state, has nice syntax highlighting on the command line, and typical things you’d expect from the shell of the 21st century.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/fish-1.png&quot; alt=&quot;Fish-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the prompt change, as well as a timestamp show up to the right of the window.&lt;/p&gt;

&lt;p&gt;If you wish to make fish your default shell, add add &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/fish&lt;/code&gt; at the very top of &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/shells&lt;/code&gt;, and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;chsh -s /usr/local/bin/fish&lt;/code&gt;. If not, then you can always type &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;installing-omf&quot;&gt;Installing omf&lt;/h3&gt;

&lt;p&gt;Given the richness of fish with themes and plugins, it’s best to use &lt;code class=&quot;highlighter-rouge&quot;&gt;omf&lt;/code&gt; - &lt;a href=&quot;https://github.com/oh-my-fish/oh-my-fish&quot; target=&quot;_blank&quot;&gt;Oh My Fish&lt;/a&gt;, which is more or less a package manager for fish.&lt;/p&gt;

&lt;p&gt;To install &lt;code class=&quot;highlighter-rouge&quot;&gt;omf&lt;/code&gt; -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ curl -L https://get.oh-my.fish | fish
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once &lt;code class=&quot;highlighter-rouge&quot;&gt;omf&lt;/code&gt; is installed, checking out themes etc. becomes a breeze. To do so, type &lt;code class=&quot;highlighter-rouge&quot;&gt;omf&lt;/code&gt; on the prompt to see the options. Typing &lt;code class=&quot;highlighter-rouge&quot;&gt;omf theme&lt;/code&gt; will show a big list, and in order to see what these themes look like, head over &lt;a href=&quot;https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; to preview them.&lt;/p&gt;

&lt;p&gt;I liked &lt;code class=&quot;highlighter-rouge&quot;&gt;bobthefish&lt;/code&gt;, and installed it like so -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;⋊&amp;gt; ~/work omf install bobthefish                                          05:04:17
Updating https://github.com/oh-my-fish/packages-main master... Done!
Installing package bobthefish
✔ bobthefish successfully installed.
 ~/work                                          773ms   Sat Apr  8 05:07:06 2017
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can always switch back to &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;omf theme default&lt;/code&gt;. You can install many themes and switch back and forth between them till you’re comfortable with one of them.&lt;/p&gt;

&lt;p&gt;However, this theme (and many others) uses fonts that would need to be installed.&lt;/p&gt;

&lt;h3 id=&quot;installing-powerline-patched-fonts&quot;&gt;Installing Powerline Patched Fonts&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/work  git clone https://github.com/powerline/fonts.git
~/work  cd fonts                               
~/w/fonts   master  ./install.sh
Copying fonts...
Powerline fonts installed to /Users/mpandit/Library/Fonts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Feel free to remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;fonts&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&quot;installing-iterm2&quot;&gt;Installing iTerm2&lt;/h3&gt;

&lt;p&gt;Downloaded and installed &lt;a href=&quot;https://www.iterm2.com/&quot; target=&quot;_blank&quot;&gt;iTerm2&lt;/a&gt;, which is super simple to do.&lt;/p&gt;

&lt;p&gt;Take a look at the Font Book, and pick the powerline font of your choice. I like &lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu Mono&lt;/code&gt;. You can type &lt;code class=&quot;highlighter-rouge&quot;&gt;powerline&lt;/code&gt; in the little search textbox in Font Book to shorten the list. Once picked, set the font here -&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/fish-2.png&quot; alt=&quot;Fish-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Restart iTerm2, and you should be all set!&lt;/p&gt;

&lt;h3 id=&quot;github-integration&quot;&gt;Github integration&lt;/h3&gt;

&lt;p&gt;This image shows how the prompt changes as we make simple changes to a local git repo. I am using &lt;code class=&quot;highlighter-rouge&quot;&gt;bobthefish&lt;/code&gt; theme. See the theme details on how the prompt indicates various states like locally committed but un-pushed changes, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/fish-3.png&quot; alt=&quot;Fish-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it is super helpful, with no configuration to get this going. This to me is one of the most useful and powerful features of &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that you have &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;omf&lt;/code&gt; set up, play with the many options and if you have never used it before, you’ll be surprised how modern and developer friendly this set up is. The depth of autocomplete going beyond just file names, auto-suggestion, history navigation, and syntax coloring makes working on the terminal so much productive and painless!&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="shell" />
      

      

      
        <summary type="html">So, out of boredom, I decided to upgrade my shell and terminal to something closer to 2017, instead of living in the early 90s. Clearly I’e been using bash all these years - mostly on Ubuntu and lately on OSX. But I’ve always been lazy and complacent with the terminal. I’ve always wanted to set up fish - Friendly Interactive SHell. for it’s git integration, and very rich interaction. Sure, all of this can be done on bash or zsh but I hate configuration, and combing hundreds of git repos for bashfiles and find what works for me. While at fish, I also decided to upgrade the default Mac terminal to iTerm2. This led me to a journey through installing fonts all the way to picking up the theme that works for me. But again, no configuration to mess with.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Using localstack with AWS Command Line</title>
      
      <link href="https://lobster1234.github.io/2017/04/05/working-with-localstack-command-line/" rel="alternate" type="text/html" title="Using localstack with AWS Command Line" />
      <published>2017-04-05T23:44:37-07:00</published>
      <updated>2017-04-05T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/04/05/working-with-localstack-command-line</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/04/05/working-with-localstack-command-line/">&lt;p&gt;&lt;a href=&quot;https://github.com/atlassian/localstack&quot; target=&quot;_blank&quot;&gt;Localstack&lt;/a&gt; is a really useful project by Atlassian, which allows for local development using the AWS cloud stack. In other words, it is a Mock AWS Stack with support for many of the infrastructure commonly coded against.In other words, it is a Mock AWS Stack with support for many of the infrastructure commonly coded against. This post is a quick and handy gist of using AWS command line to work with localstack.
&lt;!--more--&gt;&lt;/p&gt;
&lt;h1 id=&quot;starting-localstack&quot;&gt;Starting localstack&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ make infra
. .venv/bin/activate; exec localstack/mock/infra.py
Starting local dev environment. CTRL-C to quit.
Starting local Elasticsearch (port 4571)...
Starting mock ES service (port 4578)...
Starting mock S3 server (port 4572)...
Starting mock SNS server (port 4575)...
Starting mock SQS server (port 4576)...
Starting mock API Gateway (port 4567)...
Starting mock DynamoDB (port 4569)...
Starting mock DynamoDB Streams (port 4570)...
Starting mock Firehose (port 4573)...
Starting mock Lambda (port 4574)...
Starting mock Kinesis (port 4568)...
Starting mock Redshift server (port 4577)...
Ready.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Optionally, start the web interface (make sure you pull the latest code, as there were node compatibility issues up until 3/31/2017)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ make web
(. .venv/bin/activate; bin/localstack web --port=8080)
 * Running on http://0.0.0.0:8080/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 272-228-949
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;s3&quot;&gt;S3&lt;/h2&gt;

&lt;h3 id=&quot;create-a-bucket&quot;&gt;Create a bucket&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4572 s3 mb s3://mytestbucket
make_bucket: mytestbucket

C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4572 s3 ls
2006-02-03 08:45:09 mytestbucket
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;copy-a-file-over&quot;&gt;Copy a file over&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4572 s3 cp /tmp/mongo.log s3://mytestbucket
upload: ../../../../tmp/mongo.log to s3://mytestbucket/mongo.log

C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4572 s3 ls s3://mytestbucket
2017-04-05 01:18:39       4789 mongo.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;delete-this-file&quot;&gt;Delete this file&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4572 s3 rm s3://mytestbucket/mongo.log
delete: s3://mytestbucket/mongo.log

C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4572 s3 ls s3://mytestbucket

C02STG51GTFM:localstack mpandit$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;sns&quot;&gt;SNS&lt;/h2&gt;

&lt;h3 id=&quot;create-a-topic&quot;&gt;Create a topic&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4575 sns list-topics
{
    &quot;Topics&quot;: []
}

C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4575 sns create-topic --name test-topic
{
    &quot;TopicArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic&quot;
}
C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4575 sns list-topics
{
    &quot;Topics&quot;: [
        {
            &quot;TopicArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic&quot;
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;subscribe-to-the-topic&quot;&gt;Subscribe to the topic&lt;/h3&gt;

&lt;p&gt;(use any random email)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4575 sns subscribe --topic-arn arn:aws:sns:us-east-1:123456789012:test-topic --protocol email --notification-endpoint pibehatin@1rentcar.top
{
    &quot;SubscriptionArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic:5aacffbe-ccf7-40d5-be97-c55af7392935&quot;
}

C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4575 sns list-subscriptions
{
    &quot;Subscriptions&quot;: [
        {
            &quot;Owner&quot;: &quot;&quot;,
            &quot;Endpoint&quot;: &quot;pibehatin@1rentcar.top&quot;,
            &quot;Protocol&quot;: &quot;email&quot;,
            &quot;TopicArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic&quot;,
            &quot;SubscriptionArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic:5aacffbe-ccf7-40d5-be97-c55af7392935&quot;
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;publish-to-this-topic&quot;&gt;Publish to this topic&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4575 sns publish  --topic-arn arn:aws:sns:us-east-1:123456789012:test-topic --message 'Test Message!'
{
    &quot;MessageId&quot;: &quot;n/a&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;sqs&quot;&gt;SQS&lt;/h2&gt;

&lt;h3 id=&quot;create-a-queue&quot;&gt;Create a Queue&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4576 sqs create-queue --queue-name test_queue
{
    &quot;QueueUrl&quot;: &quot;http://localhost:4576/123456789012/test_queue&quot;
}

C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4576 sqs list-queues
{
    &quot;QueueUrls&quot;: [
        &quot;http://localhost:4576/123456789012/test_queue&quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;send-a-message-to-this-queue&quot;&gt;Send a message to this queue&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$  aws --endpoint-url=http://localhost:4576 sqs send-message --queue-url http://localhost:4576/123456789012/test_queue --message-body 'Test Message!'
{
    &quot;MD5OfMessageBody&quot;: &quot;df69267381a60e476252c989db9ac8ad&quot;,
    &quot;MessageId&quot;: &quot;a6ed436b-076a-0d8d-73e1-cc3291a19c28&quot;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;receive-the-message-from-this-queue&quot;&gt;Receive the message from this queue&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$  aws --endpoint-url=http://localhost:4576 sqs receive-message --queue-url http://localhost:4576/123456789012/test_queue
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;Test Message!&quot;,
            &quot;Attributes&quot;: {
                &quot;ApproximateFirstReceiveTimestamp&quot;: &quot;1.49138149959e+12&quot;,
                &quot;SenderId&quot;: &quot;AIDAIT2UOQQY3AUEKVGXU&quot;,
                &quot;ApproximateReceiveCount&quot;: &quot;1&quot;,
                &quot;SentTimestamp&quot;: &quot;1.49138142195e+12&quot;
            },
            &quot;ReceiptHandle&quot;: &quot;xuazrzyjcgpgzpzlxlyxmujbgzfkswixjkywshturlylrfwzyccutlumitgduyzddwkaoypcmswlkxrrjghdyztfewrpmkxdufptyketrfumwzicmggogdbaucwztvorplibccpfhirmalnixvfbklzrgncpisdsiuiajqwefxueqhuygfibmgqwx&quot;,
            &quot;MD5OfBody&quot;: &quot;df69267381a60e476252c989db9ac8ad&quot;,
            &quot;MessageId&quot;: &quot;a6ed436b-076a-0d8d-73e1-cc3291a19c28&quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you do this many times, the process seems to sleep. May be to simulate the message visibility? Here are 2 consecutive runs.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;real	0m15.185s
user	0m0.291s
sys	0m0.158s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;real	0m26.829s
user	0m0.291s
sys	0m0.167s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I have reported this issue here - &lt;a href=&quot;https://github.com/atlassian/localstack/issues/52&quot; target=&quot;_blank&quot;&gt;https://github.com/atlassian/localstack/issues/52&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;delete-this-message&quot;&gt;Delete this message&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws --endpoint-url=http://localhost:4576 sqs delete-message --queue-url http://localhost:4576/123456789012/test_queue --receipt-handle 'yugzzebhnnksfuvbjlibfnlejyqbulxqfegsnrgafjeabxaatxbmeiyfkfliedslohseosgjwkxhdzllpudhccjhorpkwbgjgyzeyzjwkfvqflathnvsmugeyevbqmfyqanuxetvdhcetseuwzrqpexogzggznndxmbqowtlalvqtffntdahhihel'

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;dynamodb&quot;&gt;DynamoDB&lt;/h2&gt;
&lt;h3 id=&quot;create-a-table&quot;&gt;Create a table&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws --endpoint-url=http://localhost:4569 dynamodb create-table --table-name test_table  --attribute-definitions AttributeName=first,AttributeType=S AttributeName=second,AttributeType=N --key-schema AttributeName=first,KeyType=HASH AttributeName=second,KeyType=RANGE --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
{
   &quot;TableDescription&quot;: {
       &quot;TableArn&quot;: &quot;arn:aws:dynamodb:us-east-1:000000000000:table/test_table&quot;,
       &quot;AttributeDefinitions&quot;: [
           {
               &quot;AttributeName&quot;: &quot;first&quot;,
               &quot;AttributeType&quot;: &quot;S&quot;
           },
           {
               &quot;AttributeName&quot;: &quot;second&quot;,
               &quot;AttributeType&quot;: &quot;N&quot;
           }
       ],
       &quot;ProvisionedThroughput&quot;: {
           &quot;NumberOfDecreasesToday&quot;: 0,
           &quot;WriteCapacityUnits&quot;: 5,
           &quot;ReadCapacityUnits&quot;: 5
       },
       &quot;TableSizeBytes&quot;: 0,
       &quot;TableName&quot;: &quot;test_table&quot;,
       &quot;TableStatus&quot;: &quot;CREATING&quot;,
       &quot;KeySchema&quot;: [
           {
               &quot;KeyType&quot;: &quot;HASH&quot;,
               &quot;AttributeName&quot;: &quot;first&quot;
           },
           {
               &quot;KeyType&quot;: &quot;RANGE&quot;,
               &quot;AttributeName&quot;: &quot;second&quot;
           }
       ],
       &quot;ItemCount&quot;: 0,
       &quot;CreationDateTime&quot;: 1491818083.66
   }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can verify our created table -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws --endpoint-url=http://localhost:4569 dynamodb list-tables
{
    &quot;TableNames&quot;: [
        &quot;test_table&quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and describe it too&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws --endpoint-url=http://localhost:4569 dynamodb describe-table --table-name test_table
{
   &quot;Table&quot;: {
       &quot;TableArn&quot;: &quot;arn:aws:dynamodb:us-east-1:000000000000:table/test_table&quot;,
       &quot;AttributeDefinitions&quot;: [
           {
               &quot;AttributeName&quot;: &quot;first&quot;,
               &quot;AttributeType&quot;: &quot;S&quot;
           },
           {
               &quot;AttributeName&quot;: &quot;second&quot;,
               &quot;AttributeType&quot;: &quot;N&quot;
           }
       ],
       &quot;ProvisionedThroughput&quot;: {
           &quot;NumberOfDecreasesToday&quot;: 0,
           &quot;WriteCapacityUnits&quot;: 5,
           &quot;ReadCapacityUnits&quot;: 5
       },
       &quot;TableSizeBytes&quot;: 0,
       &quot;TableName&quot;: &quot;test_table&quot;,
       &quot;TableStatus&quot;: &quot;ACTIVE&quot;,
       &quot;KeySchema&quot;: [
           {
               &quot;KeyType&quot;: &quot;HASH&quot;,
               &quot;AttributeName&quot;: &quot;first&quot;
           },
           {
               &quot;KeyType&quot;: &quot;RANGE&quot;,
               &quot;AttributeName&quot;: &quot;second&quot;
           }
       ],
       &quot;ItemCount&quot;: 0,
       &quot;CreationDateTime&quot;: 1491818083.66
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;put-items&quot;&gt;Put items&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws --endpoint-url=http://localhost:4569 dynamodb put-item --table-name test_table  --item '{&quot;first&quot;:{&quot;S&quot;:&quot;Jack&quot;},&quot;second&quot;:{&quot;N&quot;:&quot;42&quot;}}'

aws --endpoint-url=http://localhost:4569 dynamodb put-item --table-name test_table  --item '{&quot;first&quot;:{&quot;S&quot;:&quot;Manish&quot;},&quot;second&quot;:{&quot;N&quot;:&quot;40&quot;}}'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;### Scan Table&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws --endpoint-url=http://localhost:4569 dynamodb scan --table-name test_table

 {
    &quot;Count&quot;: 2,
    &quot;Items&quot;: [
        {
            &quot;second&quot;: {
                &quot;N&quot;: &quot;40&quot;
            },
            &quot;first&quot;: {
                &quot;S&quot;: &quot;Manish&quot;
            }
        },
        {
            &quot;second&quot;: {
                &quot;N&quot;: &quot;42&quot;
            },
            &quot;first&quot;: {
                &quot;S&quot;: &quot;Jack&quot;
            }
        }
    ],
    &quot;ScannedCount&quot;: 2,
    &quot;ConsumedCapacity&quot;: null
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="localstack" />
      

      

      
        <summary type="html">Localstack is a really useful project by Atlassian, which allows for local development using the AWS cloud stack. In other words, it is a Mock AWS Stack with support for many of the infrastructure commonly coded against.In other words, it is a Mock AWS Stack with support for many of the infrastructure commonly coded against. This post is a quick and handy gist of using AWS command line to work with localstack.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">SparkJava Maven Archetype with .war generation</title>
      
      <link href="https://lobster1234.github.io/2017/04/04/sparkjava-maven-archetype-webapp/" rel="alternate" type="text/html" title="SparkJava Maven Archetype with .war generation" />
      <published>2017-04-04T01:11:03-07:00</published>
      <updated>2017-04-04T01:11:03-07:00</updated>
      <id>https://lobster1234.github.io/2017/04/04/sparkjava-maven-archetype-webapp</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/04/04/sparkjava-maven-archetype-webapp/">&lt;p&gt;&lt;a href=&quot;http://sparkjava.com/&quot; target=&quot;_blank&quot;&gt;Spark Java&lt;/a&gt; is a Java 8 based lightweight framework which I highly recommend for writing APIs. It is so simple that it comes with an embedded jetty. However, in real world production you’d want to run it in an external container like Tomcat, JBoss, or Jetty (external), etc.
I found a &lt;a href=&quot;https://github.com/ImaginateWayne/sparkjava-archetypes&quot; target=&quot;_blank&quot;&gt;SparkJava Hello World archetype&lt;/a&gt;, however, it uses the embedded jetty. I was able to fork the repo and add .war support to it.&lt;/p&gt;

&lt;p&gt;The fork is &lt;a href=&quot;https://github.com/marqeta/sparkjava-archetypes/tree/master/sparkjava-helloworld-archetype&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post walks through the usage.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;clone-the-fork&quot;&gt;Clone the fork&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  C02STG51GTFM:work mpandit$ git clone https://github.com/marqeta/sparkjava-archetypes.git
  Cloning into 'sparkjava-archetypes'...
  remote: Counting objects: 115, done.
  remote: Compressing objects: 100% (13/13), done.
  remote: Total 115 (delta 3), reused 0 (delta 0), pack-reused 101
  Receiving objects: 100% (115/115), 13.20 KiB | 0 bytes/s, done.
  Resolving deltas: 100% (18/18), done.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;install-the-archetype-in-your-local-m2&quot;&gt;Install the archetype in your local .m2&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  C02STG51GTFM:work mpandit$ cd sparkjava-archetypes/
  C02STG51GTFM:sparkjava-archetypes mpandit$ cd sparkjava-helloworld-archetype/
  C02STG51GTFM:sparkjava-helloworld-archetype mpandit$ mvn install
  INFO] Scanning for projects...
  [INFO]                                                                         
  [INFO] ------------------------------------------------------------------------
  [INFO] Building Spark Java Hello World Archetype 1.0.0
  [INFO] ------------------------------------------------------------------------
  [INFO] ....
  [INFO] ....
  [INFO] ------------------------------------------------------------------------
  [INFO] BUILD SUCCESS
  [INFO] ------------------------------------------------------------------------
  [INFO] Total time: 7.029 s
  [INFO] Finished at: 2017-04-06T20:47:41-07:00
  [INFO] Final Memory: 13M/245M
  [INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;create-the-helloworld-project-using-this-archetype&quot;&gt;Create the HelloWorld project using this archetype&lt;/h3&gt;

&lt;p&gt;You may want to replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;groupId&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;artifactId&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; to match your code structure.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:sparkjava-helloworld-archetype mpandit$ cd ~/work
C02STG51GTFM:work mpandit$ mvn archetype:generate \
&amp;gt;     -DarchetypeGroupId=com.sparkjava \
&amp;gt;     -DarchetypeArtifactId=sparkjava-helloworld-archetype \
&amp;gt;     -DarchetypeVersion=1.0.0 \
&amp;gt;     -DgroupId=com.marqeta.mqpay \
&amp;gt;     -DartifactId=webhooks-api \
&amp;gt;     -Dversion=1.0-SNAPSHOT \
&amp;gt;     -Dpackage=com.marqeta.mqpay

[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spark Java Hello World Archetype 1.0.0
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] &amp;gt;&amp;gt;&amp;gt; maven-archetype-plugin:2.2:generate (default-cli) &amp;gt; generate-sources @ sparkjava-helloworld-archetype &amp;gt;&amp;gt;&amp;gt;
[INFO]
[INFO] &amp;lt;&amp;lt;&amp;lt; maven-archetype-plugin:2.2:generate (default-cli) &amp;lt; generate-sources @ sparkjava-helloworld-archetype &amp;lt;&amp;lt;&amp;lt;
[INFO]
[INFO] --- maven-archetype-plugin:2.2:generate (default-cli) @ sparkjava-helloworld-archetype ---
[INFO] Generating project in Interactive mode
[INFO] Archetype repository missing. Using the one from [com.sparkjava:sparkjava-helloworld-archetype:1.0.0] found in catalog local
[INFO] Using property: groupId = com.marqeta.mqpay
[INFO] Using property: artifactId = webhooks-api
[INFO] Using property: version = 1.0-SNAPSHOT
[INFO] Using property: package = com.marqeta.mqpay
Confirm properties configuration:
groupId: com.marqeta.mqpay
artifactId: webhooks-api
version: 1.0-SNAPSHOT
package: com.marqeta.mqpay
 Y: :

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Hit enter, and you will notice a webhooks-api folder with the project in it.&lt;/p&gt;

&lt;p&gt;You can notice the generated files - Most importantly the Spark Application and web.xml.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:work mpandit$ cd webhooks-api
C02STG51GTFM:webhooks-api mpandit$ tree
.
├── README.md
├── pom.xml
└── src
    └── main
        ├── java
        │   └── com
        │       └── marqeta
        │           └── mqpay
        │               └── SparkJavaHelloWorld.java
        └── webapp
            └── WEB-INF
                └── web.xml

8 directories, 4 files

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;build-the-project&quot;&gt;Build the Project&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:webhooks-api mpandit$ mvn install
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building webhooks-api 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ webhooks-api ---
[INFO] ..
[INFO] ..
[INFO] ..
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.140 s
[INFO] Finished at: 2017-04-06T20:52:07-07:00
[INFO] Final Memory: 21M/308M
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;deploy-the-generated-war-file&quot;&gt;Deploy the generated war file&lt;/h3&gt;
&lt;p&gt;I have tomcat under &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Downloads/tomcat&lt;/code&gt;. Replace it with your destination Servlet container’s webapp folder.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:webhooks-api mpandit$ cp target/webhooks-api-1.0-SNAPSHOT.war ~/Downloads/tomcat/webapps/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;verify-if-it-all-worked&quot;&gt;Verify if it all worked&lt;/h3&gt;

&lt;p&gt;We can do a simple curl, or browser to hit localhost.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:webhooks-api mpandit$ curl -i http://localhost:8080/webhooks-api-1.0-SNAPSHOT/hello
HTTP/1.1 200
Content-Type: text/html;charset=utf-8
Transfer-Encoding: chunked
Date: Fri, 07 Apr 2017 04:17:26 GMT

Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can modify the code in &lt;code class=&quot;highlighter-rouge&quot;&gt;SparkJavaHelloWorld.java&lt;/code&gt; to add more endpoints, or add new controllers (remember to add them to &lt;code class=&quot;highlighter-rouge&quot;&gt;web.xml&lt;/code&gt; so Spark can process them).&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="maven" />
      
        <category term="sparkjava" />
      

      

      
        <summary type="html">Spark Java is a Java 8 based lightweight framework which I highly recommend for writing APIs. It is so simple that it comes with an embedded jetty. However, in real world production you’d want to run it in an external container like Tomcat, JBoss, or Jetty (external), etc. I found a SparkJava Hello World archetype, however, it uses the embedded jetty. I was able to fork the repo and add .war support to it. The fork is here This post walks through the usage.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">AWS Lambda with Serverless Framework and Java/Maven - Part 1</title>
      
      <link href="https://lobster1234.github.io/2017/02/28/serverless-framework-java-maven-part-1/" rel="alternate" type="text/html" title="AWS Lambda with Serverless Framework and Java/Maven - Part 1" />
      <published>2017-02-28T22:15:37-08:00</published>
      <updated>2017-02-28T22:15:37-08:00</updated>
      <id>https://lobster1234.github.io/2017/02/28/serverless-framework-java-maven-part-1</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/02/28/serverless-framework-java-maven-part-1/">&lt;p&gt;&lt;a href=&quot;https://serverless.com&quot; target=&quot;_blank&quot;&gt;Serverless&lt;/a&gt; is a node.js based framework that makes creating, deploying, and managing serverless functions a breeze. We will use AWS as our FaaS (Function-as-a-Service) provider, although Serverless supports IBM OpenWhisk and Microsoft Azure as well.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will create and deploy a java-maven based AWS Lambda function. In Part-1 we will not modify any code, or even look at the generated code. We will focus on the deployment and the command line interface to manage lambda, provided out of the box by serverless framework.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h3&gt;
&lt;p&gt;Here is what the setup on my Mac looks like (Sierra)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt; (1.1.10) - you will need this if you do not have node/npm installed already.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; (v7.6.0)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; (4.1.2)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Apache Maven&lt;/code&gt; (3.2.5)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Oracle JDK&lt;/code&gt; (1.8.0_121)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;install-serverless&quot;&gt;Install Serverless&lt;/h3&gt;
&lt;p&gt;If you do not have &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; installed, use &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install node&lt;/code&gt; to install &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:~ mpandit$ npm install serverless -g
/usr/local/bin/serverless -&amp;gt; /usr/local/lib/node_modules/serverless/bin/serverless
/usr/local/bin/slss -&amp;gt; /usr/local/lib/node_modules/serverless/bin/serverless
/usr/local/bin/sls -&amp;gt; /usr/local/lib/node_modules/serverless/bin/serverless

&amp;gt; serverless@1.7.0 postinstall /usr/local/lib/node_modules/serverless
&amp;gt; node ./scripts/postinstall.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;configure-serverless-for-aws&quot;&gt;Configure Serverless for AWS&lt;/h3&gt;
&lt;p&gt;Serverless needs to use AWS credentials for an IAM user. I recommend creating a user with no access, and we can add permissions as we go.&lt;/p&gt;

&lt;p&gt;We create a &lt;em&gt;programmatic-access-only&lt;/em&gt; user called &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless&lt;/code&gt;, and added it to a new group called &lt;code class=&quot;highlighter-rouge&quot;&gt;Serverless&lt;/code&gt;. The group should have no permissions associated with it.&lt;/p&gt;

&lt;p&gt;Next, copy paste the AWS credentials of this user in the command below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless config credentials --provider aws --key &amp;lt;key&amp;gt; --secret &amp;lt;secret&amp;gt;

Serverless: Setting up AWS...
Serverless: Saving your AWS profile in &quot;~/.aws/credentials&quot;...
Serverless: Success! Your AWS access keys were stored under the &quot;default&quot; profile.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Serverless uses &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1&lt;/code&gt; region by default, which can be overriden by providing the &lt;code class=&quot;highlighter-rouge&quot;&gt;--region&lt;/code&gt; parameter.&lt;/p&gt;

&lt;h3 id=&quot;create-the-java-project&quot;&gt;Create the Java project&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:~ mpandit$ cd ~/work
Manishs-MacBook-Pro:work mpandit$ mkdir serverless-java
Manishs-MacBook-Pro:work mpandit$ cd serverless-java
Manishs-MacBook-Pro:serverless-java mpandit$ serverless create --template aws-java-maven

Serverless: Generating boilerplate...
 _______                             __
|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v1.7.0
 -------'

Serverless: Successfully generated boilerplate for template: &quot;aws-java-maven&quot;
Serverless: NOTE: Please update the &quot;service&quot; property in serverless.yml with your service name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;set-up-iam-policies&quot;&gt;Set up IAM Policies&lt;/h3&gt;
&lt;p&gt;If you run &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless info&lt;/code&gt;, it will report an error as our user does not really have any permissions.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless info

  Serverless Error ---------------------------------------

     User: arn:aws:iam::123456789209:user/serverless is not
     authorized to perform: cloudformation:DescribeStacks
     on resource: arn:aws:cloudformation:us-east-1:123456789209:stack/aws-java-maven-dev/*

  Get Support --------------------------------------------
     Docs:          docs.serverless.com
     Bugs:          github.com/serverless/serverless/issues

  Your Environment Information -----------------------------
     OS:                 darwin
     Node Version:       7.6.0
     Serverless Version: 1.7.0

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Lets add CloudFormation policy to this user. We will do this via adding the permission to the associated group.&lt;/p&gt;

&lt;p&gt;You will notice that there is no such thing as &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonCloudFormationFullAccess&lt;/code&gt;. Hence, we will need to create a custom policy.&lt;/p&gt;

&lt;p&gt;Click the Group name on the IAM console, and click the Permissions tab. Expand Inline Policies, and click the link that allows creation of an inline policy.&lt;/p&gt;

&lt;p&gt;In the page that opens up, select Policy Generator and proceed and make these selections -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Effect : Allow&lt;/li&gt;
  &lt;li&gt;AWS Service: AWS CloudFormation&lt;/li&gt;
  &lt;li&gt;Actions - All Actions Selected&lt;/li&gt;
  &lt;li&gt;ARN - *&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click Add Statement, and click Next Step. This will show the policy we just created. Rename it to &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless-cloudformation-policy&lt;/code&gt;. Click Apply.&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Stmt1488265872000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cloudformation:*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We will also need to give S3 access to this user, as serverless would need to upload the artifact to S3 for deployment via CloudFormation. We now add &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonS3FullAccess&lt;/code&gt; to this group, and our user will inherit it. This time we will click Attach Policy under Managed Policies instead of Inline Policies.&lt;/p&gt;

&lt;p&gt;Another Managed Policy is for CloudWatch Logs access, so we will select &lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatchLogsFullAccess&lt;/code&gt; and attach to the group.&lt;/p&gt;

&lt;p&gt;As a part of the deployment process, serverless would need to associate the lambda with the invocation role. In order to do that, attach &lt;code class=&quot;highlighter-rouge&quot;&gt;IAMFullAccess&lt;/code&gt; policy from the Managed Policies to the group as well.&lt;/p&gt;

&lt;p&gt;Finally, we add &lt;code class=&quot;highlighter-rouge&quot;&gt;AWSLambdaFullAccess&lt;/code&gt; to this group so the serverless framework can manage the services (lambda functions).&lt;/p&gt;

&lt;p&gt;To summarize, our &lt;code class=&quot;highlighter-rouge&quot;&gt;Serverless&lt;/code&gt; IAM Group should have following policies -&lt;/p&gt;

&lt;p&gt;Managed -&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonS3FullAccess&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatchLogsFullAccess&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IAMFullAccess&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AWSLambdaFullAccess&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inline - &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless-cloudformation-policy&lt;/code&gt; for CloudFormation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One thing to keep in mind is that for functions that are triggered by an event, the event source would need access to invoke the function. This is managed via function policies, which are set up when the trigger is configured. For instance, if you want the lambda to be triggered on an S3 event on a bucket, the association between the S3 bucket and the function will need to have a function policy.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you’ll notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless info&lt;/code&gt; command returns no services.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless info

  Serverless Error ---------------------------------------

     Stack with id aws-java-maven-dev does not exist

  Get Support --------------------------------------------
     Docs:          docs.serverless.com
     Bugs:          github.com/serverless/serverless/issues

  Your Environment Information -----------------------------
     OS:                 darwin
     Node Version:       7.6.0
     Serverless Version: 1.7.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;deploy-the-stack&quot;&gt;Deploy the stack&lt;/h3&gt;
&lt;p&gt;Since deployment of the stack is essentially setting up our lambda function (the template has a simple function), we need to create the artifact (jar).&lt;/p&gt;

&lt;p&gt;Since this is a maven project, we use maven to build the project.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ mvn clean install
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building hello dev
[INFO] ------------------------------------------------------------------------
...
...
...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 14.709 s
[INFO] Finished at: 2017-02-27T23:26:00-08:00
[INFO] Final Memory: 23M/145M
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now that we have the artifact in &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; folder (&lt;code class=&quot;highlighter-rouge&quot;&gt;hello-dev.jar&lt;/code&gt;), we can go ahead deploy it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless deploy
Serverless: Creating Stack...
Serverless: Checking Stack create progress...
.....
Serverless: Stack create finished...
Serverless: Uploading CloudFormation file to S3...
Serverless: Uploading service .zip file to S3 (1.98 MB)...
Serverless: Updating Stack...
Serverless: Checking Stack update progress...
..................
Serverless: Stack update finished...
Service Information
service: aws-java-maven
stage: dev
region: us-east-1
api keys:
  None
endpoints:
  None
functions:
  aws-java-maven-dev-hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can check the AWS CloudFormation section in the console to view details of the stack that has just been created.&lt;/p&gt;

&lt;p&gt;Now that our service is deployed, it wil show up under &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless info&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless info
Service Information
service: aws-java-maven
stage: dev
region: us-east-1
api keys:
  None
endpoints:
  None
functions:
  aws-java-maven-dev-hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, lets try to invoke it.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless invoke --function  hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{\&quot;message\&quot;:\&quot;Go Serverless v1.x! Your function executed successfully!\&quot;,\&quot;input\&quot;:{}}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;X-Powered-By&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS Lambda &amp;amp; serverless&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;isBase64Encoded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The function can also be invoked with an input. The input is essentially a Map, so we can pass it a JSON string with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--data&lt;/code&gt; parameter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless invoke --function hello --data '{&quot;key&quot;:&quot;value&quot;}'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{\&quot;message\&quot;:\&quot;Go Serverless v1.x! Your function executed successfully!\&quot;,\&quot;input\&quot;:{\&quot;key\&quot;:\&quot;value\&quot;}}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;X-Powered-By&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS Lambda &amp;amp; serverless&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;isBase64Encoded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A good idea would be to explore the CloudWatch Logs and Lambda metrics for our function from the console.&lt;/p&gt;

&lt;p&gt;The same can be done command line, like so -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless logs --function hello
START RequestId: f8390071-fd8d-11e6-9195-554889504121 Version: $LATEST
2017-02-28 08:14:48 &amp;lt;f8390071-fd8d-11e6-9195-554889504121&amp;gt; INFO  com.serverless.Handler:17 - received: {}
END RequestId: f8390071-fd8d-11e6-9195-554889504121
REPORT RequestId: f8390071-fd8d-11e6-9195-554889504121	Duration: 445.52 ms	Billed Duration: 500 ms 	Memory Size: 1024 MB	Max Memory Used: 57 MB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can also look at the metrics associated with our functions (The 1 error is because I had passed a malformed JSON input).&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless metrics
Service wide metrics
February 27, 2017 1:59 AM - February 28, 2017 1:59 AM

Invocations: 7
Throttles: 0
Errors: 1
Duration (avg.): 276.55ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless metrics --function hello
hello
February 27, 2017 1:59 AM - February 28, 2017 1:59 AM

Invocations: 7
Throttles: 0
Errors: 1
Duration (avg.): 276.55ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that we have successfully deployed and tested the templated service, we are now ready to dive deeper into the actual code, configuration, and constructs of serverless framework. That will be Part-2 of this tutorial.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="serverless" />
      
        <category term="lambda" />
      

      

      
        <summary type="html">Serverless is a node.js based framework that makes creating, deploying, and managing serverless functions a breeze. We will use AWS as our FaaS (Function-as-a-Service) provider, although Serverless supports IBM OpenWhisk and Microsoft Azure as well. In this tutorial, we will create and deploy a java-maven based AWS Lambda function. In Part-1 we will not modify any code, or even look at the generated code. We will focus on the deployment and the command line interface to manage lambda, provided out of the box by serverless framework.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Notes from AWS Lambda Deep Dive Webinar</title>
      
      <link href="https://lobster1234.github.io/2017/02/27/notes-from-aws-lambda-deep-dive-webinar/" rel="alternate" type="text/html" title="Notes from AWS Lambda Deep Dive Webinar" />
      <published>2017-02-27T07:20:44-08:00</published>
      <updated>2017-02-27T07:20:44-08:00</updated>
      <id>https://lobster1234.github.io/2017/02/27/notes-from-aws-lambda-deep-dive-webinar</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/02/27/notes-from-aws-lambda-deep-dive-webinar/">&lt;p&gt;I’ve put together my notes from the AWS webinar, which can be seen &lt;a href=&quot;https://www.youtube.com/watch?v=dB4zJk_fqrU&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lambda is the key enabler and a core AWS component for serverless computing. Lets you run the code you want, without worrying about the underlying infrastructure and provisioning. It is also cost efficient, as there are no instances that are in running state but idle. Lambda handles scaling up and scaling down as needed, transparently to the customer.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Event Source - Changes in state of the resources or data, or any events triggered explicitly or implicitly. A large number of AWS services can act as Event Sources - Like S3 (Object PUT, DELETE..), DynamoDB, IoT, CloudFormation, CloudWatch, SNS, API Gateway and Cron schedule to name a few.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Function - The piece of code that would be run when that event occurs. The function can access any services downstream if needed. Currently Supported languages are Node.js, Python, Java 8 and C#.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-cases&quot;&gt;Use cases&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Stateless, event-based file/data processing.&lt;/li&gt;
  &lt;li&gt;On demand execution of some logic where an event is generated via an explicit action.&lt;/li&gt;
  &lt;li&gt;Custom Workflows for state changes within AWS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Code can be developed in the 4 supported languages (currently).&lt;/li&gt;
  &lt;li&gt;The code should have no affinity or access to the underlying infrastructure, and should use external infrastructure for state (like a cache or a database). The code should be entirely stateless.&lt;/li&gt;
  &lt;li&gt;The memory usage allowed is from 128MB to 1.5GB in increments of 64MB. CPU and network are allocated proportionately.&lt;/li&gt;
  &lt;li&gt;Lambda can be invoked synchronously (the client waits for a response from the function), and asynchronously (fire and forget, a 202 Accepted).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-in-it&quot;&gt;What is in it&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Handler()&lt;/code&gt; function - Entry point for Lambda.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Event&lt;/code&gt; Object - The request (representation of the event). Can be a stream or an simple data type.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Context&lt;/code&gt; Object - Provides a handle to the environment and basic utilities like time, logging and client/event info.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FunctionConfiguration&lt;/code&gt; Metadata
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VpcConfig&lt;/code&gt; - Useful if you want to access your private resources within your VPC. Enables the lambda environment to be able to talk to your VPC.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DeadLetterConfig&lt;/code&gt; - Failed events are sent to SQS or SNS. A dead letter queue or an SNS topic can be configured where the event is sent back in case the lambda function fails to process it. It is only available for async requests.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt; - Key value pairs as a part of the configuration, which are then available as environment variables to the function. They’re encrypted at rest via KMS, and are decrypted during lambda initialization.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;limits&quot;&gt;Limits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;512 MB of temporary storage (ephemeral).&lt;/li&gt;
  &lt;li&gt;1024 File Descriptors&lt;/li&gt;
  &lt;li&gt;1024 processes + threads&lt;/li&gt;
  &lt;li&gt;300 seconds maximum execution duration&lt;/li&gt;
  &lt;li&gt;6MB Request payload&lt;/li&gt;
  &lt;li&gt;6MB Response&lt;/li&gt;
  &lt;li&gt;50MB Deployment package (compressed)&lt;/li&gt;
  &lt;li&gt;250MB Uncompressed&lt;/li&gt;
  &lt;li&gt;4KB Environment variables&lt;/li&gt;
  &lt;li&gt;100 Concurrent Executions (can be increased by requesting Amazon)&lt;/li&gt;
  &lt;li&gt;75GB total size of all lambdas across one region.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;container-model&quot;&gt;Container Model&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Each execution happens in a container that is created and managed by AWS. Containers are  re-used. This re-use can let us share cached static data, or DB connections between invocations. The folder &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; is available across invocations. However, do not rely on this, use it opportunistically.&lt;/li&gt;
  &lt;li&gt;Bootstrapping happens when a function is invoked for the first time after creation or update. The start time can be reduced by allowing more memory, having a smaller deployment package. Clearly Python and Node.js will be much quicker to bootstrap than Java and C#. Strip down the deployment of all the libraries that are not needed, as lambda will load everything that is present in the package. Mode to an interpreted language if cold starts are not within acceptable limits.&lt;/li&gt;
  &lt;li&gt;Containers run Amazon Linux AMI. If there are any native binaries, compile against this environment.&lt;/li&gt;
  &lt;li&gt;OpenJDK 1.8 is already provided by the container, so does not need to be packaged. Similarly AWS SDK for other languages, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A zip file or a jar file containing the code and dependencies. Use Maven or Eclipse to make a package.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cicd-options&quot;&gt;CI/CD Options&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Use AWS CodeCommit, CodeBuild, CodePipeline&lt;/li&gt;
  &lt;li&gt;Use Github, Jenkins, CodeShip&lt;/li&gt;
  &lt;li&gt;Put the package on an S3 location&lt;/li&gt;
  &lt;li&gt;AWS &lt;code class=&quot;highlighter-rouge&quot;&gt;SAM&lt;/code&gt; - Serverless Application Model&lt;/li&gt;
  &lt;li&gt;CloudFormation supports &lt;code class=&quot;highlighter-rouge&quot;&gt;SAM&lt;/code&gt; extensions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;versioning&quot;&gt;Versioning&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A version is an immutable copy of code+config&lt;/li&gt;
  &lt;li&gt;Each version gets it’s own ARN&lt;/li&gt;
  &lt;li&gt;Versions can be aliased (like 13=Dev, 11=Prod, 12=Beta)&lt;/li&gt;
  &lt;li&gt;The aliasing enables rollbacks or staged promotions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;security-and-scaling&quot;&gt;Security and Scaling&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The Push model, where the upstream service invokes the function. The resource level policies are applied to the lambda function which control which resources can invoke it (Like allow S3 to invoke this function). The policies are already created when the event source is attached via the console.&lt;/li&gt;
  &lt;li&gt;The pull model is used for stream event sources (Kinesis and DynbamoDB). Here lambda polls instead of the resources pushing. An IAM policy is created for the Lambda to be able to poll the source (instead of the other way around for Push).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;concurrency-and-scaling&quot;&gt;Concurrency and Scaling&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Requests per second * function execution duration&lt;/li&gt;
  &lt;li&gt;When throttled, the async events are retried automatically for 6 hours, with delays between retries.&lt;/li&gt;
  &lt;li&gt;For sync requests, the client gets a 429.&lt;/li&gt;
  &lt;li&gt;Use async model if bursts are expected as retries are handled automatically when throttled.&lt;/li&gt;
  &lt;li&gt;Request AWS to increase the concurrency limit if consistently getting throttled.&lt;/li&gt;
  &lt;li&gt;Ensure the downstream also keeps up with Lambda throttling, for example, if each lambda creates 10 MySQL connections, 100 concurrent invocations is not something MySQL will be able to handle.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;debugging-and-operations&quot;&gt;Debugging and Operations&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;4xx errors can be invalid parameter value (400), resource not found (404), request too large (413) and can be fixed by the developer.&lt;/li&gt;
  &lt;li&gt;5xx need to be fixed by the admin&lt;/li&gt;
  &lt;li&gt;Stream based events are retried till the data expires&lt;/li&gt;
  &lt;li&gt;Async invocations are retried 2 extra times before sent to dead letter queue&lt;/li&gt;
  &lt;li&gt;For sync invocations, the caller will need to implement the retry logic when they get an error from the call&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tracing-tracking-and-logging&quot;&gt;Tracing, Tracking and Logging&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;AWS X-Ray (Preview) for detailed breakdown of lambda performance and behavior metrics.&lt;/li&gt;
  &lt;li&gt;All calls made to lambda are logged to CloudTrail. They can be delivered to S3 and analyzed.&lt;/li&gt;
  &lt;li&gt;Every start, end, and report goes to CloudWatch&lt;/li&gt;
  &lt;li&gt;Java User logs can be created via &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.println()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.err.println()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LambdaLogger.log()&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Log4j.*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Default metrics are free - which include duration, throttles, errors, etc. Custom metrics can also be added by the function itself via the CloudWatch API.&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="serverless" />
      
        <category term="lambda" />
      

      

      
        <summary type="html">I’ve put together my notes from the AWS webinar, which can be seen here. Lambda is the key enabler and a core AWS component for serverless computing. Lets you run the code you want, without worrying about the underlying infrastructure and provisioning. It is also cost efficient, as there are no instances that are in running state but idle. Lambda handles scaling up and scaling down as needed, transparently to the customer.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">AWS Training at Marqeta : SQS Lab</title>
      
      <link href="https://lobster1234.github.io/2017/02/17/marqeta-aws-sqs-lab/" rel="alternate" type="text/html" title="AWS Training at Marqeta : SQS Lab" />
      <published>2017-02-17T19:10:44-08:00</published>
      <updated>2017-02-17T19:10:44-08:00</updated>
      <id>https://lobster1234.github.io/2017/02/17/marqeta-aws-sqs-lab</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/02/17/marqeta-aws-sqs-lab/">&lt;p&gt;This post is the handout for the SQS Lab I ran as a part of hands-on AWS training to the Engineering + DevOps team at &lt;a href=&quot;https://www.marqeta.com&quot; target=&quot;_blank&quot;&gt;Marqeta&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this lab we will use AWS CLI to work with SQS. I’ve replaced the account ID with 111111111111.&lt;/p&gt;

&lt;h2 id=&quot;prepare-the-cli-aws-shell&quot;&gt;Prepare the CLI (aws-shell)&lt;/h2&gt;
&lt;p&gt;In the previous lab we configured &lt;code class=&quot;highlighter-rouge&quot;&gt;aws-shell&lt;/code&gt; on our laptops with an access key, secret, and default region. However, the user only had &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonS3FullAccess&lt;/code&gt; via a managed policy, and &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonEC2FullAccess&lt;/code&gt; via the &lt;code class=&quot;highlighter-rouge&quot;&gt;developers&lt;/code&gt; group.&lt;/p&gt;

&lt;p&gt;We will fire up the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws-shell&lt;/code&gt; and use basic SQS commands. Autocomplete feature of the shell will come in very handy as you’ll see.&lt;/p&gt;

&lt;p&gt;First, we will try to list the queues we have in our account.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs list-queues

An error occurred (AccessDenied) when calling the ListQueues operation: Access to the resource https://queue.amazonaws.com/ is denied.
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Since the access key and secret we’re using is not tied to SQS policy, we go ahead and add that to the &lt;code class=&quot;highlighter-rouge&quot;&gt;developers&lt;/code&gt; group. It is called &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonSQSFullAccess&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once done, you should see an empty list for the same command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs list-queues
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, lets create a queue.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs create-queue --queue-name my_test_queue
{
    &quot;QueueUrl&quot;: &quot;https://queue.amazonaws.com/111111111111/my_test_queue&quot;
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can go on the console in SQS section, and see this queue being created. You will notice that the Queue URL on the console is a bit richer, with region in there as well.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;	https://sqs.us-east-1.amazonaws.com/111111111111/my_test_queue
&lt;/code&gt;
Now that we’ve created a queue, we will go ahead and send a message to it. As you do this, you will notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;aws-shell&lt;/code&gt; will autocomplete the queue-url for us.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs send-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue --message-body &quot;Hello!&quot;
{
    &quot;MD5OfMessageBody&quot;: &quot;952d2c56d0485958336747bcdd98590d&quot;,
    &quot;MessageId&quot;: &quot;31e40b96-c61c-4b6a-8682-67ebb7badc36&quot;
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The max message size is 256KB, with a default visibility timeout of 30 seconds. This means whoever consumes this message has 30 seconds to process it, otherwise it will become available to other consumers for processing, i.e. back in the queue. Lets give that a try.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;Hello!&quot;,
            &quot;ReceiptHandle&quot;: &quot;AQEBD9ziSgXsnzTdBNzjNDksLpLU/ASfSdxdeFT1MkzCezLdnKL9HljPpsRaz97eSdjRCm27c3/iNcaITv2PEFgpNs62zezc4jpzWh3ysPYVwVgBjqbhobVQiF8JBRxuHSfqgQ8qSsgF2QOpU2Bn6qE/wC/LSqwxNqd/aQRab5EUA9zgqHx9L15FIlbmdGrz8Qz6ebPyFi4Lr5gb+S79t+wN9s0yE9+kEQvKjeweF0OHRyGeBWybwEFVlc3qPeo0QT9WLdkQ68PKBCY8s7djSJoD7npv9j2YeFS4+EcNzJ9ql5x2wpzcLOF672exXivigcjGMUdP9JT32Xju61ixWYnIDgd7KXWo12f+VgSc7/s143kZGPNwpkicvoNRlmzx/urI&quot;,
            &quot;MD5OfBody&quot;: &quot;952d2c56d0485958336747bcdd98590d&quot;,
            &quot;MessageId&quot;: &quot;31e40b96-c61c-4b6a-8682-67ebb7badc36&quot;
        }
    ]
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We immediately fire the same command, and notice nothing comes back.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is due to the visibility timeout of 30 seconds. Lets wait 30 seconds, and you’ll see the same message comes back on the queue.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;Hello!&quot;,
            &quot;ReceiptHandle&quot;: &quot;AQEBU5MiEmzKdpwJ705Ehe6brf5fmkx0sa+m2ibZxbVsmdsKiHX+RyDu4s+T2yBNP9MS7NjSmEA9l/dLgwn55cN6qDCTCxxOrvVEp1MVMqximPCjzFgkmYTYR5w32TBqamDxKqadAGPUgjLyLlvD/M5tc+MuyvrFL2WaWovK7cpMRk5VGlW+pSaC+TNfhtt2QeLpNW4GUnLxtAu96BrY54ll3jelHtt3jnuAqNOaJ6nzDwKvfonyrpdd4sVS+cKPo4LzS47kJyX8p/gZdi/7cY5Oty+1RhfEkfmkEUKm2Eg4DK8Rm+E9jyUjYK+VmxWc/0JAeKwGRkIuZEuYW1kWav7y3/PkJNaXHJvVQtyLDQiSy8zf8wrjyoyGknaonmUIHtyP&quot;,
            &quot;MD5OfBody&quot;: &quot;952d2c56d0485958336747bcdd98590d&quot;,
            &quot;MessageId&quot;: &quot;31e40b96-c61c-4b6a-8682-67ebb7badc36&quot;
        }
    ]
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is where the application developers have to pick a right visibility timeout, which should allow the consumer enough time to process the message and delete it from the queue, so multiple processing does not occur. Let us delete the message after processing (reading) it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs delete-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue --receipt-handle &quot;AQEBHh4KsuIv0QABOD49rbmmu6V0r0I34ENhrQqT5me0pPMfM2KOBWX+NvqPVV8eaB3T7zujcJj0qgQlvvqbzgCMKeKYSlExbVgLs6tFHKZgR6wUVH/X6RhN579u4LHFo3SBu9IExDpz226sEoVAn0MOhOlvArU72xJQm+pNPwRjEicQxu6MQPakfiq8yHGICYSUPyBhz+/OwxLx4iDe8exWY2Esvz2zt1q7kD/u2PqzPXiL0uIBsW18tyslMfftGSEV3cB19HFJEHNJ9olZtstNMrX1MAGJZqDHxS1rllSCrNCiqD4264Ou/eyf7duPwhvNT97mmUS0NbCuhTX5P3Kt4BytNFwKY3Qu13vkgb1rciO/1NNifwNbJ+gjOI7xS246&quot;
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice that we need to provide the &lt;code class=&quot;highlighter-rouge&quot;&gt;receipt-handle&lt;/code&gt; that we got after receiving the message in order to delete it.&lt;/p&gt;

&lt;p&gt;Next we can go on the console and look at cloudwatch monitoring. We will also create an alarm to notify us if a message has not been picked up for N minutes. This is something that can alert us of dead consumers, or an issue with processing the messages.&lt;/p&gt;

&lt;h2 id=&quot;more-on-visibility-timeout&quot;&gt;More on visibility timeout&lt;/h2&gt;

&lt;p&gt;In order to change visibility timeout, which can be done when the consumer does not want the message to go back in the queue, like it wants to retry processing the message itself instead of passing it on to another consumer, it can be done by providing the &lt;code class=&quot;highlighter-rouge&quot;&gt;queue-url&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;receipt-handle&lt;/code&gt; like so - note that &lt;code class=&quot;highlighter-rouge&quot;&gt;visibility-timeout&lt;/code&gt; is specified in seconds.&lt;/p&gt;

&lt;p&gt;Lets push a message, consume it, and then increase the &lt;code class=&quot;highlighter-rouge&quot;&gt;visibility-timeout&lt;/code&gt; to 2 minutes (120 seconds).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs send-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue --message-body &quot;Gonna take long&quot;
{
    &quot;MD5OfMessageBody&quot;: &quot;de80b2f443dc0a15382a40a625b74d3a&quot;,
    &quot;MessageId&quot;: &quot;8efcd759-eb0f-48a3-92fe-5b83e0dd8740&quot;
}
aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;Gonna take long&quot;,
            &quot;ReceiptHandle&quot;: &quot;AQEBYkUuIUjSEnzSI7ymjk/oRB0K9osJ2Nyud1+pij4nVAJ8taZ+FHq1kvWIm4LGrjZEVveMPOjsxP/nmmaUCEXAZKYQHATnQDT2Hqt+NJiMQG+EFd6HBTXtT5gH29UN/ieAOGHAV6zWR2IJH+h4eRA8U7tgciatz5P/KGrHgH1qmxe9EoSkXOulikG82cs22gymNBeqNe+TZiNgwH6Kfd6CwTcCh8oowk1YXMqXaVCBso1n1R7JtMkDWd4R1CnEVCtTt1ZCfbVgHrKADPFkuwUYIp0lEXXYeDD5GqvJBaR3+INFW2t7qEMb0uzPr1s9n42W2uMEC7u45dqYss9mWlNhrI7+YG6IxCL0jx7VxIIrkOj1ihsHgwj+bxMCH7Eiu+87&quot;,
            &quot;MD5OfBody&quot;: &quot;de80b2f443dc0a15382a40a625b74d3a&quot;,
            &quot;MessageId&quot;: &quot;8efcd759-eb0f-48a3-92fe-5b83e0dd8740&quot;
        }
    ]
}

aws&amp;gt; sqs change-message-visibility --queue-url https://queue.amazonaws.com/111111111111/my_test_queue --receipt-handle &quot;AQEBYkUuIUjSEnzSI7ymjk/oRB0K9osJ2Nyud1+pij4nVAJ8taZ+FHq1kvWIm4LGrjZEVveMPOjsxP/nmmaUCEXAZKYQHATnQDT2Hqt+NJiMQG+EFd6HBTXtT5gH29UN/ieAOGHAV6zWR2IJH+h4eRA8U7tgciatz5P/KGrHgH1qmxe9EoSkXOulikG82cs22gymNBeqNe+TZiNgwH6Kfd6CwTcCh8oowk1YXMqXaVCBso1n1R7JtMkDWd4R1CnEVCtTt1ZCfbVgHrKADPFkuwUYIp0lEXXYeDD5GqvJBaR3+INFW2t7qEMb0uzPr1s9n42W2uMEC7u45dqYss9mWlNhrI7+YG6IxCL0jx7VxIIrkOj1ihsHgwj+bxMCH7Eiu+87&quot; --visibility-timeout 120
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now even if we try to get message after 30 seconds, this message will not show up. However, it will after 120 seconds unless we delete it. Remember that this value is absolute, which means it changes the timeout from default (30 seconds) to 120 seconds and not to 30+120 seconds.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="sqs" />
      

      

      
        <summary type="html">This post is the handout for the SQS Lab I ran as a part of hands-on AWS training to the Engineering + DevOps team at Marqeta.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">AWS Primer and Quickstart Presentation</title>
      
      <link href="https://lobster1234.github.io/2017/02/01/aws-primer-and-quickstart/" rel="alternate" type="text/html" title="AWS Primer and Quickstart Presentation" />
      <published>2017-02-01T07:22:10-08:00</published>
      <updated>2017-02-01T07:22:10-08:00</updated>
      <id>https://lobster1234.github.io/2017/02/01/aws-primer-and-quickstart</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/02/01/aws-primer-and-quickstart/">Slides from my introductory talk on AWS at Marqeta.

&lt;!--more--&gt;
&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;13c65dd7c1744c319001b4415e3ca439&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="presentations" />
      

      

      
        <summary type="html">Slides from my introductory talk on AWS at Marqeta.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Balanced Brackets</title>
      
      <link href="https://lobster1234.github.io/2016/12/24/balance-brackets-o-n-solution/" rel="alternate" type="text/html" title="Balanced Brackets" />
      <published>2016-12-24T21:22:10-08:00</published>
      <updated>2016-12-24T21:22:10-08:00</updated>
      <id>https://lobster1234.github.io/2016/12/24/balance-brackets-o-n-solution</id>
      <content type="html" xml:base="https://lobster1234.github.io/2016/12/24/balance-brackets-o-n-solution/">&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/balanced-brackets&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is the problem statement. Print YES if the brackets in a given string are balanced, else print NO. Here is my O(N) submission to the challenge.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.text.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.math.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.regex.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBalanced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;YES&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NO&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isBalanced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'{'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'['&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;']'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'['&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'}'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'{'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;')'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="data-structures" />
      
        <category term="algorithms" />
      

      

      
        <summary type="html">Here is the problem statement. Print YES if the brackets in a given string are balanced, else print NO. Here is my O(N) submission to the challenge.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Multitenant MySQL Setup</title>
      
      <link href="https://lobster1234.github.io/2016/11/03/multitenant-mysql/" rel="alternate" type="text/html" title="Multitenant MySQL Setup" />
      <published>2016-11-03T10:05:22-07:00</published>
      <updated>2016-11-03T10:05:22-07:00</updated>
      <id>https://lobster1234.github.io/2016/11/03/multitenant-mysql</id>
      <content type="html" xml:base="https://lobster1234.github.io/2016/11/03/multitenant-mysql/">&lt;p&gt;It is much easier to make API/code multi-tenant, but it is a different story for databases. This problem exists at pretty much all SaaS based solutions, intending to provide data and service level isolation for many users/customers while trying to keep the code + database scalable. However, here are a few strategies that can be employed, based on the pros/cons and the freedom/constraints driving the solution.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;use-a-tenant_id-for-each-record&quot;&gt;Use a tenant_id for each record&lt;/h2&gt;

&lt;h4 id=&quot;how&quot;&gt;How&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Single database running on single instance&lt;/li&gt;
  &lt;li&gt;Every record has a &lt;code class=&quot;highlighter-rouge&quot;&gt;tenant_id&lt;/code&gt; as a part of the composite primary key.&lt;/li&gt;
  &lt;li&gt;Application will need to provide this &lt;code class=&quot;highlighter-rouge&quot;&gt;tenant_id&lt;/code&gt; for every query as a part of the where clause&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pros&quot;&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;One database, one instance&lt;/li&gt;
  &lt;li&gt;Relatively easy to run cross-tenant queries&lt;/li&gt;
  &lt;li&gt;Relatively easier to manage and apply schema updates&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cons&quot;&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;No db level isolation of tenant data&lt;/li&gt;
  &lt;li&gt;No option to support schema changes specific to a tenant&lt;/li&gt;
  &lt;li&gt;Imbalance of tenants can adversely affect the DB performance, creating hotspots&lt;/li&gt;
  &lt;li&gt;The sheer size and operation frequency increases the chances of db file corruption&lt;/li&gt;
  &lt;li&gt;Will hit the file system size limits&lt;/li&gt;
  &lt;li&gt;Trust the developer to provide the additional where condition&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;put-every-tenant-in-a-separate-db-same-instance&quot;&gt;Put every tenant in a separate db, same instance&lt;/h2&gt;

&lt;h4 id=&quot;how-1&quot;&gt;How&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Every tenant gets his schema, but runs under the same physical database server&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;tenant_id&lt;/code&gt; becomes the db name, so the queries do not change, but the connection string changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pros-1&quot;&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Managable dataset size per tenant&lt;/li&gt;
  &lt;li&gt;Better control of any schema changes specific to a tenant, if needed.&lt;/li&gt;
  &lt;li&gt;DB level isolation of tenant data&lt;/li&gt;
  &lt;li&gt;Easier to roll out tenant specific code release as other tenants wont be affected by schema changes if the app servers are deployed separately per tenant.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cons-1&quot;&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Will need to apply schema changes to all such DBs, making coordination of code changes harder if dedicated app servers talk to the db.&lt;/li&gt;
  &lt;li&gt;Will hit the system file size limits, as it is still 1 physical file&lt;/li&gt;
  &lt;li&gt;The fact that there is only 1 physical file, there could be IO contention just like 1 db per instance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;put-every-tenant-in-its-own-instance&quot;&gt;Put every tenant in its own instance&lt;/h2&gt;

&lt;h4 id=&quot;how-2&quot;&gt;How&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Every tenant gets a provisioned hardware mysql instance&lt;/li&gt;
  &lt;li&gt;The code will need to use separate connection strings, no impact to SQL&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pros-2&quot;&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Complete physical isolation of tenant data&lt;/li&gt;
  &lt;li&gt;Control of the DB instance size based on the load exerted by the tenant&lt;/li&gt;
  &lt;li&gt;Predictable Disk IO performance, due to isolation of data usage patterns&lt;/li&gt;
  &lt;li&gt;Can have customized DB schema changes to a tenant&lt;/li&gt;
  &lt;li&gt;Easier to roll out tenant specific code release (if dedicated app servers talk to a specific db)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cons-2&quot;&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Each tenant DB instance is $$&lt;/li&gt;
  &lt;li&gt;The cost quickly adds up with secondaries (standby) and read replicas if needed&lt;/li&gt;
  &lt;li&gt;Same challenge with DB schema updates across all tenants&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="databases" />
      

      

      
        <summary type="html">It is much easier to make API/code multi-tenant, but it is a different story for databases. This problem exists at pretty much all SaaS based solutions, intending to provide data and service level isolation for many users/customers while trying to keep the code + database scalable. However, here are a few strategies that can be employed, based on the pros/cons and the freedom/constraints driving the solution.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">2016 AWS Associate Level Certification Exam Notes</title>
      
      <link href="https://lobster1234.github.io/2016/10/29/aws-certification-notes/" rel="alternate" type="text/html" title="2016 AWS Associate Level Certification Exam Notes" />
      <published>2016-10-29T02:05:22-07:00</published>
      <updated>2016-10-29T02:05:22-07:00</updated>
      <id>https://lobster1234.github.io/2016/10/29/aws-certification-notes</id>
      <content type="html" xml:base="https://lobster1234.github.io/2016/10/29/aws-certification-notes/">&lt;p&gt;These are my notes on EC2 and VPC for the AWS Certified Associate Level exams. I attempted the &lt;a href=&quot;https://aws.amazon.com/certification/certified-solutions-architect-associate&quot; target=&quot;_blank&quot;&gt;AWS Certified Solution Architect - Associate&lt;/a&gt; and &lt;a href=&quot;https://aws.amazon.com/certification/certified-developer-associate/&quot; target=&quot;_blank&quot;&gt;AWS Certified Developer - Associate&lt;/a&gt; and scored 78% and 90% respectively.&lt;/p&gt;

&lt;p&gt;It took me about a week (3-4 hours a day) to prepare for both, after being working professionally with AWS for over 3 years.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;ec2&quot;&gt;EC2&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Can start an AMI to create any number of on-demand instances by using the RunInstances call. Default max is 20 per account.&lt;/li&gt;
  &lt;li&gt;If the request is good, the RunInstances call returns success with a list of DNS names, and instances begin to launch within 10 minutes.&lt;/li&gt;
  &lt;li&gt;The launch request is associated with a reservation ID. One reservation ID can map to multiple instances which are all a part of one launch request.&lt;/li&gt;
  &lt;li&gt;The status can be checked via DescribeInstances call&lt;/li&gt;
  &lt;li&gt;Can be terminated using TerminateInstances call&lt;/li&gt;
  &lt;li&gt;If a running instances uses EBS-backed root volume (boot partition), it can be stopped by StopInstances call. This preserves the data.&lt;/li&gt;
  &lt;li&gt;The same can be done via CLI or the Console instead of REST APIs&lt;/li&gt;
  &lt;li&gt;EBS based root device store will preserve data, hence it is not tied to the life of the instance. Local instance based store persistence is tied to the life of the instance. There is no “stop” option.&lt;/li&gt;
  &lt;li&gt;Local instance store is inexpensive&lt;/li&gt;
  &lt;li&gt;An AMI (Amazon Machine Image) is a package with base operating system, and optional set of applications to boot an instance.&lt;/li&gt;
  &lt;li&gt;You can create a custom AMI, but have to bundle it with either EBS backed store or Instance backed store.&lt;/li&gt;
  &lt;li&gt;For instances backed with local instance store, the instances use S3&lt;/li&gt;
  &lt;li&gt;Reserved limit is 20 for all instance types&lt;/li&gt;
  &lt;li&gt;On demand limit varies, and is 20 for all T2, M1, M3 type instances. I plan to roll the dice on these questions, so won’t bother remembering them.&lt;/li&gt;
  &lt;li&gt;Some instance types are not available in all regions.&lt;/li&gt;
  &lt;li&gt;The instances can send emails, but have a fixed amount which needs to be requested to be increased if needed.&lt;/li&gt;
  &lt;li&gt;Currently supported operating systems are RHEL, Centos, Ubuntu, Oracle Linux, Amazon Linux, Gentoo, Suse, Fedora, Debian and Windows&lt;/li&gt;
  &lt;li&gt;All the underlying hardware in EC2 uses ECC memory (Error Correcting Code memory)&lt;/li&gt;
  &lt;li&gt;All instances are billed in hourly usage units. Even if the instance is up for a minute, you get billed for a full hour.&lt;/li&gt;
  &lt;li&gt;Data transferred between AWS services in different regions is charged on both ends.&lt;/li&gt;
  &lt;li&gt;Billing starts when the boot sequence of the instance is initiated.&lt;/li&gt;
  &lt;li&gt;Billing ends when the instance terminates or stops. If it is shut down, the instance hours aren’t billed but you pay for the EBS storage that has the root device data on it.&lt;/li&gt;
  &lt;li&gt;Data transfer rates apply between instances on both ends regardless of AZ (Regional Data Transfer) or region (Internet Data Transfer). The sender gets billed for outbound, the receiver gets billed for inbound data.&lt;/li&gt;
  &lt;li&gt;Tax is extra, it is not included in the pricing&lt;/li&gt;
  &lt;li&gt;There are 5 families of instances
    &lt;ol&gt;
      &lt;li&gt;General Purpose - M3 and M4 with fixed performance, and T2 for burstable.&lt;/li&gt;
      &lt;li&gt;Compute Optimized - C3 and C4&lt;/li&gt;
      &lt;li&gt;Memory Optimized - R3&lt;/li&gt;
      &lt;li&gt;GPU Optimized - P2 are Nvidia Tesla parallel processing GPU Compute, and G2 provide high performance 3D graphics (GPU Graphics)&lt;/li&gt;
      &lt;li&gt;Storage Optimized - I2 are SSD based for high IO, D2 are dense (also SSD based) for data intensive operations with sequential IO&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;M3 are consistent and cheaper over M1 and also support SSD based instance storage. But if you need a larger disk, use M1.&lt;/li&gt;
  &lt;li&gt;The amount of CPU allocated to an instance is measured in EC2 Compute Units. It provides the relative measure of integer processing power of an instance.&lt;/li&gt;
  &lt;li&gt;To get a history of all EC2 API calls including VPC and EBS, use CloudTrail&lt;/li&gt;
  &lt;li&gt;There are 5 Elastic IPs per region in any account by default, because ipv4 is a scare resource&lt;/li&gt;
  &lt;li&gt;If the EIP isn’t associated with any running instance, you get charged an hourly penalty for hogging a scarce resource&lt;/li&gt;
  &lt;li&gt;By default, every instance comes with a Public IP and a Private IP.&lt;/li&gt;
  &lt;li&gt;When the instance stops or terminates, the private IP is released. So you may see a diff private IP when you boot it back up. The public IP behaves the same way but it can also be replaced with an EIP.&lt;/li&gt;
  &lt;li&gt;EIP remapping can take several minutes.&lt;/li&gt;
  &lt;li&gt;You can configure the reverse DNS record for the EIP by filling a form. But a forward DNS record (record -&amp;gt; EIP) must exist.&lt;/li&gt;
  &lt;li&gt;Each AZ is physically distinct and independent.&lt;/li&gt;
  &lt;li&gt;The same AZ can mean a diff physical location for a different account. My us-east-1a could be in New York while your us-east-1a could be in Richmond, VA.&lt;/li&gt;
  &lt;li&gt;Enhanced networking is supported via single root IO Virtualization (SR-IOV). It allows for high Packet Per Second (PPS) on the network&lt;/li&gt;
  &lt;li&gt;This is achieved via Elastic Network Adapter (ENA) available in X1 and M4.16xlarge. Others use Intel Virtual Function Interface. The Amazon Linux AMI support both drivers.&lt;/li&gt;
  &lt;li&gt;There is no additional fee for enhanced networking, but it is not available in EC2-Classic, only in EC2-VPC.&lt;/li&gt;
  &lt;li&gt;If using instance store backed instance, for durable data, use S3. Use EBS backed if you need the data to be independent of the instance’s life.&lt;/li&gt;
  &lt;li&gt;3 Types of EBS volumes - General Purpose SSD, PIOPS SSD, Magnetic.&lt;/li&gt;
  &lt;li&gt;GP SSD EBS volumes provide ratio of 3 IOPS per GB, and can burst up to 3000 IOPS.&lt;/li&gt;
  &lt;li&gt;IOPS is measured as 256kBps for SSD, 1024kBps for Magnetic.&lt;/li&gt;
  &lt;li&gt;PIOPS EBS is good for large NoSQL and RDS databases&lt;/li&gt;
  &lt;li&gt;HDD or Magnetic is cheapest and fit for infrequently accessed data.&lt;/li&gt;
  &lt;li&gt;Once instance can have many volumes but one volume can only be tied to one instance.&lt;/li&gt;
  &lt;li&gt;EBS snapshots are only accessible via EC2 APIs even though they’re stored on S3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;softhard-limits-on-stuff&quot;&gt;Soft/Hard Limits on stuff&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;5 VPCs per region&lt;/li&gt;
  &lt;li&gt;50 peering connections per VPC&lt;/li&gt;
  &lt;li&gt;Gateway Cached Volumes 32TB&lt;/li&gt;
  &lt;li&gt;Gateway Store Volumes  16TB&lt;/li&gt;
  &lt;li&gt;Gateway Cached Volumes Cache Size 16TB&lt;/li&gt;
  &lt;li&gt;5 EIPs per region&lt;/li&gt;
  &lt;li&gt;500 security groups per instance&lt;/li&gt;
  &lt;li&gt;200 subnets per VPC&lt;/li&gt;
  &lt;li&gt;5 internet gateways per region&lt;/li&gt;
  &lt;li&gt;50 customer gateways per region&lt;/li&gt;
  &lt;li&gt;5 Virtual Private Gateways per region&lt;/li&gt;
  &lt;li&gt;50 VPN connections per region&lt;/li&gt;
  &lt;li&gt;50 VPN peering connections per VPC&lt;/li&gt;
  &lt;li&gt;200 Route Tables per VPC&lt;/li&gt;
  &lt;li&gt;500 security groups per VPC&lt;/li&gt;
  &lt;li&gt;5 security groups per network interface&lt;/li&gt;
  &lt;li&gt;200 NACLs per VPC (same as subnets)&lt;/li&gt;
  &lt;li&gt;500 Hosted Zones in Route 53&lt;/li&gt;
  &lt;li&gt;50 Domains in Route 53&lt;/li&gt;
  &lt;li&gt;100 TB Total RDS storage&lt;/li&gt;
  &lt;li&gt;5000 IAM users per account&lt;/li&gt;
  &lt;li&gt;250 IAM Roles&lt;/li&gt;
  &lt;li&gt;100 IAM Groups&lt;/li&gt;
  &lt;li&gt;100 Instance Profiles&lt;/li&gt;
  &lt;li&gt;20 Load Balancers per region&lt;/li&gt;
  &lt;li&gt;10 listeners per load balancer&lt;/li&gt;
  &lt;li&gt;5 security groups per load balancer&lt;/li&gt;
  &lt;li&gt;1 route table per subnet&lt;/li&gt;
  &lt;li&gt;Multiple subnets per route table&lt;/li&gt;
  &lt;li&gt;1 subnet per AZ&lt;/li&gt;
  &lt;li&gt;Max VPC size is /16&lt;/li&gt;
  &lt;li&gt;Min VPC size is /28&lt;/li&gt;
  &lt;li&gt;5 IP addresses are always reserved in any subnet (251 for /24, 4091 for /20..)&lt;/li&gt;
  &lt;li&gt;6 replicas for AuroraDB in 3 AZs&lt;/li&gt;
  &lt;li&gt;100 S3 buckets per account (not region!)&lt;/li&gt;
  &lt;li&gt;5 TB max object size&lt;/li&gt;
  &lt;li&gt;5 GB max upload size per PUT operation&lt;/li&gt;
  &lt;li&gt;100 launch configurations&lt;/li&gt;
  &lt;li&gt;20 Auto Scaling Groups&lt;/li&gt;
  &lt;li&gt;200 Cloud Formation Stacks&lt;/li&gt;
  &lt;li&gt;200 Cloudfront Web distributions&lt;/li&gt;
  &lt;li&gt;100 Cloudfront RTMP distributions&lt;/li&gt;
  &lt;li&gt;25 origins per distribution&lt;/li&gt;
  &lt;li&gt;20 on-demand instances per region&lt;/li&gt;
  &lt;li&gt;5000 EBS volumes&lt;/li&gt;
  &lt;li&gt;10000 EBS Snapshots&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;creating-a-custom-vpc&quot;&gt;Creating a custom VPC&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Use 10.0.0.0/16 CIDR, most commonly used&lt;/li&gt;
  &lt;li&gt;This creates a default route table allowing all traffic within this VPC to flow through (Destination 10.0.0.0/16 local&lt;/li&gt;
  &lt;li&gt;This creates a default NACL which allows all inbound and outbound traffic&lt;/li&gt;
  &lt;li&gt;If you create a new NACL, it is set to deny all inbound and outbound traffic&lt;/li&gt;
  &lt;li&gt;Create an IGW if you are going to build a public subnet.&lt;/li&gt;
  &lt;li&gt;Attach to your custom VPC&lt;/li&gt;
  &lt;li&gt;DO NOT Add a route in the VPC’s route table to direct internet bound traffic to this IGW (0.0.0.0/0 -&amp;gt; IGW)&lt;/li&gt;
  &lt;li&gt;Create a new route table, call it public route. It will allow all traffic within the VPC.&lt;/li&gt;
  &lt;li&gt;Add a route in this route table (0.0.0.0/0 -&amp;gt; IGW)&lt;/li&gt;
  &lt;li&gt;Next, we add 2 subnets, 1 public 1 private&lt;/li&gt;
  &lt;li&gt;Pick /24 CIDR block allowing for 251 IPs each&lt;/li&gt;
  &lt;li&gt;Public is 10.0.1.0/24 named as 10.0.1.0-public-us-east-1a&lt;/li&gt;
  &lt;li&gt;Private is 10.0.2.0/24 named as 10.0.2.0-private-us-east-1a&lt;/li&gt;
  &lt;li&gt;Note that both these subnets are associated with the default VPC NACL&lt;/li&gt;
  &lt;li&gt;Note that both these subnets are associated with the default route table&lt;/li&gt;
  &lt;li&gt;Now we change the route table of our public subnet to use the public route table&lt;/li&gt;
  &lt;li&gt;Go to route tables, pick the public route, look for subnet associations. Click edit and attach our public subnet with this route table&lt;/li&gt;
  &lt;li&gt;Next, we launch an instance in the public subnet, and make sure we can connect to it&lt;/li&gt;
  &lt;li&gt;While launching it, create a new security group called MyWebSG, allow 80 and 22 from 0.0.0.0/0 for now&lt;/li&gt;
  &lt;li&gt;Note the public IP and use it to ssh into this instance&lt;/li&gt;
  &lt;li&gt;Run yum update and you’ll see it goes through (internet connectivity outbound)&lt;/li&gt;
  &lt;li&gt;Launch an instance in private subnet this time. This is connected to a route which does not have internet connectivity.&lt;/li&gt;
  &lt;li&gt;While doing this, create a new security group, call it MyBackendSG allowing 8080 from MyWebSG&lt;/li&gt;
  &lt;li&gt;While still in the public instance, install apache and run it. Curl localhost to make sure it works, use the IP in the browser to verify also.&lt;/li&gt;
  &lt;li&gt;Notice that your private instance has no internet connectivity, you cannot ssh into it.&lt;/li&gt;
  &lt;li&gt;We need a bastion host to do so, we create it in the public Subnet. The security group will need to allow 22 from the internet. Call it bastionSG&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="certification" />
      

      

      
        <summary type="html">These are my notes on EC2 and VPC for the AWS Certified Associate Level exams. I attempted the AWS Certified Solution Architect - Associate and AWS Certified Developer - Associate and scored 78% and 90% respectively. It took me about a week (3-4 hours a day) to prepare for both, after being working professionally with AWS for over 3 years.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Decimal to Binary</title>
      
      <link href="https://lobster1234.github.io/2016/01/10/decimal-to-binary/" rel="alternate" type="text/html" title="Decimal to Binary" />
      <published>2016-01-10T11:43:20-08:00</published>
      <updated>2016-01-10T11:43:20-08:00</updated>
      <id>https://lobster1234.github.io/2016/01/10/decimal-to-binary</id>
      <content type="html" xml:base="https://lobster1234.github.io/2016/01/10/decimal-to-binary/">&lt;p&gt;A Decimal to Binary conversion algorithm implementation.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remainder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="algorithms" />
      

      

      
        <summary type="html">A Decimal to Binary conversion algorithm implementation.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Securing your APIs with OAuth, OpenID, and OpenID Connect</title>
      
      <link href="https://lobster1234.github.io/2015/10/03/securing-apis-with-oauth-openid-connect/" rel="alternate" type="text/html" title="Securing your APIs with OAuth, OpenID, and OpenID Connect" />
      <published>2015-10-03T10:11:03-07:00</published>
      <updated>2015-10-03T10:11:03-07:00</updated>
      <id>https://lobster1234.github.io/2015/10/03/securing-apis-with-oauth-openid-connect</id>
      <content type="html" xml:base="https://lobster1234.github.io/2015/10/03/securing-apis-with-oauth-openid-connect/">&lt;p&gt;As products and companies move towards IoT model, users and machines alike need to interact with various APIs. Securing these APIs in a connected world can be a challenge faced by many. Fortunately, there are open standards addressing even the most complex of use cases - OAuth, OpenID and OpenID Connect happen to be widely adopted and have a growing support across many API and Identity Providers. In this session I’ll talk about these standards, and walk through common use cases/flows from an API Provider as well as consumer’s side. We will explore how these standards come together to not only secure the APIs, but also manage identity.&lt;/p&gt;

&lt;!--more--&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;703ba49666b644a2869ecf150409880a&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="oauth" />
      
        <category term="openid" />
      
        <category term="presentations" />
      

      

      
        <summary type="html">As products and companies move towards IoT model, users and machines alike need to interact with various APIs. Securing these APIs in a connected world can be a challenge faced by many. Fortunately, there are open standards addressing even the most complex of use cases - OAuth, OpenID and OpenID Connect happen to be widely adopted and have a growing support across many API and Identity Providers. In this session I’ll talk about these standards, and walk through common use cases/flows from an API Provider as well as consumer’s side. We will explore how these standards come together to not only secure the APIs, but also manage identity.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Prime Numbers: Sieve of Eratosthenes</title>
      
      <link href="https://lobster1234.github.io/2014/12/09/eratosthenes-sieve/" rel="alternate" type="text/html" title="Prime Numbers: Sieve of Eratosthenes" />
      <published>2014-12-09T11:11:10-08:00</published>
      <updated>2014-12-09T11:11:10-08:00</updated>
      <id>https://lobster1234.github.io/2014/12/09/eratosthenes-sieve</id>
      <content type="html" xml:base="https://lobster1234.github.io/2014/12/09/eratosthenes-sieve/">&lt;p&gt;My training wheels implementation of &lt;a href=&quot;https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&quot; target=&quot;_blank&quot;&gt;Sieve of Eratosthenes&lt;/a&gt; to generate prime numbers.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Find prime numbers using Eratosthenes Sieve.
 * Scala Gods - this is neither functional nor scala except the syntax.
 * Think pseudocode that actually compiles and works.
 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EratosthenesSieve&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPrimes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mkString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; ,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPrimes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//We use a single dimension array, we will use the index as the number.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//we will flip these to 0 as we traverse. Initially, every number is prime.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//This is our pivot. We leave sieve(0) and sieve(1) alone. Sieve(2) has number 2 which is our first prime number.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//we start with the pivot, and mark all its multiples except itself as non-prime.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//we do this till we reach the end of the array&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//not prime&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//now we find the next pivot which is the next in the array which is 1&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextPivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//filter our the primes, we use some real scala here, sorry. Kinda tired.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nextPivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;currentPivot:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;x:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//return the next pivot, which is the next index after currentPivot that is 1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextPivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentPivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextPivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextPivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nextPivot&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="data-structures" />
      
        <category term="algorithms" />
      

      

      
        <summary type="html">My training wheels implementation of Sieve of Eratosthenes to generate prime numbers.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">API Antipatterns : APICon SF</title>
      
      <link href="https://lobster1234.github.io/2014/05/28/api-antipatterns-apiconsf/" rel="alternate" type="text/html" title="API Antipatterns : APICon SF" />
      <published>2014-05-28T11:44:37-07:00</published>
      <updated>2014-05-28T11:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2014/05/28/api-antipatterns-apiconsf</id>
      <content type="html" xml:base="https://lobster1234.github.io/2014/05/28/api-antipatterns-apiconsf/">&lt;p&gt;My talk at APICon San Francisco on API Antipatterns.&lt;/p&gt;

&lt;p&gt;APIs have become a part of the product ecosystem - and help the businesses by extending their developer base, and offering seamless integration with other services or products. Sometimes, the APIs themselves are the product. However, with so many APIs around, patterns emerge. Patterns are repeatable, reusable solutions to commonly occurring problems. Where there are patterns, there are also antipatterns.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;While APIs are not a new paradigm - there are no set standards or specifications formed by a committees or governing bodies for APIs. On top of this, the APIs are often built at various stages of the product, and have a good chance of being disjoint as more are added. In this talk Netflix engineers will discuss various antipatterns that creep into the API design and implementation, and how to identify and avoid them. They will also share their experiences with building APIs. While the antipatterns do not pose as big a functional challenge, they can and do impact integration efforts, scalability and performance among other things. After this session, you should be able to get familiar with the best practices around solving the most common patterns, and make your engineers and API consumers happy!&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;f5b38f30c8e201316e3a2eda2b59ba96&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="api" />
      
        <category term="presentations" />
      

      

      
        <summary type="html">My talk at APICon San Francisco on API Antipatterns. APIs have become a part of the product ecosystem - and help the businesses by extending their developer base, and offering seamless integration with other services or products. Sometimes, the APIs themselves are the product. However, with so many APIs around, patterns emerge. Patterns are repeatable, reusable solutions to commonly occurring problems. Where there are patterns, there are also antipatterns.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">MongoSF : Using MongoDB for IGN’s Social Platform</title>
      
      <link href="https://lobster1234.github.io/2011/05/24/using-mongodb-for-ign-social-platform/" rel="alternate" type="text/html" title="MongoSF : Using MongoDB for IGN's Social Platform" />
      <published>2011-05-24T13:44:37-07:00</published>
      <updated>2011-05-24T13:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2011/05/24/using-mongodb-for-ign-social-platform</id>
      <content type="html" xml:base="https://lobster1234.github.io/2011/05/24/using-mongodb-for-ign-social-platform/">&lt;p&gt;In this session, I will talk about IGN’s Social Platform Architecture in context of MongoDB utilization. The talk will cover the social platform modules where IGN evaluated NoSQL solutions and picked MongoDB. These modules include activity streams, activity comments, notifications and other read/write heavy components. I’ll also discuss the deployment, monitoring and future plans regarding MongoDB at IGN beyond the Social Platform.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mongodb.com/presentations/using-mongodb-igns-social-platform&quot; target=&quot;_blank&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/lobster1234/mongosf-2011-using-mongodb-for-igns-social-platform&quot; target=&quot;_blank&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="databases" />
      
        <category term="mongodb" />
      
        <category term="presentations" />
      

      

      
        <summary type="html">In this session, I will talk about IGN’s Social Platform Architecture in context of MongoDB utilization. The talk will cover the social platform modules where IGN evaluated NoSQL solutions and picked MongoDB. These modules include activity streams, activity comments, notifications and other read/write heavy components. I’ll also discuss the deployment, monitoring and future plans regarding MongoDB at IGN beyond the Social Platform.</summary>
      

      
      
    </entry>
  
  
</feed>
