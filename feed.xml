<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.4.3">Jekyll</generator>
  
  
  <link href="https://lobster1234.github.io/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://lobster1234.github.io/" rel="alternate" type="text/html" />
  <updated>2017-04-06T15:30:04-07:00</updated>
  <id>https://lobster1234.github.io//</id>

  
    <title type="html">My Blog</title>
  

  
    <subtitle>Manish Pandit's tech blog with gists and all the awesome goodies around programming, devops, architecture, and infrastructure.
</subtitle>
  

  
    <author>
        <name>Manish Pandit</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">Using localstack with AWS Command Line</title>
      
      <link href="https://lobster1234.github.io/2017/04/05/working-with-localstack-command-line/" rel="alternate" type="text/html" title="Using localstack with AWS Command Line" />
      <published>2017-04-05T23:44:37-07:00</published>
      <updated>2017-04-05T23:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/04/05/working-with-localstack-command-line</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/04/05/working-with-localstack-command-line/">&lt;p&gt;&lt;a href=&quot;https://github.com/atlassian/localstack&quot;&gt;Localstack&lt;/a&gt; is a really useful project by Atlassian, which allows for local development using the AWS cloud stack. In other words, it is a Mock AWS Stack with support for many of the infrastructure commonly coded against.In other words, it is a Mock AWS Stack with support for many of the infrastructure commonly coded against. This post is a quick and handy gist of using AWS command line to work with localstack.
&lt;!--more--&gt;&lt;/p&gt;
&lt;h1 id=&quot;starting-localstack&quot;&gt;Starting localstack&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ make infra
. .venv/bin/activate; exec localstack/mock/infra.py
Starting local dev environment. CTRL-C to quit.
Starting local Elasticsearch (port 4571)...
Starting mock ES service (port 4578)...
Starting mock S3 server (port 4572)...
Starting mock SNS server (port 4575)...
Starting mock SQS server (port 4576)...
Starting mock API Gateway (port 4567)...
Starting mock DynamoDB (port 4569)...
Starting mock DynamoDB Streams (port 4570)...
Starting mock Firehose (port 4573)...
Starting mock Lambda (port 4574)...
Starting mock Kinesis (port 4568)...
Starting mock Redshift server (port 4577)...
Ready.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Optionally, start the web interface (make sure you pull the latest code, as there were node compatibility issues up until 3/31/2017)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ make web
(. .venv/bin/activate; bin/localstack web --port=8080)
 * Running on http://0.0.0.0:8080/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 272-228-949
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;s3&quot;&gt;S3&lt;/h2&gt;

&lt;h3 id=&quot;create-a-bucket&quot;&gt;Create a bucket&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4572 s3 mb s3://mytestbucket
make_bucket: mytestbucket

C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4572 s3 ls
2006-02-03 08:45:09 mytestbucket
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;copy-a-file-over&quot;&gt;Copy a file over&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4572 s3 cp /tmp/mongo.log s3://mytestbucket
upload: ../../../../tmp/mongo.log to s3://mytestbucket/mongo.log

C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4572 s3 ls s3://mytestbucket
2017-04-05 01:18:39       4789 mongo.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;delete-this-file&quot;&gt;Delete this file&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4572 s3 rm s3://mytestbucket/mongo.log
delete: s3://mytestbucket/mongo.log

C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4572 s3 ls s3://mytestbucket

C02STG51GTFM:localstack mpandit$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;sns&quot;&gt;SNS&lt;/h2&gt;

&lt;h3 id=&quot;create-a-topic&quot;&gt;Create a topic&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4575 sns list-topics
{
    &quot;Topics&quot;: []
}

C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4575 sns create-topic --name test-topic
{
    &quot;TopicArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic&quot;
}
C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4575 sns list-topics
{
    &quot;Topics&quot;: [
        {
            &quot;TopicArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic&quot;
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;subscribe-to-the-topic&quot;&gt;Subscribe to the topic&lt;/h3&gt;

&lt;p&gt;(use any random email)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4575 sns subscribe --topic-arn arn:aws:sns:us-east-1:123456789012:test-topic --protocol email --notification-endpoint pibehatin@1rentcar.top
{
    &quot;SubscriptionArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic:5aacffbe-ccf7-40d5-be97-c55af7392935&quot;
}

C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4575 sns list-subscriptions
{
    &quot;Subscriptions&quot;: [
        {
            &quot;Owner&quot;: &quot;&quot;,
            &quot;Endpoint&quot;: &quot;pibehatin@1rentcar.top&quot;,
            &quot;Protocol&quot;: &quot;email&quot;,
            &quot;TopicArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic&quot;,
            &quot;SubscriptionArn&quot;: &quot;arn:aws:sns:us-east-1:123456789012:test-topic:5aacffbe-ccf7-40d5-be97-c55af7392935&quot;
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;publish-to-this-topic&quot;&gt;Publish to this topic&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4575 sns publish  --topic-arn arn:aws:sns:us-east-1:123456789012:test-topic --message 'Test Message!'
{
    &quot;MessageId&quot;: &quot;n/a&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;sqs&quot;&gt;SQS&lt;/h2&gt;

&lt;h3 id=&quot;create-a-queue&quot;&gt;Create a Queue&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4576 sqs create-queue --queue-name test_queue
{
    &quot;QueueUrl&quot;: &quot;http://localhost:4576/123456789012/test_queue&quot;
}

C02STG51GTFM:localstack mpandit$ aws --endpoint-url=http://localhost:4576 sqs list-queues
{
    &quot;QueueUrls&quot;: [
        &quot;http://localhost:4576/123456789012/test_queue&quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;send-a-message-to-this-queue&quot;&gt;Send a message to this queue&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$  aws --endpoint-url=http://localhost:4576 sqs send-message --queue-url http://localhost:4576/123456789012/test_queue --message-body 'Test Message!'
{
    &quot;MD5OfMessageBody&quot;: &quot;df69267381a60e476252c989db9ac8ad&quot;,
    &quot;MessageId&quot;: &quot;a6ed436b-076a-0d8d-73e1-cc3291a19c28&quot;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;receive-the-message-from-this-queue&quot;&gt;Receive the message from this queue&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C02STG51GTFM:localstack mpandit$  aws --endpoint-url=http://localhost:4576 sqs receive-message --queue-url http://localhost:4576/123456789012/test_queue
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;Test Message!&quot;,
            &quot;Attributes&quot;: {
                &quot;ApproximateFirstReceiveTimestamp&quot;: &quot;1.49138149959e+12&quot;,
                &quot;SenderId&quot;: &quot;AIDAIT2UOQQY3AUEKVGXU&quot;,
                &quot;ApproximateReceiveCount&quot;: &quot;1&quot;,
                &quot;SentTimestamp&quot;: &quot;1.49138142195e+12&quot;
            },
            &quot;ReceiptHandle&quot;: &quot;xuazrzyjcgpgzpzlxlyxmujbgzfkswixjkywshturlylrfwzyccutlumitgduyzddwkaoypcmswlkxrrjghdyztfewrpmkxdufptyketrfumwzicmggogdbaucwztvorplibccpfhirmalnixvfbklzrgncpisdsiuiajqwefxueqhuygfibmgqwx&quot;,
            &quot;MD5OfBody&quot;: &quot;df69267381a60e476252c989db9ac8ad&quot;,
            &quot;MessageId&quot;: &quot;a6ed436b-076a-0d8d-73e1-cc3291a19c28&quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you do this many times, the process seems to sleep. May be to simulate the message visibility? Here are 2 consecutive runs.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;real	0m15.185s
user	0m0.291s
sys	0m0.158s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;real	0m26.829s
user	0m0.291s
sys	0m0.167s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;delete-this-message&quot;&gt;Delete this message&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws --endpoint-url=http://localhost:4576 sqs delete-message --queue-url http://localhost:4576/123456789012/test_queue --receipt-handle 'yugzzebhnnksfuvbjlibfnlejyqbulxqfegsnrgafjeabxaatxbmeiyfkfliedslohseosgjwkxhdzllpudhccjhorpkwbgjgyzeyzjwkfvqflathnvsmugeyevbqmfyqanuxetvdhcetseuwzrqpexogzggznndxmbqowtlalvqtffntdahhihel'

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="localstack" />
      

      

      
        <summary type="html">Localstack is a really useful project by Atlassian, which allows for local development using the AWS cloud stack. In other words, it is a Mock AWS Stack with support for many of the infrastructure commonly coded against.In other words, it is a Mock AWS Stack with support for many of the infrastructure commonly coded against. This post is a quick and handy gist of using AWS command line to work with localstack.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">AWS Lambda with Serverless Framework and Java/Maven - Part 1</title>
      
      <link href="https://lobster1234.github.io/2017/02/28/serverless-framework-java-maven-part-1/" rel="alternate" type="text/html" title="AWS Lambda with Serverless Framework and Java/Maven - Part 1" />
      <published>2017-02-28T22:15:37-08:00</published>
      <updated>2017-02-28T22:15:37-08:00</updated>
      <id>https://lobster1234.github.io/2017/02/28/serverless-framework-java-maven-part-1</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/02/28/serverless-framework-java-maven-part-1/">&lt;p&gt;&lt;a href=&quot;https://serverless.com&quot;&gt;Serverless&lt;/a&gt; is a node.js based framework that makes creating, deploying, and managing serverless functions a breeze. We will use AWS as our FaaS (Function-as-a-Service) provider, although Serverless supports IBM OpenWhisk and Microsoft Azure as well.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will create and deploy a java-maven based AWS Lambda function. In Part-1 we will not modify any code, or even look at the generated code. We will focus on the deployment and the command line interface to manage lambda, provided out of the box by serverless framework.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h3&gt;
&lt;p&gt;Here is what the setup on my Mac looks like (Sierra)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt; (1.1.10) - you will need this if you do not have node/npm installed already.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; (v7.6.0)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; (4.1.2)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Apache Maven&lt;/code&gt; (3.2.5)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Oracle JDK&lt;/code&gt; (1.8.0_121)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;install-serverless&quot;&gt;Install Serverless&lt;/h3&gt;
&lt;p&gt;If you do not have &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; installed, use &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install node&lt;/code&gt; to install &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:~ mpandit$ npm install serverless -g
/usr/local/bin/serverless -&amp;gt; /usr/local/lib/node_modules/serverless/bin/serverless
/usr/local/bin/slss -&amp;gt; /usr/local/lib/node_modules/serverless/bin/serverless
/usr/local/bin/sls -&amp;gt; /usr/local/lib/node_modules/serverless/bin/serverless

&amp;gt; serverless@1.7.0 postinstall /usr/local/lib/node_modules/serverless
&amp;gt; node ./scripts/postinstall.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;configure-serverless-for-aws&quot;&gt;Configure Serverless for AWS&lt;/h3&gt;
&lt;p&gt;Serverless needs to use AWS credentials for an IAM user. I recommend creating a user with no access, and we can add permissions as we go.&lt;/p&gt;

&lt;p&gt;We create a &lt;em&gt;programmatic-access-only&lt;/em&gt; user called &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless&lt;/code&gt;, and added it to a new group called &lt;code class=&quot;highlighter-rouge&quot;&gt;Serverless&lt;/code&gt;. The group should have no permissions associated with it.&lt;/p&gt;

&lt;p&gt;Next, copy paste the AWS credentials of this user in the command below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless config credentials --provider aws --key &amp;lt;key&amp;gt; --secret &amp;lt;secret&amp;gt;

Serverless: Setting up AWS...
Serverless: Saving your AWS profile in &quot;~/.aws/credentials&quot;...
Serverless: Success! Your AWS access keys were stored under the &quot;default&quot; profile.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Serverless uses &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1&lt;/code&gt; region by default, which can be overriden by providing the &lt;code class=&quot;highlighter-rouge&quot;&gt;--region&lt;/code&gt; parameter.&lt;/p&gt;

&lt;h3 id=&quot;create-the-java-project&quot;&gt;Create the Java project&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:~ mpandit$ cd ~/work
Manishs-MacBook-Pro:work mpandit$ mkdir serverless-java
Manishs-MacBook-Pro:work mpandit$ cd serverless-java
Manishs-MacBook-Pro:serverless-java mpandit$ serverless create --template aws-java-maven

Serverless: Generating boilerplate...
 _______                             __
|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v1.7.0
 -------'

Serverless: Successfully generated boilerplate for template: &quot;aws-java-maven&quot;
Serverless: NOTE: Please update the &quot;service&quot; property in serverless.yml with your service name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;set-up-iam-policies&quot;&gt;Set up IAM Policies&lt;/h3&gt;
&lt;p&gt;If you run &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless info&lt;/code&gt;, it will report an error as our user does not really have any permissions.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless info

  Serverless Error ---------------------------------------

     User: arn:aws:iam::123456789209:user/serverless is not
     authorized to perform: cloudformation:DescribeStacks
     on resource: arn:aws:cloudformation:us-east-1:123456789209:stack/aws-java-maven-dev/*

  Get Support --------------------------------------------
     Docs:          docs.serverless.com
     Bugs:          github.com/serverless/serverless/issues

  Your Environment Information -----------------------------
     OS:                 darwin
     Node Version:       7.6.0
     Serverless Version: 1.7.0

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Lets add CloudFormation policy to this user. We will do this via adding the permission to the associated group.&lt;/p&gt;

&lt;p&gt;You will notice that there is no such thing as &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonCloudFormationFullAccess&lt;/code&gt;. Hence, we will need to create a custom policy.&lt;/p&gt;

&lt;p&gt;Click the Group name on the IAM console, and click the Permissions tab. Expand Inline Policies, and click the link that allows creation of an inline policy.&lt;/p&gt;

&lt;p&gt;In the page that opens up, select Policy Generator and proceed and make these selections -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Effect : Allow&lt;/li&gt;
  &lt;li&gt;AWS Service: AWS CloudFormation&lt;/li&gt;
  &lt;li&gt;Actions - All Actions Selected&lt;/li&gt;
  &lt;li&gt;ARN - *&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click Add Statement, and click Next Step. This will show the policy we just created. Rename it to &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless-cloudformation-policy&lt;/code&gt;. Click Apply.&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Stmt1488265872000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cloudformation:*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We will also need to give S3 access to this user, as serverless would need to upload the artifact to S3 for deployment via CloudFormation. We now add &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonS3FullAccess&lt;/code&gt; to this group, and our user will inherit it. This time we will click Attach Policy under Managed Policies instead of Inline Policies.&lt;/p&gt;

&lt;p&gt;Another Managed Policy is for CloudWatch Logs access, so we will select &lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatchLogsFullAccess&lt;/code&gt; and attach to the group.&lt;/p&gt;

&lt;p&gt;As a part of the deployment process, serverless would need to associate the lambda with the invocation role. In order to do that, attach &lt;code class=&quot;highlighter-rouge&quot;&gt;IAMFullAccess&lt;/code&gt; policy from the Managed Policies to the group as well.&lt;/p&gt;

&lt;p&gt;Finally, we add &lt;code class=&quot;highlighter-rouge&quot;&gt;AWSLambdaFullAccess&lt;/code&gt; to this group so the serverless framework can manage the services (lambda functions).&lt;/p&gt;

&lt;p&gt;To summarize, our &lt;code class=&quot;highlighter-rouge&quot;&gt;Serverless&lt;/code&gt; IAM Group should have following policies -&lt;/p&gt;

&lt;p&gt;Managed -&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonS3FullAccess&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CloudWatchLogsFullAccess&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IAMFullAccess&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AWSLambdaFullAccess&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inline - &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless-cloudformation-policy&lt;/code&gt; for CloudFormation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One thing to keep in mind is that for functions that are triggered by an event, the event source would need access to invoke the function. This is managed via function policies, which are set up when the trigger is configured. For instance, if you want the lambda to be triggered on an S3 event on a bucket, the association between the S3 bucket and the function will need to have a function policy.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you’ll notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless info&lt;/code&gt; command returns no services.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless info

  Serverless Error ---------------------------------------

     Stack with id aws-java-maven-dev does not exist

  Get Support --------------------------------------------
     Docs:          docs.serverless.com
     Bugs:          github.com/serverless/serverless/issues

  Your Environment Information -----------------------------
     OS:                 darwin
     Node Version:       7.6.0
     Serverless Version: 1.7.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;deploy-the-stack&quot;&gt;Deploy the stack&lt;/h3&gt;
&lt;p&gt;Since deployment of the stack is essentially setting up our lambda function (the template has a simple function), we need to create the artifact (jar).&lt;/p&gt;

&lt;p&gt;Since this is a maven project, we use maven to build the project.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ mvn clean install
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building hello dev
[INFO] ------------------------------------------------------------------------
...
...
...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 14.709 s
[INFO] Finished at: 2017-02-27T23:26:00-08:00
[INFO] Final Memory: 23M/145M
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now that we have the artifact in &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; folder (&lt;code class=&quot;highlighter-rouge&quot;&gt;hello-dev.jar&lt;/code&gt;), we can go ahead deploy it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless deploy
Serverless: Creating Stack...
Serverless: Checking Stack create progress...
.....
Serverless: Stack create finished...
Serverless: Uploading CloudFormation file to S3...
Serverless: Uploading service .zip file to S3 (1.98 MB)...
Serverless: Updating Stack...
Serverless: Checking Stack update progress...
..................
Serverless: Stack update finished...
Service Information
service: aws-java-maven
stage: dev
region: us-east-1
api keys:
  None
endpoints:
  None
functions:
  aws-java-maven-dev-hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can check the AWS CloudFormation section in the console to view details of the stack that has just been created.&lt;/p&gt;

&lt;p&gt;Now that our service is deployed, it wil show up under &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless info&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless info
Service Information
service: aws-java-maven
stage: dev
region: us-east-1
api keys:
  None
endpoints:
  None
functions:
  aws-java-maven-dev-hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, lets try to invoke it.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless invoke --function  hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{\&quot;message\&quot;:\&quot;Go Serverless v1.x! Your function executed successfully!\&quot;,\&quot;input\&quot;:{}}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;X-Powered-By&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS Lambda &amp;amp; serverless&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;isBase64Encoded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The function can also be invoked with an input. The input is essentially a Map, so we can pass it a JSON string with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--data&lt;/code&gt; parameter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless invoke --function hello --data '{&quot;key&quot;:&quot;value&quot;}'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{\&quot;message\&quot;:\&quot;Go Serverless v1.x! Your function executed successfully!\&quot;,\&quot;input\&quot;:{\&quot;key\&quot;:\&quot;value\&quot;}}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;X-Powered-By&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS Lambda &amp;amp; serverless&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;isBase64Encoded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A good idea would be to explore the CloudWatch Logs and Lambda metrics for our function from the console.&lt;/p&gt;

&lt;p&gt;The same can be done command line, like so -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless logs --function hello
START RequestId: f8390071-fd8d-11e6-9195-554889504121 Version: $LATEST
2017-02-28 08:14:48 &amp;lt;f8390071-fd8d-11e6-9195-554889504121&amp;gt; INFO  com.serverless.Handler:17 - received: {}
END RequestId: f8390071-fd8d-11e6-9195-554889504121
REPORT RequestId: f8390071-fd8d-11e6-9195-554889504121	Duration: 445.52 ms	Billed Duration: 500 ms 	Memory Size: 1024 MB	Max Memory Used: 57 MB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can also look at the metrics associated with our functions (The 1 error is because I had passed a malformed JSON input).&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless metrics
Service wide metrics
February 27, 2017 1:59 AM - February 28, 2017 1:59 AM

Invocations: 7
Throttles: 0
Errors: 1
Duration (avg.): 276.55ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Manishs-MacBook-Pro:serverless-java mpandit$ serverless metrics --function hello
hello
February 27, 2017 1:59 AM - February 28, 2017 1:59 AM

Invocations: 7
Throttles: 0
Errors: 1
Duration (avg.): 276.55ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that we have successfully deployed and tested the templated service, we are now ready to dive deeper into the actual code, configuration, and constructs of serverless framework. That will be Part-2 of this tutorial.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="serverless" />
      
        <category term="lambda" />
      

      

      
        <summary type="html">Serverless is a node.js based framework that makes creating, deploying, and managing serverless functions a breeze. We will use AWS as our FaaS (Function-as-a-Service) provider, although Serverless supports IBM OpenWhisk and Microsoft Azure as well. In this tutorial, we will create and deploy a java-maven based AWS Lambda function. In Part-1 we will not modify any code, or even look at the generated code. We will focus on the deployment and the command line interface to manage lambda, provided out of the box by serverless framework.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Notes from AWS Lambda Deep Dive Webinar</title>
      
      <link href="https://lobster1234.github.io/2017/02/27/notes-from-aws-lambda-deep-dive-webinar/" rel="alternate" type="text/html" title="Notes from AWS Lambda Deep Dive Webinar" />
      <published>2017-02-27T07:20:44-08:00</published>
      <updated>2017-02-27T07:20:44-08:00</updated>
      <id>https://lobster1234.github.io/2017/02/27/notes-from-aws-lambda-deep-dive-webinar</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/02/27/notes-from-aws-lambda-deep-dive-webinar/">&lt;p&gt;I’ve put together my notes from the AWS webinar, which can be seen &lt;a href=&quot;https://www.youtube.com/watch?v=dB4zJk_fqrU&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lambda is the key enabler and a core AWS component for serverless computing. Lets you run the code you want, without worrying about the underlying infrastructure and provisioning. It is also cost efficient, as there are no instances that are in running state but idle. Lambda handles scaling up and scaling down as needed, transparently to the customer.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Event Source - Changes in state of the resources or data, or any events triggered explicitly or implicitly. A large number of AWS services can act as Event Sources - Like S3 (Object PUT, DELETE..), DynamoDB, IoT, CloudFormation, CloudWatch, SNS, API Gateway and Cron schedule to name a few.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Function - The piece of code that would be run when that event occurs. The function can access any services downstream if needed. Currently Supported languages are Node.js, Python, Java 8 and C#.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-cases&quot;&gt;Use cases&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Stateless, event-based file/data processing.&lt;/li&gt;
  &lt;li&gt;On demand execution of some logic where an event is generated via an explicit action.&lt;/li&gt;
  &lt;li&gt;Custom Workflows for state changes within AWS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Code can be developed in the 4 supported languages (currently).&lt;/li&gt;
  &lt;li&gt;The code should have no affinity or access to the underlying infrastructure, and should use external infrastructure for state (like a cache or a database). The code should be entirely stateless.&lt;/li&gt;
  &lt;li&gt;The memory usage allowed is from 128MB to 1.5GB in increments of 64MB. CPU and network are allocated proportionately.&lt;/li&gt;
  &lt;li&gt;Lambda can be invoked synchronously (the client waits for a response from the function), and asynchronously (fire and forget, a 202 Accepted).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-in-it&quot;&gt;What is in it&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Handler()&lt;/code&gt; function - Entry point for Lambda.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Event&lt;/code&gt; Object - The request (representation of the event). Can be a stream or an simple data type.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Context&lt;/code&gt; Object - Provides a handle to the environment and basic utilities like time, logging and client/event info.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FunctionConfiguration&lt;/code&gt; Metadata
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VpcConfig&lt;/code&gt; - Useful if you want to access your private resources within your VPC. Enables the lambda environment to be able to talk to your VPC.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DeadLetterConfig&lt;/code&gt; - Failed events are sent to SQS or SNS. A dead letter queue or an SNS topic can be configured where the event is sent back in case the lambda function fails to process it. It is only available for async requests.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Environment&lt;/code&gt; - Key value pairs as a part of the configuration, which are then available as environment variables to the function. They’re encrypted at rest via KMS, and are decrypted during lambda initialization.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;limits&quot;&gt;Limits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;512 MB of temporary storage (ephemeral).&lt;/li&gt;
  &lt;li&gt;1024 File Descriptors&lt;/li&gt;
  &lt;li&gt;1024 processes + threads&lt;/li&gt;
  &lt;li&gt;300 seconds maximum execution duration&lt;/li&gt;
  &lt;li&gt;6MB Request payload&lt;/li&gt;
  &lt;li&gt;6MB Response&lt;/li&gt;
  &lt;li&gt;50MB Deployment package (compressed)&lt;/li&gt;
  &lt;li&gt;250MB Uncompressed&lt;/li&gt;
  &lt;li&gt;4KB Environment variables&lt;/li&gt;
  &lt;li&gt;100 Concurrent Executions (can be increased by requesting Amazon)&lt;/li&gt;
  &lt;li&gt;75GB total size of all lambdas across one region.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;container-model&quot;&gt;Container Model&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Each execution happens in a container that is created and managed by AWS. Containers are  re-used. This re-use can let us share cached static data, or DB connections between invocations. The folder &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; is available across invocations. However, do not rely on this, use it opportunistically.&lt;/li&gt;
  &lt;li&gt;Bootstrapping happens when a function is invoked for the first time after creation or update. The start time can be reduced by allowing more memory, having a smaller deployment package. Clearly Python and Node.js will be much quicker to bootstrap than Java and C#. Strip down the deployment of all the libraries that are not needed, as lambda will load everything that is present in the package. Mode to an interpreted language if cold starts are not within acceptable limits.&lt;/li&gt;
  &lt;li&gt;Containers run Amazon Linux AMI. If there are any native binaries, compile against this environment.&lt;/li&gt;
  &lt;li&gt;OpenJDK 1.8 is already provided by the container, so does not need to be packaged. Similarly AWS SDK for other languages, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A zip file or a jar file containing the code and dependencies. Use Maven or Eclipse to make a package.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cicd-options&quot;&gt;CI/CD Options&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Use AWS CodeCommit, CodeBuild, CodePipeline&lt;/li&gt;
  &lt;li&gt;Use Github, Jenkins, CodeShip&lt;/li&gt;
  &lt;li&gt;Put the package on an S3 location&lt;/li&gt;
  &lt;li&gt;AWS &lt;code class=&quot;highlighter-rouge&quot;&gt;SAM&lt;/code&gt; - Serverless Application Model&lt;/li&gt;
  &lt;li&gt;CloudFormation supports &lt;code class=&quot;highlighter-rouge&quot;&gt;SAM&lt;/code&gt; extensions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;versioning&quot;&gt;Versioning&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A version is an immutable copy of code+config&lt;/li&gt;
  &lt;li&gt;Each version gets it’s own ARN&lt;/li&gt;
  &lt;li&gt;Versions can be aliased (like 13=Dev, 11=Prod, 12=Beta)&lt;/li&gt;
  &lt;li&gt;The aliasing enables rollbacks or staged promotions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;security-and-scaling&quot;&gt;Security and Scaling&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The Push model, where the upstream service invokes the function. The resource level policies are applied to the lambda function which control which resources can invoke it (Like allow S3 to invoke this function). The policies are already created when the event source is attached via the console.&lt;/li&gt;
  &lt;li&gt;The pull model is used for stream event sources (Kinesis and DynbamoDB). Here lambda polls instead of the resources pushing. An IAM policy is created for the Lambda to be able to poll the source (instead of the other way around for Push).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;concurrency-and-scaling&quot;&gt;Concurrency and Scaling&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Requests per second * function execution duration&lt;/li&gt;
  &lt;li&gt;When throttled, the async events are retried automatically for 6 hours, with delays between retries.&lt;/li&gt;
  &lt;li&gt;For sync requests, the client gets a 429.&lt;/li&gt;
  &lt;li&gt;Use async model if bursts are expected as retries are handled automatically when throttled.&lt;/li&gt;
  &lt;li&gt;Request AWS to increase the concurrency limit if consistently getting throttled.&lt;/li&gt;
  &lt;li&gt;Ensure the downstream also keeps up with Lambda throttling, for example, if each lambda creates 10 MySQL connections, 100 concurrent invocations is not something MySQL will be able to handle.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;debugging-and-operations&quot;&gt;Debugging and Operations&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;4xx errors can be invalid parameter value (400), resource not found (404), request too large (413) and can be fixed by the developer.&lt;/li&gt;
  &lt;li&gt;5xx need to be fixed by the admin&lt;/li&gt;
  &lt;li&gt;Stream based events are retried till the data expires&lt;/li&gt;
  &lt;li&gt;Async invocations are retried 2 extra times before sent to dead letter queue&lt;/li&gt;
  &lt;li&gt;For sync invocations, the caller will need to implement the retry logic when they get an error from the call&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tracing-tracking-and-logging&quot;&gt;Tracing, Tracking and Logging&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;AWS X-Ray (Preview) for detailed breakdown of lambda performance and behavior metrics.&lt;/li&gt;
  &lt;li&gt;All calls made to lambda are logged to CloudTrail. They can be delivered to S3 and analyzed.&lt;/li&gt;
  &lt;li&gt;Every start, end, and report goes to CloudWatch&lt;/li&gt;
  &lt;li&gt;Java User logs can be created via &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.println()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.err.println()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LambdaLogger.log()&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Log4j.*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Default metrics are free - which include duration, throttles, errors, etc. Custom metrics can also be added by the function itself via the CloudWatch API.&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="serverless" />
      
        <category term="lambda" />
      

      

      
        <summary type="html">I’ve put together my notes from the AWS webinar, which can be seen here. Lambda is the key enabler and a core AWS component for serverless computing. Lets you run the code you want, without worrying about the underlying infrastructure and provisioning. It is also cost efficient, as there are no instances that are in running state but idle. Lambda handles scaling up and scaling down as needed, transparently to the customer.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">AWS Training at Marqeta : SQS Lab</title>
      
      <link href="https://lobster1234.github.io/2017/02/17/marqeta-aws-sqs-lab/" rel="alternate" type="text/html" title="AWS Training at Marqeta : SQS Lab" />
      <published>2017-02-17T19:10:44-08:00</published>
      <updated>2017-02-17T19:10:44-08:00</updated>
      <id>https://lobster1234.github.io/2017/02/17/marqeta-aws-sqs-lab</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/02/17/marqeta-aws-sqs-lab/">&lt;p&gt;This post is the handout for the SQS Lab I ran as a part of hands-on AWS training to the Engineering + DevOps team at &lt;a href=&quot;https://www.marqeta.com&quot;&gt;Marqeta&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this lab we will use AWS CLI to work with SQS. I’ve replaced the account ID with 111111111111.&lt;/p&gt;

&lt;h2 id=&quot;prepare-the-cli-aws-shell&quot;&gt;Prepare the CLI (aws-shell)&lt;/h2&gt;
&lt;p&gt;In the previous lab we configured &lt;code class=&quot;highlighter-rouge&quot;&gt;aws-shell&lt;/code&gt; on our laptops with an access key, secret, and default region. However, the user only had &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonS3FullAccess&lt;/code&gt; via a managed policy, and &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonEC2FullAccess&lt;/code&gt; via the &lt;code class=&quot;highlighter-rouge&quot;&gt;developers&lt;/code&gt; group.&lt;/p&gt;

&lt;p&gt;We will fire up the &lt;code class=&quot;highlighter-rouge&quot;&gt;aws-shell&lt;/code&gt; and use basic SQS commands. Autocomplete feature of the shell will come in very handy as you’ll see.&lt;/p&gt;

&lt;p&gt;First, we will try to list the queues we have in our account.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs list-queues

An error occurred (AccessDenied) when calling the ListQueues operation: Access to the resource https://queue.amazonaws.com/ is denied.
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Since the access key and secret we’re using is not tied to SQS policy, we go ahead and add that to the &lt;code class=&quot;highlighter-rouge&quot;&gt;developers&lt;/code&gt; group. It is called &lt;code class=&quot;highlighter-rouge&quot;&gt;AmazonSQSFullAccess&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once done, you should see an empty list for the same command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs list-queues
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, lets create a queue.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs create-queue --queue-name my_test_queue
{
    &quot;QueueUrl&quot;: &quot;https://queue.amazonaws.com/111111111111/my_test_queue&quot;
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can go on the console in SQS section, and see this queue being created. You will notice that the Queue URL on the console is a bit richer, with region in there as well.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;	https://sqs.us-east-1.amazonaws.com/111111111111/my_test_queue
&lt;/code&gt;
Now that we’ve created a queue, we will go ahead and send a message to it. As you do this, you will notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;aws-shell&lt;/code&gt; will autocomplete the queue-url for us.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs send-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue --message-body &quot;Hello!&quot;
{
    &quot;MD5OfMessageBody&quot;: &quot;952d2c56d0485958336747bcdd98590d&quot;,
    &quot;MessageId&quot;: &quot;31e40b96-c61c-4b6a-8682-67ebb7badc36&quot;
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The max message size is 256KB, with a default visibility timeout of 30 seconds. This means whoever consumes this message has 30 seconds to process it, otherwise it will become available to other consumers for processing, i.e. back in the queue. Lets give that a try.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;Hello!&quot;,
            &quot;ReceiptHandle&quot;: &quot;AQEBD9ziSgXsnzTdBNzjNDksLpLU/ASfSdxdeFT1MkzCezLdnKL9HljPpsRaz97eSdjRCm27c3/iNcaITv2PEFgpNs62zezc4jpzWh3ysPYVwVgBjqbhobVQiF8JBRxuHSfqgQ8qSsgF2QOpU2Bn6qE/wC/LSqwxNqd/aQRab5EUA9zgqHx9L15FIlbmdGrz8Qz6ebPyFi4Lr5gb+S79t+wN9s0yE9+kEQvKjeweF0OHRyGeBWybwEFVlc3qPeo0QT9WLdkQ68PKBCY8s7djSJoD7npv9j2YeFS4+EcNzJ9ql5x2wpzcLOF672exXivigcjGMUdP9JT32Xju61ixWYnIDgd7KXWo12f+VgSc7/s143kZGPNwpkicvoNRlmzx/urI&quot;,
            &quot;MD5OfBody&quot;: &quot;952d2c56d0485958336747bcdd98590d&quot;,
            &quot;MessageId&quot;: &quot;31e40b96-c61c-4b6a-8682-67ebb7badc36&quot;
        }
    ]
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We immediately fire the same command, and notice nothing comes back.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is due to the visibility timeout of 30 seconds. Lets wait 30 seconds, and you’ll see the same message comes back on the queue.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;Hello!&quot;,
            &quot;ReceiptHandle&quot;: &quot;AQEBU5MiEmzKdpwJ705Ehe6brf5fmkx0sa+m2ibZxbVsmdsKiHX+RyDu4s+T2yBNP9MS7NjSmEA9l/dLgwn55cN6qDCTCxxOrvVEp1MVMqximPCjzFgkmYTYR5w32TBqamDxKqadAGPUgjLyLlvD/M5tc+MuyvrFL2WaWovK7cpMRk5VGlW+pSaC+TNfhtt2QeLpNW4GUnLxtAu96BrY54ll3jelHtt3jnuAqNOaJ6nzDwKvfonyrpdd4sVS+cKPo4LzS47kJyX8p/gZdi/7cY5Oty+1RhfEkfmkEUKm2Eg4DK8Rm+E9jyUjYK+VmxWc/0JAeKwGRkIuZEuYW1kWav7y3/PkJNaXHJvVQtyLDQiSy8zf8wrjyoyGknaonmUIHtyP&quot;,
            &quot;MD5OfBody&quot;: &quot;952d2c56d0485958336747bcdd98590d&quot;,
            &quot;MessageId&quot;: &quot;31e40b96-c61c-4b6a-8682-67ebb7badc36&quot;
        }
    ]
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is where the application developers have to pick a right visibility timeout, which should allow the consumer enough time to process the message and delete it from the queue, so multiple processing does not occur. Let us delete the message after processing (reading) it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs delete-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue --receipt-handle &quot;AQEBHh4KsuIv0QABOD49rbmmu6V0r0I34ENhrQqT5me0pPMfM2KOBWX+NvqPVV8eaB3T7zujcJj0qgQlvvqbzgCMKeKYSlExbVgLs6tFHKZgR6wUVH/X6RhN579u4LHFo3SBu9IExDpz226sEoVAn0MOhOlvArU72xJQm+pNPwRjEicQxu6MQPakfiq8yHGICYSUPyBhz+/OwxLx4iDe8exWY2Esvz2zt1q7kD/u2PqzPXiL0uIBsW18tyslMfftGSEV3cB19HFJEHNJ9olZtstNMrX1MAGJZqDHxS1rllSCrNCiqD4264Ou/eyf7duPwhvNT97mmUS0NbCuhTX5P3Kt4BytNFwKY3Qu13vkgb1rciO/1NNifwNbJ+gjOI7xS246&quot;
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice that we need to provide the &lt;code class=&quot;highlighter-rouge&quot;&gt;receipt-handle&lt;/code&gt; that we got after receiving the message in order to delete it.&lt;/p&gt;

&lt;p&gt;Next we can go on the console and look at cloudwatch monitoring. We will also create an alarm to notify us if a message has not been picked up for N minutes. This is something that can alert us of dead consumers, or an issue with processing the messages.&lt;/p&gt;

&lt;h2 id=&quot;more-on-visibility-timeout&quot;&gt;More on visibility timeout&lt;/h2&gt;

&lt;p&gt;In order to change visibility timeout, which can be done when the consumer does not want the message to go back in the queue, like it wants to retry processing the message itself instead of passing it on to another consumer, it can be done by providing the &lt;code class=&quot;highlighter-rouge&quot;&gt;queue-url&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;receipt-handle&lt;/code&gt; like so - note that &lt;code class=&quot;highlighter-rouge&quot;&gt;visibility-timeout&lt;/code&gt; is specified in seconds.&lt;/p&gt;

&lt;p&gt;Lets push a message, consume it, and then increase the &lt;code class=&quot;highlighter-rouge&quot;&gt;visibility-timeout&lt;/code&gt; to 2 minutes (120 seconds).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs send-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue --message-body &quot;Gonna take long&quot;
{
    &quot;MD5OfMessageBody&quot;: &quot;de80b2f443dc0a15382a40a625b74d3a&quot;,
    &quot;MessageId&quot;: &quot;8efcd759-eb0f-48a3-92fe-5b83e0dd8740&quot;
}
aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/111111111111/my_test_queue
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;Gonna take long&quot;,
            &quot;ReceiptHandle&quot;: &quot;AQEBYkUuIUjSEnzSI7ymjk/oRB0K9osJ2Nyud1+pij4nVAJ8taZ+FHq1kvWIm4LGrjZEVveMPOjsxP/nmmaUCEXAZKYQHATnQDT2Hqt+NJiMQG+EFd6HBTXtT5gH29UN/ieAOGHAV6zWR2IJH+h4eRA8U7tgciatz5P/KGrHgH1qmxe9EoSkXOulikG82cs22gymNBeqNe+TZiNgwH6Kfd6CwTcCh8oowk1YXMqXaVCBso1n1R7JtMkDWd4R1CnEVCtTt1ZCfbVgHrKADPFkuwUYIp0lEXXYeDD5GqvJBaR3+INFW2t7qEMb0uzPr1s9n42W2uMEC7u45dqYss9mWlNhrI7+YG6IxCL0jx7VxIIrkOj1ihsHgwj+bxMCH7Eiu+87&quot;,
            &quot;MD5OfBody&quot;: &quot;de80b2f443dc0a15382a40a625b74d3a&quot;,
            &quot;MessageId&quot;: &quot;8efcd759-eb0f-48a3-92fe-5b83e0dd8740&quot;
        }
    ]
}

aws&amp;gt; sqs change-message-visibility --queue-url https://queue.amazonaws.com/111111111111/my_test_queue --receipt-handle &quot;AQEBYkUuIUjSEnzSI7ymjk/oRB0K9osJ2Nyud1+pij4nVAJ8taZ+FHq1kvWIm4LGrjZEVveMPOjsxP/nmmaUCEXAZKYQHATnQDT2Hqt+NJiMQG+EFd6HBTXtT5gH29UN/ieAOGHAV6zWR2IJH+h4eRA8U7tgciatz5P/KGrHgH1qmxe9EoSkXOulikG82cs22gymNBeqNe+TZiNgwH6Kfd6CwTcCh8oowk1YXMqXaVCBso1n1R7JtMkDWd4R1CnEVCtTt1ZCfbVgHrKADPFkuwUYIp0lEXXYeDD5GqvJBaR3+INFW2t7qEMb0uzPr1s9n42W2uMEC7u45dqYss9mWlNhrI7+YG6IxCL0jx7VxIIrkOj1ihsHgwj+bxMCH7Eiu+87&quot; --visibility-timeout 120
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now even if we try to get message after 30 seconds, this message will not show up. However, it will after 120 seconds unless we delete it. Remember that this value is absolute, which means it changes the timeout from default (30 seconds) to 120 seconds and not to 30+120 seconds.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="sqs" />
      

      

      
        <summary type="html">This post is the handout for the SQS Lab I ran as a part of hands-on AWS training to the Engineering + DevOps team at Marqeta.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">AWS Primer and Quickstart Presentation</title>
      
      <link href="https://lobster1234.github.io/2017/02/01/aws-primer-and-quickstart/" rel="alternate" type="text/html" title="AWS Primer and Quickstart Presentation" />
      <published>2017-02-01T07:22:10-08:00</published>
      <updated>2017-02-01T07:22:10-08:00</updated>
      <id>https://lobster1234.github.io/2017/02/01/aws-primer-and-quickstart</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/02/01/aws-primer-and-quickstart/">Slides from my introductory talk on AWS at Marqeta.

&lt;!--more--&gt;
&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;13c65dd7c1744c319001b4415e3ca439&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      

      

      
        <summary type="html">Slides from my introductory talk on AWS at Marqeta.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Balanced Brackets</title>
      
      <link href="https://lobster1234.github.io/2016/12/24/balance-brackets-o-n-solution/" rel="alternate" type="text/html" title="Balanced Brackets" />
      <published>2016-12-24T21:22:10-08:00</published>
      <updated>2016-12-24T21:22:10-08:00</updated>
      <id>https://lobster1234.github.io/2016/12/24/balance-brackets-o-n-solution</id>
      <content type="html" xml:base="https://lobster1234.github.io/2016/12/24/balance-brackets-o-n-solution/">&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/balanced-brackets&quot;&gt;Here&lt;/a&gt; is the problem statement. Print YES if the brackets in a given string are balanced, else print NO. Here is my O(N) submission to the challenge.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.text.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.math.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.regex.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBalanced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;YES&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NO&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isBalanced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'{'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'['&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;']'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'['&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'}'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'{'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;')'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="data-structures" />
      

      

      
        <summary type="html">Here is the problem statement. Print YES if the brackets in a given string are balanced, else print NO. Here is my O(N) submission to the challenge.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Multitenant MySQL Setup</title>
      
      <link href="https://lobster1234.github.io/2016/11/03/multitenant-mysql/" rel="alternate" type="text/html" title="Multitenant MySQL Setup" />
      <published>2016-11-03T10:05:22-07:00</published>
      <updated>2016-11-03T10:05:22-07:00</updated>
      <id>https://lobster1234.github.io/2016/11/03/multitenant-mysql</id>
      <content type="html" xml:base="https://lobster1234.github.io/2016/11/03/multitenant-mysql/">&lt;p&gt;It is much easier to make API/code multi-tenant, but it is a different story for databases. This problem exists at pretty much all SaaS based solutions, intending to provide data and service level isolation for many users/customers while trying to keep the code + database scalable. However, here are a few strategies that can be employed, based on the pros/cons and the freedom/constraints driving the solution.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;use-a-tenant_id-for-each-record&quot;&gt;Use a tenant_id for each record&lt;/h2&gt;

&lt;h4 id=&quot;how&quot;&gt;How&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Single database running on single instance&lt;/li&gt;
  &lt;li&gt;Every record has a &lt;code class=&quot;highlighter-rouge&quot;&gt;tenant_id&lt;/code&gt; as a part of the composite primary key.&lt;/li&gt;
  &lt;li&gt;Application will need to provide this &lt;code class=&quot;highlighter-rouge&quot;&gt;tenant_id&lt;/code&gt; for every query as a part of the where clause&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pros&quot;&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;One database, one instance&lt;/li&gt;
  &lt;li&gt;Relatively easy to run cross-tenant queries&lt;/li&gt;
  &lt;li&gt;Relatively easier to manage and apply schema updates&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cons&quot;&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;No db level isolation of tenant data&lt;/li&gt;
  &lt;li&gt;No option to support schema changes specific to a tenant&lt;/li&gt;
  &lt;li&gt;Imbalance of tenants can adversely affect the DB performance, creating hotspots&lt;/li&gt;
  &lt;li&gt;The sheer size and operation frequency increases the chances of db file corruption&lt;/li&gt;
  &lt;li&gt;Will hit the file system size limits&lt;/li&gt;
  &lt;li&gt;Trust the developer to provide the additional where condition&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;put-every-tenant-in-a-separate-db-same-instance&quot;&gt;Put every tenant in a separate db, same instance&lt;/h2&gt;

&lt;h4 id=&quot;how-1&quot;&gt;How&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Every tenant gets his schema, but runs under the same physical database server&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;tenant_id&lt;/code&gt; becomes the db name, so the queries do not change, but the connection string changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pros-1&quot;&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Managable dataset size per tenant&lt;/li&gt;
  &lt;li&gt;Better control of any schema changes specific to a tenant, if needed.&lt;/li&gt;
  &lt;li&gt;DB level isolation of tenant data&lt;/li&gt;
  &lt;li&gt;Easier to roll out tenant specific code release as other tenants wont be affected by schema changes if the app servers are deployed separately per tenant.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cons-1&quot;&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Will need to apply schema changes to all such DBs, making coordination of code changes harder if dedicated app servers talk to the db.&lt;/li&gt;
  &lt;li&gt;Will hit the system file size limits, as it is still 1 physical file&lt;/li&gt;
  &lt;li&gt;The fact that there is only 1 physical file, there could be IO contention just like 1 db per instance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;put-every-tenant-in-its-own-instance&quot;&gt;Put every tenant in its own instance&lt;/h2&gt;

&lt;h4 id=&quot;how-2&quot;&gt;How&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Every tenant gets a provisioned hardware mysql instance&lt;/li&gt;
  &lt;li&gt;The code will need to use separate connection strings, no impact to SQL&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pros-2&quot;&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Complete physical isolation of tenant data&lt;/li&gt;
  &lt;li&gt;Control of the DB instance size based on the load exerted by the tenant&lt;/li&gt;
  &lt;li&gt;Predictable Disk IO performance, due to isolation of data usage patterns&lt;/li&gt;
  &lt;li&gt;Can have customized DB schema changes to a tenant&lt;/li&gt;
  &lt;li&gt;Easier to roll out tenant specific code release (if dedicated app servers talk to a specific db)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cons-2&quot;&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Each tenant DB instance is $$&lt;/li&gt;
  &lt;li&gt;The cost quickly adds up with secondaries (standby) and read replicas if needed&lt;/li&gt;
  &lt;li&gt;Same challenge with DB schema updates across all tenants&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="databases" />
      

      

      
        <summary type="html">It is much easier to make API/code multi-tenant, but it is a different story for databases. This problem exists at pretty much all SaaS based solutions, intending to provide data and service level isolation for many users/customers while trying to keep the code + database scalable. However, here are a few strategies that can be employed, based on the pros/cons and the freedom/constraints driving the solution.</summary>
      

      
      
    </entry>
  
  
</feed>
